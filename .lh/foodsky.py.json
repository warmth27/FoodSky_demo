{
    "sourceFile": "foodsky.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1751867924648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751867948115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import json\n+import os\n+import jieba\n+import copy\n+import asyncio\n+import time\n+from collections import defaultdict\n+from rank_bm25 import BM25Okapi\n+import logging\n+import concurrent.futures\n+from functools import partial\n+from logging.handlers import TimedRotatingFileHandler\n+import numpy as np\n+from flask import Flask, jsonify, request\n+\n+import config\n+from concurrent.futures import ThreadPoolExecutor\n+app = Flask(__name__)\n+\n+from openai import OpenAI\n+client = OpenAI(\n+    base_url=\"http://localhost:8003/v1\",\n+    api_key=\"EMPYT\", # 随便填写，只是为了通过接口参数校验\n+)\n+\n+###绑定配置文件\n+UPLOAD_FOLDER = './uploadfile'  # 请根据需要修改\n+log_path=\"./logs\"\n+if not os.path.exists(UPLOAD_FOLDER):\n+    os.mkdir(UPLOAD_FOLDER)\n+if not os.path.exists(log_path):\n+    os.mkdir(log_path)\n+app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n+\n+app.config.from_object(config)\n+\n+nutritionDataset_path = \"/nfs/data/project/xcx_app_project/nutritionDatabase.json\"\n+recipeDataset_path = \"/nfs/data/project/xcx_app_project/recipeDataset.json\"\n+nutri_range_Dataset_path = \"/nfs/data/project/xcx_app_project/base_nutri_range.json\"\n+\n+with open(nutritionDataset_path,'r',encoding='utf-8')as f:\n+    nutritionDataset = json.load(f)\n+with open(recipeDataset_path,'r',encoding='utf-8')as f:\n+    recipeDataset = json.load(f)\n+with open(nutri_range_Dataset_path,'r',encoding='utf-8')as f:\n+    nutriRangeDataset = json.load(f)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751867982988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,5 +42,7 @@\n     nutritionDataset = json.load(f)\n with open(recipeDataset_path,'r',encoding='utf-8')as f:\n     recipeDataset = json.load(f)\n with open(nutri_range_Dataset_path,'r',encoding='utf-8')as f:\n-    nutriRangeDataset = json.load(f)\n\\ No newline at end of file\n+    nutriRangeDataset = json.load(f)\n+    \n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1751868002587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,5 +44,5 @@\n     recipeDataset = json.load(f)\n with open(nutri_range_Dataset_path,'r',encoding='utf-8')as f:\n     nutriRangeDataset = json.load(f)\n     \n-    \n\\ No newline at end of file\n+#\n"
                },
                {
                    "date": 1751868017960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,5 +44,6 @@\n     recipeDataset = json.load(f)\n with open(nutri_range_Dataset_path,'r',encoding='utf-8')as f:\n     nutriRangeDataset = json.load(f)\n     \n-#\n+#! 设置三餐比例\n+s\n"
                },
                {
                    "date": 1751868023151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,5 +45,9 @@\n with open(nutri_range_Dataset_path,'r',encoding='utf-8')as f:\n     nutriRangeDataset = json.load(f)\n     \n #! 设置三餐比例\n-s\n+scale = {\n+    \"早餐\": 0.3,\n+    \"午餐\": 0.4,\n+    \"晚餐\": 0.3\n+}\n"
                },
                {
                    "date": 1751868034884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,4 +50,18 @@\n     \"早餐\": 0.3,\n     \"午餐\": 0.4,\n     \"晚餐\": 0.3\n }\n+\n+def setup_logger(log_name, log_file):\n+    logger = logging.getLogger(log_name)\n+    logger.setLevel(logging.INFO)\n+\n+    # 日志文件每日轮转\n+    handler = TimedRotatingFileHandler(\n+        filename=log_file, when=\"midnight\", interval=1, backupCount=7, encoding=\"utf-8\"\n+    )\n+    formatter = logging.Formatter(\"%(asctime)s - %(levelname)s - %(message)s\")\n+    handler.setFormatter(formatter)\n+    logger.addHandler(handler)\n+\n+    return logger\n"
                },
                {
                    "date": 1751868940852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,4 +64,6 @@\n     handler.setFormatter(formatter)\n     logger.addHandler(handler)\n \n     return logger\n+\n+\n"
                },
                {
                    "date": 1751869207629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,14 @@\n     \"午餐\": 0.4,\n     \"晚餐\": 0.3\n }\n \n+gender_map = {\n+    \"男\":\"male\",\n+    \"女\":\"female\"\n+}\n+\n+\n def setup_logger(log_name, log_file):\n     logger = logging.getLogger(log_name)\n     logger.setLevel(logging.INFO)\n \n@@ -65,5 +71,11 @@\n     logger.addHandler(handler)\n \n     return logger\n \n-\n+#! 基于BM25的菜品名称匹配\n+def match_dish_name_bm25(query, dishes):\n+    tokenized_corpus = [list(jieba.cut(d)) for d in dishes]\n+    bm25 = BM25Okapi(tokenized_corpus)\n+    query_tokens = list(jieba.cut(query))\n+    scores = bm25.get_scores(query_tokens)\n+    return dishes[scores.argmax()]\n"
                },
                {
                    "date": 1751869233933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,4 +78,6 @@\n     bm25 = BM25Okapi(tokenized_corpus)\n     query_tokens = list(jieba.cut(query))\n     scores = bm25.get_scores(query_tokens)\n     return dishes[scores.argmax()]\n+\n+\n"
                },
                {
                    "date": 1751869282633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,4 +80,31 @@\n     scores = bm25.get_scores(query_tokens)\n     return dishes[scores.argmax()]\n \n \n+\n+\n+#! 根据用户信息获取营养推荐范围\n+def get_nutri_range(data):\n+    def is_valid(value):\n+\n+        return value not in [None, '', 'null']\n+\n+    fields = {\n+        '性别': is_valid(data.get('性别')),\n+        '年龄': is_valid(data.get('年龄')),\n+        '身高': is_valid(data.get('身高')),\n+        '体重': is_valid(data.get('体重')),\n+    }\n+    activity_level = data['activity_level']\n+    present = {k for k, v in fields.items() if v}\n+    if present == {'性别', '年龄', '身高', '体重'}:\n+        gender = gender_map[data['性别']]\n+        result_nutrition_dict = nutritionDataDict(int(data['年龄']),gender,float(data['身高']),float(data['体重']),activity_level)\n+    elif present == {'性别', '年龄'}:\n+        gender = gender_map[data['性别']]\n+        result_nutrition_dict = nutritionDataDict(int(data['年龄']),gender,None,None,None)\n+    elif present.issubset({'性别', '年龄'}) or len(present) <= 1:\n+        return None\n+    else:\n+        return f\"信息部分存在（{present}），但不满足规则，请补全信息\"\n+    return result_nutrition_dict\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751869512317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,19 +71,81 @@\n     logger.addHandler(handler)\n \n     return logger\n \n+\n+\n+\n #! 基于BM25的菜品名称匹配\n def match_dish_name_bm25(query, dishes):\n     tokenized_corpus = [list(jieba.cut(d)) for d in dishes]\n     bm25 = BM25Okapi(tokenized_corpus)\n     query_tokens = list(jieba.cut(query))\n     scores = bm25.get_scores(query_tokens)\n     return dishes[scores.argmax()]\n \n+#! 基于用户输入的年龄、性别、身高、体重、活动水平，计算用户的营养需求范围\n+def nutritionDataDict(age,gender,height,weight,activity_level):\n+    nutriRangeList = list(nutriRangeDataset[gender].keys())\n+    #data['年龄']    \n+    if not activity_level:\n+        activity_level = \"a\"\n+    for age_range in nutriRangeList:\n+        age_range_list = list(map(int, age_range.split(\"-\")))\n+        if age > min(age_range_list) and age < max(age_range_list):\n+            nutrition_dict = copy.deepcopy(nutriRangeDataset[gender][age_range])\n+            print(\"activity_level\",activity_level)\n+            print(nutrition_dict['能量'])\n+            nutrition_dict['能量'] = nutrition_dict['能量'][activity_level]\n+            convert_microgram_fields_to_mg(nutrition_dict, \"钼\")\n+            convert_microgram_fields_to_mg(nutrition_dict, \"铬\")\n+            convert_microgram_fields_to_mg(nutrition_dict, \"硒\")\n+            convert_microgram_fields_to_mg(nutrition_dict, \"碘\")\n+            convert_microgram_fields_to_mg(nutrition_dict, \"维生素A\")\n+            convert_microgram_fields_to_mg(nutrition_dict, \"维生素K\")\n+            convert_microgram_fields_to_mg(nutrition_dict, \"维生素B12\")\n+            convert_microgram_fields_to_mg(nutrition_dict, \"叶酸\")\n+            convert_microgram_fields_to_mg(nutrition_dict, \"生物素\")\n+    if height:\n+        if isinstance(age,int):\n+            if gender == \"male\":\n+                bmr = 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\n+            elif gender == \"female\":\n+                bmr = 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\n+            else:\n+                raise ValueError(\"性别必须为 'male' 或 'female'\")\n \n+        # 计算每日总能量消耗 (TDEE)\n+        activity_multipliers = {\n+            \"a\": 1.2,\n+            \"b\": 1.55,\n+            \"c\": 1.9,\n+            \"身体活动水平(轻)\": 1.2,\n+            \"身体活动水平(中)\": 1.55,\n+            \"身体活动水平(重)\": 1.9\n+        }\n+        tdee = bmr * activity_multipliers[activity_level]\n \n+        # 计算宏量营养素需求\n+        # 蛋白质: 1.6 克/公斤体重（适用于一般运动人群）\n+        protein_per_kg = 1.6\n+        protein_g = protein_per_kg * weight\n+        protein_calories = protein_g * 4  # 每克蛋白质提供 4 卡路里\n \n+        # 脂肪: 占总能量的 25%\n+        fat_calories = tdee * 0.25\n+        fat_g = fat_calories / 9  # 每克脂肪提供 9 卡路里\n+\n+        # 碳水化合物: 剩余能量\n+        carb_calories = tdee - protein_calories - fat_calories\n+        carb_g = carb_calories / 4  # 每克碳水化合物提供 4 卡路里\n+\n+        nutrition_dict[\"能量\"] = round(tdee, 2)\n+        nutrition_dict[\"蛋白质\"] = round(protein_g, 2)\n+        nutrition_dict[\"脂肪\"] = round(fat_g, 2)\n+        nutrition_dict[\"碳水化合物\"] = round(carb_g, 2)\n+    return nutrition_dict\n+\n #! 根据用户信息获取营养推荐范围\n def get_nutri_range(data):\n     def is_valid(value):\n \n"
                },
                {
                    "date": 1751869521988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,30 @@\n \n     return logger\n \n \n+#! 将ug单位转换为mg单位\n+def convert_microgram_fields_to_mg(nutrition_dict, field):\n+    value = nutrition_dict.get(field)\n+    if value is None:\n+        return  # 如果该字段不存在则跳过\n \n+    if isinstance(value, (int, float)):\n+        nutrition_dict[field] = round(value / 1000, 6)\n+    elif isinstance(value, str):\n+        value = value.strip()\n+        if '-' in value:\n+            try:\n+                parts = value.split('-')\n+                converted = [str(round(float(p.strip()) / 1000, 6)) for p in parts]\n+                nutrition_dict[field] = '-'.join(converted)\n+            except ValueError:\n+                pass\n+        else:\n+            try:\n+                nutrition_dict[field] = round(float(value) / 1000, 6)\n+            except ValueError:\n+                pass\n \n #! 基于BM25的菜品名称匹配\n def match_dish_name_bm25(query, dishes):\n     tokenized_corpus = [list(jieba.cut(d)) for d in dishes]\n"
                },
                {
                    "date": 1751869533699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,8 +95,9 @@\n                 nutrition_dict[field] = round(float(value) / 1000, 6)\n             except ValueError:\n                 pass\n \n+\n #! 基于BM25的菜品名称匹配\n def match_dish_name_bm25(query, dishes):\n     tokenized_corpus = [list(jieba.cut(d)) for d in dishes]\n     bm25 = BM25Okapi(tokenized_corpus)\n@@ -165,8 +166,9 @@\n         nutrition_dict[\"脂肪\"] = round(fat_g, 2)\n         nutrition_dict[\"碳水化合物\"] = round(carb_g, 2)\n     return nutrition_dict\n \n+\n #! 根据用户信息获取营养推荐范围\n def get_nutri_range(data):\n     def is_valid(value):\n \n"
                },
                {
                    "date": 1751869544765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,9 @@\n     query_tokens = list(jieba.cut(query))\n     scores = bm25.get_scores(query_tokens)\n     return dishes[scores.argmax()]\n \n+\n #! 基于用户输入的年龄、性别、身高、体重、活动水平，计算用户的营养需求范围\n def nutritionDataDict(age,gender,height,weight,activity_level):\n     nutriRangeList = list(nutriRangeDataset[gender].keys())\n     #data['年龄']    \n"
                },
                {
                    "date": 1751869551917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n     scores = bm25.get_scores(query_tokens)\n     return dishes[scores.argmax()]\n \n \n-#! 基于用户输入的年龄、性别、身高、体重、活动水平，计算用户的营养需求范围\n+#! 基于用户输入的年龄、性别、身高、体，计算用户的营养需求范围\n def nutritionDataDict(age,gender,height,weight,activity_level):\n     nutriRangeList = list(nutriRangeDataset[gender].keys())\n     #data['年龄']    \n     if not activity_level:\n"
                },
                {
                    "date": 1751869560666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n     scores = bm25.get_scores(query_tokens)\n     return dishes[scores.argmax()]\n \n \n-#! 基于用户输入的年龄、性别、身高、体，计算用户的营养需求范围\n+#! 基于用户输入的年龄、性别等基本信息，计算用户的营养需求范围\n def nutritionDataDict(age,gender,height,weight,activity_level):\n     nutriRangeList = list(nutriRangeDataset[gender].keys())\n     #data['年龄']    \n     if not activity_level:\n"
                },
                {
                    "date": 1751869587100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n     scores = bm25.get_scores(query_tokens)\n     return dishes[scores.argmax()]\n \n \n-#! 基于用户输入的年龄、性别等基本信息，计算用户的营养需求范围\n+#! 基于用户的年龄、性别等基本信息，计算用户的营养需求范围\n def nutritionDataDict(age,gender,height,weight,activity_level):\n     nutriRangeList = list(nutriRangeDataset[gender].keys())\n     #data['年龄']    \n     if not activity_level:\n"
                },
                {
                    "date": 1751869601853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n         nutrition_dict[\"碳水化合物\"] = round(carb_g, 2)\n     return nutrition_dict\n \n \n-#! 根据用户信息获取营养推荐范围\n+#! 解析用户\n def get_nutri_range(data):\n     def is_valid(value):\n \n         return value not in [None, '', 'null']\n"
                },
                {
                    "date": 1751869611503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n         nutrition_dict[\"碳水化合物\"] = round(carb_g, 2)\n     return nutrition_dict\n \n \n-#! 解析用户\n+#! 解析用户输入的个人信息，\n def get_nutri_range(data):\n     def is_valid(value):\n \n         return value not in [None, '', 'null']\n"
                },
                {
                    "date": 1751869618601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n         nutrition_dict[\"碳水化合物\"] = round(carb_g, 2)\n     return nutrition_dict\n \n \n-#! 解析用户输入的个人信息，\n+#! ti'q用户输入的个人信息，提取性别、年龄、\n def get_nutri_range(data):\n     def is_valid(value):\n \n         return value not in [None, '', 'null']\n"
                },
                {
                    "date": 1751869626188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n         nutrition_dict[\"碳水化合物\"] = round(carb_g, 2)\n     return nutrition_dict\n \n \n-#! ti'q用户输入的个人信息，提取性别、年龄、\n+#! 提取用户输入的个人信息，获取\n def get_nutri_range(data):\n     def is_valid(value):\n \n         return value not in [None, '', 'null']\n"
                },
                {
                    "date": 1751869653608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n     scores = bm25.get_scores(query_tokens)\n     return dishes[scores.argmax()]\n \n \n-#! 基于用户的年龄、性别等基本信息，计算用户的营养需求范围\n+#! 基于用户的年龄、性别等基本信息，计算用户的推荐营养范围\n def nutritionDataDict(age,gender,height,weight,activity_level):\n     nutriRangeList = list(nutriRangeDataset[gender].keys())\n     #data['年龄']    \n     if not activity_level:\n@@ -168,9 +168,9 @@\n         nutrition_dict[\"碳水化合物\"] = round(carb_g, 2)\n     return nutrition_dict\n \n \n-#! 提取用户输入的个人信息，获取\n+#! 提取用户输入的个人信息，获取用户的营养需求范围\n def get_nutri_range(data):\n     def is_valid(value):\n \n         return value not in [None, '', 'null']\n"
                },
                {
                    "date": 1751869662298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n         nutrition_dict[\"碳水化合物\"] = round(carb_g, 2)\n     return nutrition_dict\n \n \n-#! 提取用户输入的个人信息，获取用户的营养需求范围\n+#! 提取用户输入的个人信息，获取用户的推荐营养范围\n def get_nutri_range(data):\n     def is_valid(value):\n \n         return value not in [None, '', 'null']\n"
                },
                {
                    "date": 1752026218929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n from functools import partial\n from logging.handlers import TimedRotatingFileHandler\n import numpy as np\n from flask import Flask, jsonify, request\n+import pulp\n \n import config\n from concurrent.futures import ThreadPoolExecutor\n app = Flask(__name__)\n@@ -45,18 +46,11 @@\n with open(nutri_range_Dataset_path,'r',encoding='utf-8')as f:\n     nutriRangeDataset = json.load(f)\n     \n #! 设置三餐比例\n-scale = {\n-    \"早餐\": 0.3,\n-    \"午餐\": 0.4,\n-    \"晚餐\": 0.3\n-}\n+scale = {\"早餐\": 0.3, \"午餐\": 0.4, \"晚餐\": 0.3}\n \n-gender_map = {\n-    \"男\":\"male\",\n-    \"女\":\"female\"\n-}\n+gender_map = {\"男\":\"male\",\"女\":\"female\"}\n \n \n def setup_logger(log_name, log_file):\n     logger = logging.getLogger(log_name)\n@@ -192,5 +186,278 @@\n     elif present.issubset({'性别', '年龄'}) or len(present) <= 1:\n         return None\n     else:\n         return f\"信息部分存在（{present}），但不满足规则，请补全信息\"\n-    return result_nutrition_dict\n\\ No newline at end of file\n+    return result_nutrition_dict\n+\n+#! 计算单个菜品内​​所有食材的总营养成分​，只处理食材\n+def ingredients_calculate_weight(data):\n+    if len(data) < 1:\n+        return None,0\n+    calories = 0\n+    fats = 0\n+    protein = 0\n+    carbohydrate = 0\n+    vitamin_B1 = 0\n+    calcium = 0\n+    vitamin_B2 = 0\n+    magnesium = 0\n+    niacin = 0\n+    iron = 0\n+    vitamin_C = 0\n+    manganese = 0\n+    insoluble_Dietary_Fiber = 0\n+    vitamin_E = 0\n+    zinc = 0\n+    total_Vitamin_A = 0\n+    cholesterol = 0\n+    copper = 0\n+    carotene = 0\n+    potassium = 0\n+    phosphorus = 0\n+    vitamin_A = 0\n+    sodium = 0\n+    selenium = 0\n+    total_weight = 0\n+    for each_ingredients in data:\n+        ingredients_name = each_ingredients[0]\n+        weight = int(each_ingredients[1])\n+        total_weight = weight + total_weight\n+        flat_dict = {list(d.keys())[0]: list(d.values())[0] for d in nutritionDataset[ingredients_name]['content']}\n+        calories = float(flat_dict.get(\"能量\"))/100 * weight + calories\n+        fats = float(flat_dict.get(\"脂肪\"))/100*weight + fats\n+        protein = float(flat_dict.get(\"蛋白质\"))/100*weight + protein\n+        carbohydrate = float(flat_dict.get(\"碳水化合物\"))/100*weight + carbohydrate\n+        vitamin_B1 = float(flat_dict.get(\"硫胺素\"))/100*weight + vitamin_B1\n+        calcium = float(flat_dict.get(\"钙\"))/100*weight + calcium\n+        vitamin_B2 = float(flat_dict.get(\"核黄素\"))/100*weight + vitamin_B2\n+        magnesium = float(flat_dict.get(\"镁\"))/100*weight + magnesium\n+        niacin = float(flat_dict.get(\"烟酸\"))/100*weight + niacin\n+        iron = float(flat_dict.get(\"铁\"))/100*weight + iron\n+        vitamin_C = float(flat_dict.get(\"维生素C\"))/100*weight + vitamin_C\n+        manganese = float(flat_dict.get(\"锰\"))/100*weight + manganese\n+        insoluble_Dietary_Fiber = float(flat_dict.get(\"不溶性膳食纤维\"))/100*weight + insoluble_Dietary_Fiber\n+        vitamin_E = float(flat_dict.get(\"维生素E\"))/100*weight + vitamin_E\n+        zinc = float(flat_dict.get(\"锌\"))/100*weight + zinc\n+        total_Vitamin_A = float(flat_dict.get(\"总维生素A\"))/100*weight + total_Vitamin_A\n+        cholesterol = float(flat_dict.get(\"胆固醇\"))/100*weight + cholesterol\n+        copper = float(flat_dict.get(\"铜\"))/100*weight + copper\n+        carotene = float(flat_dict.get(\"胡萝卜素\"))/100*weight + carotene\n+        potassium = float(flat_dict.get(\"钾\"))/100*weight + potassium\n+        phosphorus = float(flat_dict.get(\"磷\"))/100*weight + phosphorus\n+        vitamin_A = float(flat_dict.get(\"视黄醇\"))/100*weight + vitamin_A\n+        sodium = float(flat_dict.get(\"钠\"))/100*weight + sodium\n+        selenium = float(flat_dict.get(\"硒\"))/100*weight + selenium\n+    all_nutrition = {\n+        \"能量\":calories,\n+        \"脂肪\":fats,\n+        \"蛋白质\":protein,\n+        \"碳水化合物\":carbohydrate,\n+        \"维生素B1\":vitamin_B1,\n+        \"钙\":calcium,\n+        \"维生素B2\":vitamin_B2,\n+        \"镁\":magnesium,\n+        \"烟酸\":niacin,\n+        \"铁\":iron,\n+        \"维生素C\":vitamin_C,\n+        \"锰\":manganese,\n+        \"不溶性膳食纤维\":insoluble_Dietary_Fiber,\n+        \"维生素E\":vitamin_E,\n+        \"锌\":zinc,\n+        \"总维生素A\":total_Vitamin_A,\n+        \"胆固醇\":cholesterol,\n+        \"铜\":copper,\n+        \"胡萝卜素\":carotene,\n+        \"钾\":potassium,\n+        \"磷\":phosphorus,\n+        \"维生素A\":vitamin_A/1000,\n+        \"钠\":sodium,\n+        \"硒\":selenium / 1000\n+    }\n+    return all_nutrition,total_weight\n+\n+#! 计算整个餐单的食材，包括处理食材和食谱\n+def cal_food_nutri(all_food_name):\n+    total_nutrition_all = {}\n+    total_food_weight = 0\n+    total_main_weight = 0\n+    total_other_weight = 0\n+    \n+    # 缓存匹配结果，避免重复匹配\n+    recipe_cache = {}\n+    nutrition_cache = {}\n+    \n+    for each_food_dict in all_food_name:\n+        food_name = each_food_dict[\"食品名称\"]\n+        food_weight = each_food_dict[\"食品克数\"]\n+        value = each_food_dict.get(\"食材信息\")\n+        \n+        total_nutrition = {}\n+        print(\"food_name\",food_name)\n+        if isinstance(value, (dict, str)) and value:\n+            # 处理食材信息\n+            ingredient_info = each_food_dict['食材信息']\n+            each_food_list = []\n+            \n+            for k, v in ingredient_info.items():\n+                # 使用缓存避免重复匹配\n+                if k not in nutrition_cache:\n+                    matched_food_name = match_dish_name_bm25(k, list(nutritionDataset.keys()))\n+                    nutrition_cache[k] = matched_food_name\n+                else:\n+                    matched_food_name = nutrition_cache[k]\n+                \n+                print(\"matched_food_name\", matched_food_name)\n+                each_food_list.append([matched_food_name, float(v)])\n+            \n+            total_nutrition, all_weight = ingredients_calculate_weight(each_food_list)\n+            \n+        else:\n+            # 处理菜品信息\n+            total_food_weight += int(food_weight)\n+            \n+            # 使用缓存避免重复匹配和计算\n+            if food_name not in recipe_cache:\n+                matched_food_name = match_dish_name_bm25(food_name, list(recipeDataset.keys()))\n+                print(\"matched_food_name\", matched_food_name)\n+                recipe_dict = recipeDataset[matched_food_name]\n+                \n+                # 计算食材营养\n+                main_ingred = recipe_dict['主食材']\n+                main_ingred_all_nutrition, main_weight = ingredients_calculate_weight(main_ingred)\n+                other_ingred = recipe_dict['辅料']\n+                other_ingred_all_nutrition, other_weight = ingredients_calculate_weight(other_ingred)\n+                \n+                # 合并营养信息\n+                if main_ingred_all_nutrition and other_ingred_all_nutrition:\n+                    combined_nutrition = {}\n+                    all_keys = set(main_ingred_all_nutrition.keys()) | set(other_ingred_all_nutrition.keys())\n+                    for key in all_keys:\n+                        main_value = float(main_ingred_all_nutrition.get(key, 0))\n+                        other_value = float(other_ingred_all_nutrition.get(key, 0))\n+                        combined_nutrition[key] = main_value + other_value\n+                elif main_ingred_all_nutrition:\n+                    combined_nutrition = main_ingred_all_nutrition\n+                elif other_ingred_all_nutrition:\n+                    combined_nutrition = other_ingred_all_nutrition\n+                else:\n+                    combined_nutrition = {}\n+                \n+                # 缓存结果\n+                recipe_cache[food_name] = {\n+                    'nutrition': combined_nutrition,\n+                    'main_weight': main_weight,\n+                    'other_weight': other_weight\n+                }\n+            else:\n+                # 使用缓存的结果\n+                cached_result = recipe_cache[food_name]\n+                combined_nutrition = cached_result['nutrition']\n+                main_weight = cached_result['main_weight']\n+                other_weight = cached_result['other_weight']\n+            \n+            total_nutrition = combined_nutrition\n+            total_main_weight += int(main_weight)\n+            total_other_weight += int(other_weight)\n+        \n+        # 累积营养信息 - 只遍历一次\n+        if total_nutrition:\n+            for key, value in total_nutrition.items():\n+                total_nutrition_all[key] = total_nutrition_all.get(key, 0) + float(value)\n+    \n+    # 最终计算 - 过滤和计算一次完成\n+    if total_main_weight + total_other_weight > 0:\n+        total_nutrition_all = {\n+            k: round(float(v) / (total_main_weight + total_other_weight) * total_food_weight, 4) \n+            for k, v in total_nutrition_all.items() if float(v) > 0\n+        }\n+    \n+    return total_nutrition_all\n+\n+\n+# 线性规划实现菜品选择\n+class DishOptimizer:\n+    def __init__(self):\n+        self.logger = setup_logger(\"optimizer\", \"logs/optimizer.log\")\n+    \n+    # 计算用户单餐营养需求（推荐营养范围）\n+    def calculate_meal_needs(self, user_info, meal_type):\n+        daily_needs = get_nutri_range(user_info)   # 全日营养需求\n+        meal_ratio = scale.get(meal_type, 0)  # 获取餐比例，默认0\n+        \n+        meal_needs = {}\n+        for nutrient, value in daily_needs.items():\n+            if isinstance(value, (int, float)):\n+                meal_needs[nutrient] = (value * meal_ratio * 0.9, value * meal_ratio * 1.1)  # 缩放0.9-1.1，避免无解\n+            elif isinstance(value, str) and '-' in value:\n+                low, high = map(float, value.split('-'))\n+                meal_needs[nutrient] = (low * meal_ratio * 0.9, high * meal_ratio * 1.1)\n+            else:\n+                meal_needs[nutrient] = (0, float('inf'))\n+\n+        return meal_needs\n+    # 计算单道菜品的营养范围\n+    def calculate_dish_nutrition(self, dish):\n+        dish_data =  [{\"食品名称\": dish[\"name\"], \"食品克数\": dish.get(\"weight\", 100)}]\n+        return cal_food_nutri(dish_data)\n+    \n+    # 使用线性规划优化菜品权重\n+    def optimize_dish_weights(self, user_needs, dishes):\n+        \"\"\"\n+        使用线性规划优化菜品权重\n+        :param user_needs: 单餐营养需求字典 {营养名: (min, max)}\n+        :param dishes: 菜品列表 [{\"name\": \"菜品名\", \"weight\": 重量(g)}]\n+        :return: 权重列表, 求解状态\n+        \"\"\"\n+        # 创建线性规划问题\n+        prob = pulp.LpProblem(\"DishWeightOptimization\", pulp.LpMinimize)\n+        # 关键营养素列表\n+        key_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n+        # 创建决策变量-每道菜的权重\n+        weights = [pulp.LpVariable(f\"w_{i}\", lowBound=0, upBound=1) for i in range(len(dishes))]\n+        \n+        # 计算菜品质量评分（此处设置为1）\n+        dish_scores = [1.0] * len(dishes)\n+        \n+        # 设置目标函数：最大化菜品权重与质量评分的点积\n+        prob += pulp.lpDot(weights, dish_scores), \"Total_Quality_Score\"\n+        \n+        # 计算每道菜的营养范围\n+        dish_nutritions = []\n+        for dish in dishes:\n+            nutrition = self.calculate_dish_nutrition(dish)\n+            dish_nutritions.append(nutrition)\n+            \n+        # 添加营养约束\n+        for nutrient in key_nutrients:\n+            # 获取用户需求营养范围\n+            min_val, max_val = user_needs.get(nutrient, (0, float('inf')))\n+            if max_val == float('inf'):\n+                continue\n+            \n+            # 计算加权总和\n+            nutrient_values = [dish.get(nutrient, 0) for dish in dish_nutritions]\n+            weighted_sum = pulp.lpDot(weights, nutrient_values)\n+            \n+            # 添加约束：加权总和在用户需求范围内\n+            if min_val > 0:\n+                prob += weighted_sum >= min_val, f\"{nutrient}_min\"\n+            if max_val < float('inf'):\n+                prob += weighted_sum <= max_val, f\"{nutrient}_max\"\n+        # 添加权重总和约束（至少选择70%菜品）\n+        prob += pulp.lpSum(weights) >= 0.7, \"Min_70_Percent\"\n+        # 添加每道菜品的最小重量约束（至少选择5%，避免权重为0，可选）\n+        for i, w in enumerate(weights):\n+            prob += w >= 0.05, f\"Min_Weight_{i}\"\n+        \n+        # 求解问题\n+        solver = pulp.PULP_CBC_CMD(msg=False) # 不显示求解过程\n+        status = prob.solve(solver)\n+        \n+        # 获取结果\n+        weights_result = [pulp.value(w) if w.value() is not None else 0 for w in weights]\n+        return weights_result, pulp.LpStatus[status]\n+\n+        \n+    \n+    \n+    \n"
                },
                {
                    "date": 1752027927888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -399,9 +399,9 @@\n     def calculate_dish_nutrition(self, dish):\n         dish_data =  [{\"食品名称\": dish[\"name\"], \"食品克数\": dish.get(\"weight\", 100)}]\n         return cal_food_nutri(dish_data)\n     \n-    # 使用线性规划优化菜品权重\n+    #! 使用线性规划优化菜品权重\n     def optimize_dish_weights(self, user_needs, dishes):\n         \"\"\"\n         使用线性规划优化菜品权重\n         :param user_needs: 单餐营养需求字典 {营养名: (min, max)}\n@@ -455,8 +455,9 @@\n         \n         # 获取结果\n         weights_result = [pulp.value(w) if w.value() is not None else 0 for w in weights]\n         return weights_result, pulp.LpStatus[status]\n+    \n \n         \n     \n     \n"
                },
                {
                    "date": 1752027933290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -456,9 +456,9 @@\n         # 获取结果\n         weights_result = [pulp.value(w) if w.value() is not None else 0 for w in weights]\n         return weights_result, pulp.LpStatus[status]\n     \n-    def\n+    def \n \n         \n     \n     \n"
                },
                {
                    "date": 1752027981939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -457,9 +457,9 @@\n         weights_result = [pulp.value(w) if w.value() is not None else 0 for w in weights]\n         return weights_result, pulp.LpStatus[status]\n     \n     # 生成菜品推荐\n-    def generate_recommendations(se)\n+    def generate_recommendations(sel)\n \n         \n     \n     \n"
                }
            ],
            "date": 1751867924648,
            "name": "Commit-0",
            "content": ""
        }
    ]
}