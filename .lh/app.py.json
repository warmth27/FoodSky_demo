{
    "sourceFile": "app.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 63,
            "patches": [
                {
                    "date": 1752476972049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752477007143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n from datetime import datetime\n \n # 设置页面配置\n st.set_page_config(\n-    page_title=\"智能菜品推荐系统\",\n+    page_title=\"FoodSky\",\n     page_icon=\"🍲\",\n     layout=\"wide\",\n     initial_sidebar_state=\"expanded\"\n )\n"
                },
                {
                    "date": 1752477026415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n from datetime import datetime\n \n # 设置页面配置\n st.set_page_config(\n-    page_title=\"FoodSky\",\n+    page_title=\"FoodSky膳食推荐\",\n     page_icon=\"🍲\",\n     layout=\"wide\",\n     initial_sidebar_state=\"expanded\"\n )\n"
                },
                {
                    "date": 1752478534110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n \n # 应用标题\n st.markdown(\"\"\"\n <div class=\"header\">\n-    <h1 style=\"text-align:center; margin:0;\">🍲 智能菜品推荐系统</h1>\n+    <h1 style=\"text-align:center; margin:0;\">🍲FoodSky膳食推荐</h1>\n     <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n </div>\n \"\"\", unsafe_allow_html=True)\n \n"
                },
                {
                    "date": 1752478554165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n # 应用标题\n st.markdown(\"\"\"\n <div class=\"header\">\n     <h1 style=\"text-align:center; margin:0;\">🍲FoodSky膳食推荐</h1>\n-    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n+    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于FoodSky，由中科深健研发的食品大模型推荐</p>\n </div>\n \"\"\", unsafe_allow_html=True)\n \n # 后端服务URL\n"
                },
                {
                    "date": 1752478566134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n # 应用标题\n st.markdown(\"\"\"\n <div class=\"header\">\n     <h1 style=\"text-align:center; margin:0;\">🍲FoodSky膳食推荐</h1>\n-    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于FoodSky，由中科深健研发的食品大模型推荐</p>\n+    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于FoodSky，由中科深健研发的食品大模型沙门氏菌哦推荐</p>\n </div>\n \"\"\", unsafe_allow_html=True)\n \n # 后端服务URL\n"
                },
                {
                    "date": 1752478573005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n # 应用标题\n st.markdown(\"\"\"\n <div class=\"header\">\n     <h1 style=\"text-align:center; margin:0;\">🍲FoodSky膳食推荐</h1>\n-    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于FoodSky，由中科深健研发的食品大模型沙门氏菌哦推荐</p>\n+    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于FoodSky，由中科深健研发的食品大模型膳食推荐</p>\n </div>\n \"\"\", unsafe_allow_html=True)\n \n # 后端服务URL\n"
                },
                {
                    "date": 1752478877312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,16 +235,37 @@\n         st.error(f\"发生未知错误: {str(e)}\")\n     \n     return False\n \n-# 左侧栏 - 用户信息输入\n+# 修复后的代码 - 将所有数值参数统一为浮点数\n+\n+# 在左侧栏 - 用户信息输入部分\n with st.sidebar:\n     st.markdown(\"### 🧑 个人信息\")\n     with st.container():\n         st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n         st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n-        st.number_input(\"身高 (cm)\", min_value=50, max_value=250, key=\"height\", value=175)\n-        st.number_input(\"体重 (kg)\", min_value=10, max_value=200, key=\"weight\", value=65.5)\n+        \n+        # 修复身高输入 - 统一为浮点数\n+        st.number_input(\n+            \"身高 (cm)\", \n+            min_value=50.0,  # 改为浮点数\n+            max_value=250.0, # 改为浮点数\n+            key=\"height\", \n+            value=175.0,     # 改为浮点数\n+            step=1.0         # 添加步长参数\n+        )\n+        \n+        # 修复体重输入 - 统一为浮点数\n+        st.number_input(\n+            \"体重 (kg)\", \n+            min_value=10.0,  # 改为浮点数\n+            max_value=200.0, # 改为浮点数\n+            key=\"weight\", \n+            value=65.5,      # 保持浮点数\n+            step=0.1          # 添加步长参数\n+        )\n+        \n         st.selectbox(\n             \"活动水平\", \n             [\"轻活动水平(办公室工作，很少运动)\", \"中活动水平(每天适量运动)\", \"重活动水平(体力劳动或高强度训练)\"], \n             key=\"activity_level\",\n@@ -256,11 +277,9 @@\n             key=\"meal_type\",\n             index=1\n         )\n \n-# 主内容区\n-col1, col2 = st.columns([1, 1])\n-\n+# 在菜品输入部分\n with col1:\n     # 菜品输入部分\n     st.markdown(\"### 🍽️ 菜品信息\")\n     with st.container():\n@@ -274,13 +293,15 @@\n                         key=f\"dish_name_{i}\",\n                         placeholder=\"例如: 番茄炒蛋\"\n                     )\n                 with col_b:\n+                    # 修复菜品重量输入 - 统一为浮点数\n                     dish_weight = st.number_input(\n                         \"重量 (g)\", \n-                        min_value=1, \n+                        min_value=1.0,  # 改为浮点数\n                         value=dish[\"weight\"],\n-                        key=f\"dish_weight_{i}\"\n+                        key=f\"dish_weight_{i}\",\n+                        step=1.0         # 添加步长参数\n                     )\n                 \n                 # 更新session state\n                 st.session_state.dishes[i][\"name\"] = dish_name\n@@ -288,19 +309,8 @@\n                 \n                 # 删除按钮（不是第一个菜品时显示）\n                 if i > 0:\n                     st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n-        \n-        # 添加菜品按钮\n-        st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n-        \n-        # 提交按钮\n-        if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n-            if submit_form():\n-                if call_backend_service():\n-                    st.success(\"推荐结果已生成！\")\n-                else:\n-                    st.session_state.recommendations = None\n \n with col2:\n     # 结果显示部分\n     st.markdown(\"### 📊 推荐结果\")\n"
                },
                {
                    "date": 1752478890052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,37 +235,16 @@\n         st.error(f\"发生未知错误: {str(e)}\")\n     \n     return False\n \n-# 修复后的代码 - 将所有数值参数统一为浮点数\n-\n-# 在左侧栏 - 用户信息输入部分\n+# 左侧栏 - 用户信息输入\n with st.sidebar:\n     st.markdown(\"### 🧑 个人信息\")\n     with st.container():\n         st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n         st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n-        \n-        # 修复身高输入 - 统一为浮点数\n-        st.number_input(\n-            \"身高 (cm)\", \n-            min_value=50.0,  # 改为浮点数\n-            max_value=250.0, # 改为浮点数\n-            key=\"height\", \n-            value=175.0,     # 改为浮点数\n-            step=1.0         # 添加步长参数\n-        )\n-        \n-        # 修复体重输入 - 统一为浮点数\n-        st.number_input(\n-            \"体重 (kg)\", \n-            min_value=10.0,  # 改为浮点数\n-            max_value=200.0, # 改为浮点数\n-            key=\"weight\", \n-            value=65.5,      # 保持浮点数\n-            step=0.1          # 添加步长参数\n-        )\n-        \n+        st.number_input(\"身高 (cm)\", min_value=50, max_value=250, key=\"height\", value=175)\n+        st.number_input(\"体重 (kg)\", min_value=10, max_value=200, key=\"weight\", value=65.5)\n         st.selectbox(\n             \"活动水平\", \n             [\"轻活动水平(办公室工作，很少运动)\", \"中活动水平(每天适量运动)\", \"重活动水平(体力劳动或高强度训练)\"], \n             key=\"activity_level\",\n@@ -277,9 +256,11 @@\n             key=\"meal_type\",\n             index=1\n         )\n \n-# 在菜品输入部分\n+# 主内容区\n+col1, col2 = st.columns([1, 1])\n+\n with col1:\n     # 菜品输入部分\n     st.markdown(\"### 🍽️ 菜品信息\")\n     with st.container():\n@@ -293,15 +274,13 @@\n                         key=f\"dish_name_{i}\",\n                         placeholder=\"例如: 番茄炒蛋\"\n                     )\n                 with col_b:\n-                    # 修复菜品重量输入 - 统一为浮点数\n                     dish_weight = st.number_input(\n                         \"重量 (g)\", \n-                        min_value=1.0,  # 改为浮点数\n+                        min_value=1, \n                         value=dish[\"weight\"],\n-                        key=f\"dish_weight_{i}\",\n-                        step=1.0         # 添加步长参数\n+                        key=f\"dish_weight_{i}\"\n                     )\n                 \n                 # 更新session state\n                 st.session_state.dishes[i][\"name\"] = dish_name\n@@ -309,8 +288,19 @@\n                 \n                 # 删除按钮（不是第一个菜品时显示）\n                 if i > 0:\n                     st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n+        \n+        # 添加菜品按钮\n+        st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n+        \n+        # 提交按钮\n+        if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n+            if submit_form():\n+                if call_backend_service():\n+                    st.success(\"推荐结果已生成！\")\n+                else:\n+                    st.session_state.recommendations = None\n \n with col2:\n     # 结果显示部分\n     st.markdown(\"### 📊 推荐结果\")\n"
                },
                {
                    "date": 1752478939099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,15 +236,52 @@\n     \n     return False\n \n # 左侧栏 - 用户信息输入\n+# 初始化session state\n+if 'dishes' not in st.session_state:\n+    st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]  # 改为浮点数\n+\n+if 'recommendations' not in st.session_state:\n+    st.session_state.recommendations = None\n+\n+if 'request_data' not in st.session_state:\n+    st.session_state.request_data = None\n+\n+if 'response_time' not in st.session_state:\n+    st.session_state.response_time = None\n+\n+# 添加菜品\n+def add_dish():\n+    st.session_state.dishes.append({\"name\": \"\", \"weight\": 100.0})  # 改为浮点数\n+\n+# 在左侧栏 - 用户信息输入部分\n with st.sidebar:\n     st.markdown(\"### 🧑 个人信息\")\n     with st.container():\n         st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n         st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n-        st.number_input(\"身高 (cm)\", min_value=50, max_value=250, key=\"height\", value=175)\n-        st.number_input(\"体重 (kg)\", min_value=10, max_value=200, key=\"weight\", value=65.5)\n+        \n+        # 修复身高输入\n+        st.number_input(\n+            \"身高 (cm)\", \n+            min_value=50.0, \n+            max_value=250.0, \n+            key=\"height\", \n+            value=175.0,\n+            step=1.0\n+        )\n+        \n+        # 修复体重输入\n+        st.number_input(\n+            \"体重 (kg)\", \n+            min_value=10.0, \n+            max_value=200.0, \n+            key=\"weight\", \n+            value=65.5,\n+            step=0.1\n+        )\n+        \n         st.selectbox(\n             \"活动水平\", \n             [\"轻活动水平(办公室工作，很少运动)\", \"中活动水平(每天适量运动)\", \"重活动水平(体力劳动或高强度训练)\"], \n             key=\"activity_level\",\n@@ -256,8 +293,40 @@\n             key=\"meal_type\",\n             index=1\n         )\n \n+# 在菜品输入部分\n+with col1:\n+    st.markdown(\"### 🍽️ 菜品信息\")\n+    with st.container():\n+        for i, dish in enumerate(st.session_state.dishes):\n+            with st.container():\n+                col_a, col_b = st.columns([3, 1])\n+                with col_a:\n+                    dish_name = st.text_input(\n+                        f\"菜品 #{i+1} 名称\", \n+                        value=dish[\"name\"],\n+                        key=f\"dish_name_{i}\",\n+                        placeholder=\"例如: 番茄炒蛋\"\n+                    )\n+                with col_b:\n+                    # 修复菜品重量输入\n+                    dish_weight = st.number_input(\n+                        \"重量 (g)\", \n+                        min_value=1.0, \n+                        value=dish[\"weight\"],\n+                        key=f\"dish_weight_{i}\",\n+                        step=1.0\n+                    )\n+                \n+                # 更新session state\n+                st.session_state.dishes[i][\"name\"] = dish_name\n+                st.session_state.dishes[i][\"weight\"] = dish_weight\n+                \n+                # 删除按钮\n+                if i > 0:\n+                    st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n+\n # 主内容区\n col1, col2 = st.columns([1, 1])\n \n with col1:\n"
                },
                {
                    "date": 1752478947167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,49 +328,10 @@\n \n # 主内容区\n col1, col2 = st.columns([1, 1])\n \n-with col1:\n-    # 菜品输入部分\n-    st.markdown(\"### 🍽️ 菜品信息\")\n-    with st.container():\n-        for i, dish in enumerate(st.session_state.dishes):\n-            with st.container():\n-                col_a, col_b = st.columns([3, 1])\n-                with col_a:\n-                    dish_name = st.text_input(\n-                        f\"菜品 #{i+1} 名称\", \n-                        value=dish[\"name\"],\n-                        key=f\"dish_name_{i}\",\n-                        placeholder=\"例如: 番茄炒蛋\"\n-                    )\n-                with col_b:\n-                    dish_weight = st.number_input(\n-                        \"重量 (g)\", \n-                        min_value=1, \n-                        value=dish[\"weight\"],\n-                        key=f\"dish_weight_{i}\"\n-                    )\n-                \n-                # 更新session state\n-                st.session_state.dishes[i][\"name\"] = dish_name\n-                st.session_state.dishes[i][\"weight\"] = dish_weight\n-                \n-                # 删除按钮（不是第一个菜品时显示）\n-                if i > 0:\n-                    st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n-        \n-        # 添加菜品按钮\n-        st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n-        \n-        # 提交按钮\n-        if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n-            if submit_form():\n-                if call_backend_service():\n-                    st.success(\"推荐结果已生成！\")\n-                else:\n-                    st.session_state.recommendations = None\n \n+\n with col2:\n     # 结果显示部分\n     st.markdown(\"### 📊 推荐结果\")\n     \n"
                },
                {
                    "date": 1752478952436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,13 +325,12 @@\n                 # 删除按钮\n                 if i > 0:\n                     st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n \n-# 主内容区\n-col1, col2 = st.columns([1, 1])\n \n \n \n+\n with col2:\n     # 结果显示部分\n     st.markdown(\"### 📊 推荐结果\")\n     \n"
                },
                {
                    "date": 1752478965891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -292,9 +292,10 @@\n             [\"早餐\", \"午餐\", \"晚餐\"], \n             key=\"meal_type\",\n             index=1\n         )\n-\n+# 主内容区\n+col1, col2 = st.columns([1, 1])\n # 在菜品输入部分\n with col1:\n     st.markdown(\"### 🍽️ 菜品信息\")\n     with st.container():\n"
                },
                {
                    "date": 1752478994831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,9 +293,9 @@\n             key=\"meal_type\",\n             index=1\n         )\n # 主内容区\n-col1, col2 = st.columns([1, 1])\n+# col1, col2 = st.columns([1, 1])\n # 在菜品输入部分\n with col1:\n     st.markdown(\"### 🍽️ 菜品信息\")\n     with st.container():\n"
                },
                {
                    "date": 1752479029848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,141 +7,35 @@\n from datetime import datetime\n \n # 设置页面配置\n st.set_page_config(\n-    page_title=\"FoodSky膳食推荐\",\n+    page_title=\"智能菜品推荐系统\",\n     page_icon=\"🍲\",\n     layout=\"wide\",\n     initial_sidebar_state=\"expanded\"\n )\n \n-# 自定义CSS样式\n+# 自定义CSS样式（保持不变）\n st.markdown(\"\"\"\n <style>\n-    .stApp {\n-        background-color: #f5f7fa;\n-    }\n-    .header {\n-        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);\n-        color: white;\n-        padding: 2rem;\n-        border-radius: 0 0 20px 20px;\n-        margin-bottom: 2rem;\n-    }\n-    .section {\n-        background: white;\n-        border-radius: 15px;\n-        padding: 1.5rem;\n-        box-shadow: 0 4px 10px rgba(0,0,0,0.05);\n-        margin-bottom: 1.5rem;\n-    }\n-    .dish-card {\n-        border: 1px solid #e0e6ed;\n-        border-radius: 10px;\n-        padding: 1rem;\n-        margin-bottom: 1rem;\n-        background: #f9fbfd;\n-    }\n-    .recommendation-card {\n-        border-radius: 10px;\n-        padding: 1rem;\n-        margin-bottom: 1rem;\n-        box-shadow: 0 2px 5px rgba(0,0,0,0.05);\n-    }\n-    .high-weight {\n-        background: #d4f7e2;\n-        border-left: 4px solid #2ecc71;\n-    }\n-    .medium-weight {\n-        background: #fef5e7;\n-        border-left: 4px solid #f39c12;\n-    }\n-    .low-weight {\n-        background: #fce8e6;\n-        border-left: 4px solid #e74c3c;\n-    }\n-    .submit-btn {\n-        width: 100%;\n-        padding: 0.75rem;\n-        border-radius: 8px;\n-        background: #3498db;\n-        color: white;\n-        font-weight: bold;\n-        border: none;\n-        cursor: pointer;\n-        transition: background 0.3s;\n-    }\n-    .submit-btn:hover {\n-        background: #2980b9;\n-    }\n-    .add-btn {\n-        background: #2ecc71;\n-        color: white;\n-        border: none;\n-        border-radius: 5px;\n-        padding: 0.5rem 1rem;\n-        cursor: pointer;\n-        transition: background 0.3s;\n-    }\n-    .add-btn:hover {\n-        background: #27ae60;\n-    }\n-    .remove-btn {\n-        background: #e74c3c;\n-        color: white;\n-        border: none;\n-        border-radius: 5px;\n-        padding: 0.25rem 0.75rem;\n-        cursor: pointer;\n-        margin-left: 0.5rem;\n-    }\n-    .spinner {\n-        display: inline-block;\n-        width: 20px;\n-        height: 20px;\n-        border: 3px solid rgba(0,0,0,0.1);\n-        border-radius: 50%;\n-        border-top-color: #3498db;\n-        animation: spin 1s linear infinite;\n-        margin-right: 10px;\n-    }\n-    @keyframes spin {\n-        0% { transform: rotate(0deg); }\n-        100% { transform: rotate(360deg); }\n-    }\n-    .nutrient-bar {\n-        height: 10px;\n-        border-radius: 5px;\n-        margin-top: 5px;\n-        background: #e0e0e0;\n-    }\n-    .nutrient-fill {\n-        height: 100%;\n-        border-radius: 5px;\n-        background: #3498db;\n-    }\n-    .nutrient-value {\n-        font-size: 0.9rem;\n-        margin-top: 3px;\n-        text-align: right;\n-    }\n+    /* 保留所有CSS样式 */\n </style>\n \"\"\", unsafe_allow_html=True)\n \n-# 应用标题\n+# 应用标题（保持不变）\n st.markdown(\"\"\"\n <div class=\"header\">\n-    <h1 style=\"text-align:center; margin:0;\">🍲FoodSky膳食推荐</h1>\n-    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于FoodSky，由中科深健研发的食品大模型膳食推荐</p>\n+    <h1 style=\"text-align:center; margin:0;\">🍲 智能菜品推荐系统</h1>\n+    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n </div>\n \"\"\", unsafe_allow_html=True)\n \n # 后端服务URL\n BACKEND_URL = \"http://192.168.99.55:5000/recommend_dishes\"\n \n # 初始化session state\n if 'dishes' not in st.session_state:\n-    st.session_state.dishes = [{\"name\": \"\", \"weight\": 100}]\n+    st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]\n \n if 'recommendations' not in st.session_state:\n     st.session_state.recommendations = None\n \n@@ -152,9 +46,9 @@\n     st.session_state.response_time = None\n \n # 添加菜品\n def add_dish():\n-    st.session_state.dishes.append({\"name\": \"\", \"weight\": 100})\n+    st.session_state.dishes.append({\"name\": \"\", \"weight\": 100.0})\n \n # 删除菜品\n def remove_dish(index):\n     if len(st.session_state.dishes) > 1:\n@@ -174,310 +68,5 @@\n             st.error(f\"菜品 #{i+1} 名称不能为空\")\n             return False\n         if dish[\"weight\"] <= 0:\n             st.error(f\"菜品 #{i+1} 重量必须大于0\")\n-            return False\n-    \n-    return True\n-\n-# 调用后端服务\n-def call_backend_service():\n-    # 准备请求数据\n-    st.session_state.request_data = {\n-        \"info\": {\n-            \"性别\": st.session_state.gender,\n-            \"年龄\": st.session_state.age,\n-            \"身高\": st.session_state.height,\n-            \"体重\": st.session_state.weight,\n-            \"activity_level\": st.session_state.activity_level\n-        },\n-        \"data\": {\n-            \"餐别\": st.session_state.meal_type,\n-            \"菜品名称\": [\n-                {\n-                    \"食品名称\": dish[\"name\"],\n-                    \"食品克数\": dish[\"weight\"]\n-                } for dish in st.session_state.dishes\n-            ]\n-        }\n-    }\n-    \n-    try:\n-        # 显示加载状态\n-        with st.spinner(\"正在分析您的营养需求，请稍候...\"):\n-            start_time = time.time()\n-            \n-            # 发送请求\n-            response = requests.post(\n-                BACKEND_URL,\n-                json=st.session_state.request_data,\n-                timeout=120  # 120秒超时\n-            )\n-            \n-            end_time = time.time()\n-            st.session_state.response_time = end_time - start_time\n-            \n-            # 检查响应状态\n-            if response.status_code == 200:\n-                data = response.json()\n-                if data.get(\"success\"):\n-                    st.session_state.recommendations = data[\"result\"]\n-                    return True\n-                else:\n-                    st.error(f\"服务返回错误: {data.get('error', '未知错误')}\")\n-            else:\n-                st.error(f\"请求失败, 状态码: {response.status_code}\")\n-                st.error(f\"错误信息: {response.text}\")\n-    except requests.exceptions.Timeout:\n-        st.error(\"请求超时，请稍后再试\")\n-    except requests.exceptions.ConnectionError:\n-        st.error(\"无法连接到后端服务，请检查网络连接\")\n-    except Exception as e:\n-        st.error(f\"发生未知错误: {str(e)}\")\n-    \n-    return False\n-\n-# 左侧栏 - 用户信息输入\n-# 初始化session state\n-if 'dishes' not in st.session_state:\n-    st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]  # 改为浮点数\n-\n-if 'recommendations' not in st.session_state:\n-    st.session_state.recommendations = None\n-\n-if 'request_data' not in st.session_state:\n-    st.session_state.request_data = None\n-\n-if 'response_time' not in st.session_state:\n-    st.session_state.response_time = None\n-\n-# 添加菜品\n-def add_dish():\n-    st.session_state.dishes.append({\"name\": \"\", \"weight\": 100.0})  # 改为浮点数\n-\n-# 在左侧栏 - 用户信息输入部分\n-with st.sidebar:\n-    st.markdown(\"### 🧑 个人信息\")\n-    with st.container():\n-        st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n-        st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n-        \n-        # 修复身高输入\n-        st.number_input(\n-            \"身高 (cm)\", \n-            min_value=50.0, \n-            max_value=250.0, \n-            key=\"height\", \n-            value=175.0,\n-            step=1.0\n-        )\n-        \n-        # 修复体重输入\n-        st.number_input(\n-            \"体重 (kg)\", \n-            min_value=10.0, \n-            max_value=200.0, \n-            key=\"weight\", \n-            value=65.5,\n-            step=0.1\n-        )\n-        \n-        st.selectbox(\n-            \"活动水平\", \n-            [\"轻活动水平(办公室工作，很少运动)\", \"中活动水平(每天适量运动)\", \"重活动水平(体力劳动或高强度训练)\"], \n-            key=\"activity_level\",\n-            index=1\n-        )\n-        st.selectbox(\n-            \"餐别\", \n-            [\"早餐\", \"午餐\", \"晚餐\"], \n-            key=\"meal_type\",\n-            index=1\n-        )\n-# 主内容区\n-# col1, col2 = st.columns([1, 1])\n-# 在菜品输入部分\n-with col1:\n-    st.markdown(\"### 🍽️ 菜品信息\")\n-    with st.container():\n-        for i, dish in enumerate(st.session_state.dishes):\n-            with st.container():\n-                col_a, col_b = st.columns([3, 1])\n-                with col_a:\n-                    dish_name = st.text_input(\n-                        f\"菜品 #{i+1} 名称\", \n-                        value=dish[\"name\"],\n-                        key=f\"dish_name_{i}\",\n-                        placeholder=\"例如: 番茄炒蛋\"\n-                    )\n-                with col_b:\n-                    # 修复菜品重量输入\n-                    dish_weight = st.number_input(\n-                        \"重量 (g)\", \n-                        min_value=1.0, \n-                        value=dish[\"weight\"],\n-                        key=f\"dish_weight_{i}\",\n-                        step=1.0\n-                    )\n-                \n-                # 更新session state\n-                st.session_state.dishes[i][\"name\"] = dish_name\n-                st.session_state.dishes[i][\"weight\"] = dish_weight\n-                \n-                # 删除按钮\n-                if i > 0:\n-                    st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n-\n-\n-\n-\n-\n-with col2:\n-    # 结果显示部分\n-    st.markdown(\"### 📊 推荐结果\")\n-    \n-    if st.session_state.recommendations:\n-        recommendations = st.session_state.recommendations\n-        \n-        # 显示请求信息\n-        st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n-        \n-        # 显示餐别和求解状态\n-        st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n-        st.markdown(f\"**求解状态**: {recommendations.get('求解状态', '未知')}\")\n-        \n-        # 显示菜品推荐\n-        st.markdown(\"### 菜品推荐\")\n-        \n-        # 创建选项卡\n-        tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n-        \n-        with tab1:\n-            for dish in recommendations.get(\"菜品推荐\", []):\n-                weight = dish.get(\"推荐权重\", 0)\n-                \n-                # 根据权重设置样式\n-                if weight >= 0.7:\n-                    card_class = \"high-weight\"\n-                    recommendation_text = \"强烈推荐\"\n-                elif weight >= 0.5:\n-                    card_class = \"medium-weight\"\n-                    recommendation_text = \"推荐\"\n-                elif weight >= 0.3:\n-                    card_class = \"medium-weight\"\n-                    recommendation_text = \"适量食用\"\n-                else:\n-                    card_class = \"low-weight\"\n-                    recommendation_text = \"少量尝试\"\n-                \n-                with st.container():\n-                    st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n-                    \n-                    # 菜品名称和权重\n-                    col1, col2 = st.columns([3, 1])\n-                    with col1:\n-                        st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n-                    with col2:\n-                        st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n-                    \n-                    # 推荐原因\n-                    st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n-                    \n-                    # 营养值摘要\n-                    with st.expander(\"查看营养详情\"):\n-                        nutrition = dish.get(\"营养值\", {})\n-                        if nutrition:\n-                            col1, col2, col3 = st.columns(3)\n-                            with col1:\n-                                st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n-                                st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n-                            with col2:\n-                                st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n-                                st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n-                            with col3:\n-                                st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n-                                st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n-                        else:\n-                            st.warning(\"无营养数据\")\n-                    \n-                    st.markdown(\"</div>\", unsafe_allow_html=True)\n-        \n-        with tab2:\n-            # 整餐营养摘要\n-            total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n-            if total_nutrition:\n-                st.markdown(\"### 整餐营养摘要\")\n-                \n-                # 创建营养指标卡片\n-                col1, col2, col3 = st.columns(3)\n-                with col1:\n-                    st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n-                    st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n-                with col2:\n-                    st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n-                    st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n-                with col3:\n-                    st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n-                    st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n-                \n-                # 营养分布图表\n-                st.markdown(\"### 营养分布\")\n-                \n-                # 主要营养素\n-                main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n-                main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n-                \n-                # 创建DataFrame\n-                df = pd.DataFrame({\n-                    \"营养素\": main_nutrients,\n-                    \"含量\": main_values\n-                })\n-                \n-                # 显示柱状图\n-                st.bar_chart(df.set_index(\"营养素\"))\n-                \n-                # 微量营养素\n-                micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n-                micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n-                \n-                # 显示微量营养素\n-                st.markdown(\"### 微量营养素\")\n-                for nutrient, value in zip(micro_nutrients, micro_values):\n-                    st.markdown(f\"**{nutrient}**: {value:.1f}\")\n-                    # 添加简单的进度条\n-                    max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n-                    percent = min(value / max_value, 1.0) if max_value > 0 else 0\n-                    st.markdown(f\"\"\"\n-                    <div class=\"nutrient-bar\">\n-                        <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n-                    </div>\n-                    <div class=\"nutrient-value\">{value:.1f}</div>\n-                    \"\"\", unsafe_allow_html=True)\n-            else:\n-                st.warning(\"无整餐营养摘要数据\")\n-    else:\n-        st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n-\n-# 添加一些说明\n-st.markdown(\"---\")\n-st.markdown(\"\"\"\n-### 使用说明\n-1. 在左侧填写您的个人信息（性别、年龄、身高、体重等）\n-2. 添加您想评估的菜品（至少一个）\n-3. 点击\"生成菜品推荐\"按钮获取个性化推荐\n-4. 查看右侧的推荐结果，了解每道菜的推荐程度和原因\n-\n-**推荐权重说明**:\n-- **强烈推荐 (权重 ≥ 0.7)**: 营养均衡且符合需求\n-- **推荐 (0.5 ≤ 权重 < 0.7)**: 营养良好，适合食用\n-- **适量食用 (0.3 ≤ 权重 < 0.5)**: 可以少量食用\n-- **少量尝试 (权重 < 0.3)**: 建议本餐避免或少量尝试\n-\"\"\")\n-\n-# 调试信息（可选）\n-if st.checkbox(\"显示调试信息\"):\n-    st.markdown(\"### 请求数据\")\n-    st.json(st.session_state.request_data)\n-    \n-    if st.session_state.recommendations:\n-        st.markdown(\"### 完整响应\")\n-        st.json(st.session_state.recommendations)\n\\ No newline at end of file\n+            retu\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752479039255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,35 +7,141 @@\n from datetime import datetime\n \n # 设置页面配置\n st.set_page_config(\n-    page_title=\"智能菜品推荐系统\",\n+    page_title=\"FoodSky膳食推荐\",\n     page_icon=\"🍲\",\n     layout=\"wide\",\n     initial_sidebar_state=\"expanded\"\n )\n \n-# 自定义CSS样式（保持不变）\n+# 自定义CSS样式\n st.markdown(\"\"\"\n <style>\n-    /* 保留所有CSS样式 */\n+    .stApp {\n+        background-color: #f5f7fa;\n+    }\n+    .header {\n+        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);\n+        color: white;\n+        padding: 2rem;\n+        border-radius: 0 0 20px 20px;\n+        margin-bottom: 2rem;\n+    }\n+    .section {\n+        background: white;\n+        border-radius: 15px;\n+        padding: 1.5rem;\n+        box-shadow: 0 4px 10px rgba(0,0,0,0.05);\n+        margin-bottom: 1.5rem;\n+    }\n+    .dish-card {\n+        border: 1px solid #e0e6ed;\n+        border-radius: 10px;\n+        padding: 1rem;\n+        margin-bottom: 1rem;\n+        background: #f9fbfd;\n+    }\n+    .recommendation-card {\n+        border-radius: 10px;\n+        padding: 1rem;\n+        margin-bottom: 1rem;\n+        box-shadow: 0 2px 5px rgba(0,0,0,0.05);\n+    }\n+    .high-weight {\n+        background: #d4f7e2;\n+        border-left: 4px solid #2ecc71;\n+    }\n+    .medium-weight {\n+        background: #fef5e7;\n+        border-left: 4px solid #f39c12;\n+    }\n+    .low-weight {\n+        background: #fce8e6;\n+        border-left: 4px solid #e74c3c;\n+    }\n+    .submit-btn {\n+        width: 100%;\n+        padding: 0.75rem;\n+        border-radius: 8px;\n+        background: #3498db;\n+        color: white;\n+        font-weight: bold;\n+        border: none;\n+        cursor: pointer;\n+        transition: background 0.3s;\n+    }\n+    .submit-btn:hover {\n+        background: #2980b9;\n+    }\n+    .add-btn {\n+        background: #2ecc71;\n+        color: white;\n+        border: none;\n+        border-radius: 5px;\n+        padding: 0.5rem 1rem;\n+        cursor: pointer;\n+        transition: background 0.3s;\n+    }\n+    .add-btn:hover {\n+        background: #27ae60;\n+    }\n+    .remove-btn {\n+        background: #e74c3c;\n+        color: white;\n+        border: none;\n+        border-radius: 5px;\n+        padding: 0.25rem 0.75rem;\n+        cursor: pointer;\n+        margin-left: 0.5rem;\n+    }\n+    .spinner {\n+        display: inline-block;\n+        width: 20px;\n+        height: 20px;\n+        border: 3px solid rgba(0,0,0,0.1);\n+        border-radius: 50%;\n+        border-top-color: #3498db;\n+        animation: spin 1s linear infinite;\n+        margin-right: 10px;\n+    }\n+    @keyframes spin {\n+        0% { transform: rotate(0deg); }\n+        100% { transform: rotate(360deg); }\n+    }\n+    .nutrient-bar {\n+        height: 10px;\n+        border-radius: 5px;\n+        margin-top: 5px;\n+        background: #e0e0e0;\n+    }\n+    .nutrient-fill {\n+        height: 100%;\n+        border-radius: 5px;\n+        background: #3498db;\n+    }\n+    .nutrient-value {\n+        font-size: 0.9rem;\n+        margin-top: 3px;\n+        text-align: right;\n+    }\n </style>\n \"\"\", unsafe_allow_html=True)\n \n-# 应用标题（保持不变）\n+# 应用标题\n st.markdown(\"\"\"\n <div class=\"header\">\n-    <h1 style=\"text-align:center; margin:0;\">🍲 智能菜品推荐系统</h1>\n-    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n+    <h1 style=\"text-align:center; margin:0;\">🍲FoodSky膳食推荐</h1>\n+    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于FoodSky，由中科深健研发的食品大模型膳食推荐</p>\n </div>\n \"\"\", unsafe_allow_html=True)\n \n # 后端服务URL\n BACKEND_URL = \"http://192.168.99.55:5000/recommend_dishes\"\n \n # 初始化session state\n if 'dishes' not in st.session_state:\n-    st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]\n+    st.session_state.dishes = [{\"name\": \"\", \"weight\": 100}]\n \n if 'recommendations' not in st.session_state:\n     st.session_state.recommendations = None\n \n@@ -46,9 +152,9 @@\n     st.session_state.response_time = None\n \n # 添加菜品\n def add_dish():\n-    st.session_state.dishes.append({\"name\": \"\", \"weight\": 100.0})\n+    st.session_state.dishes.append({\"name\": \"\", \"weight\": 100})\n \n # 删除菜品\n def remove_dish(index):\n     if len(st.session_state.dishes) > 1:\n@@ -68,5 +174,310 @@\n             st.error(f\"菜品 #{i+1} 名称不能为空\")\n             return False\n         if dish[\"weight\"] <= 0:\n             st.error(f\"菜品 #{i+1} 重量必须大于0\")\n-            retu\n\\ No newline at end of file\n+            return False\n+    \n+    return True\n+\n+# 调用后端服务\n+def call_backend_service():\n+    # 准备请求数据\n+    st.session_state.request_data = {\n+        \"info\": {\n+            \"性别\": st.session_state.gender,\n+            \"年龄\": st.session_state.age,\n+            \"身高\": st.session_state.height,\n+            \"体重\": st.session_state.weight,\n+            \"activity_level\": st.session_state.activity_level\n+        },\n+        \"data\": {\n+            \"餐别\": st.session_state.meal_type,\n+            \"菜品名称\": [\n+                {\n+                    \"食品名称\": dish[\"name\"],\n+                    \"食品克数\": dish[\"weight\"]\n+                } for dish in st.session_state.dishes\n+            ]\n+        }\n+    }\n+    \n+    try:\n+        # 显示加载状态\n+        with st.spinner(\"正在分析您的营养需求，请稍候...\"):\n+            start_time = time.time()\n+            \n+            # 发送请求\n+            response = requests.post(\n+                BACKEND_URL,\n+                json=st.session_state.request_data,\n+                timeout=120  # 120秒超时\n+            )\n+            \n+            end_time = time.time()\n+            st.session_state.response_time = end_time - start_time\n+            \n+            # 检查响应状态\n+            if response.status_code == 200:\n+                data = response.json()\n+                if data.get(\"success\"):\n+                    st.session_state.recommendations = data[\"result\"]\n+                    return True\n+                else:\n+                    st.error(f\"服务返回错误: {data.get('error', '未知错误')}\")\n+            else:\n+                st.error(f\"请求失败, 状态码: {response.status_code}\")\n+                st.error(f\"错误信息: {response.text}\")\n+    except requests.exceptions.Timeout:\n+        st.error(\"请求超时，请稍后再试\")\n+    except requests.exceptions.ConnectionError:\n+        st.error(\"无法连接到后端服务，请检查网络连接\")\n+    except Exception as e:\n+        st.error(f\"发生未知错误: {str(e)}\")\n+    \n+    return False\n+\n+# 左侧栏 - 用户信息输入\n+# 初始化session state\n+if 'dishes' not in st.session_state:\n+    st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]  # 改为浮点数\n+\n+if 'recommendations' not in st.session_state:\n+    st.session_state.recommendations = None\n+\n+if 'request_data' not in st.session_state:\n+    st.session_state.request_data = None\n+\n+if 'response_time' not in st.session_state:\n+    st.session_state.response_time = None\n+\n+# 添加菜品\n+def add_dish():\n+    st.session_state.dishes.append({\"name\": \"\", \"weight\": 100.0})  # 改为浮点数\n+\n+# 在左侧栏 - 用户信息输入部分\n+with st.sidebar:\n+    st.markdown(\"### 🧑 个人信息\")\n+    with st.container():\n+        st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n+        st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n+        \n+        # 修复身高输入\n+        st.number_input(\n+            \"身高 (cm)\", \n+            min_value=50.0, \n+            max_value=250.0, \n+            key=\"height\", \n+            value=175.0,\n+            step=1.0\n+        )\n+        \n+        # 修复体重输入\n+        st.number_input(\n+            \"体重 (kg)\", \n+            min_value=10.0, \n+            max_value=200.0, \n+            key=\"weight\", \n+            value=65.5,\n+            step=0.1\n+        )\n+        \n+        st.selectbox(\n+            \"活动水平\", \n+            [\"轻活动水平(办公室工作，很少运动)\", \"中活动水平(每天适量运动)\", \"重活动水平(体力劳动或高强度训练)\"], \n+            key=\"activity_level\",\n+            index=1\n+        )\n+        st.selectbox(\n+            \"餐别\", \n+            [\"早餐\", \"午餐\", \"晚餐\"], \n+            key=\"meal_type\",\n+            index=1\n+        )\n+# 主内容区\n+# col1, col2 = st.columns([1, 1])\n+# 在菜品输入部分\n+with col1:\n+    st.markdown(\"### 🍽️ 菜品信息\")\n+    with st.container():\n+        for i, dish in enumerate(st.session_state.dishes):\n+            with st.container():\n+                col_a, col_b = st.columns([3, 1])\n+                with col_a:\n+                    dish_name = st.text_input(\n+                        f\"菜品 #{i+1} 名称\", \n+                        value=dish[\"name\"],\n+                        key=f\"dish_name_{i}\",\n+                        placeholder=\"例如: 番茄炒蛋\"\n+                    )\n+                with col_b:\n+                    # 修复菜品重量输入\n+                    dish_weight = st.number_input(\n+                        \"重量 (g)\", \n+                        min_value=1.0, \n+                        value=dish[\"weight\"],\n+                        key=f\"dish_weight_{i}\",\n+                        step=1.0\n+                    )\n+                \n+                # 更新session state\n+                st.session_state.dishes[i][\"name\"] = dish_name\n+                st.session_state.dishes[i][\"weight\"] = dish_weight\n+                \n+                # 删除按钮\n+                if i > 0:\n+                    st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n+\n+\n+\n+\n+\n+with col2:\n+    # 结果显示部分\n+    st.markdown(\"### 📊 推荐结果\")\n+    \n+    if st.session_state.recommendations:\n+        recommendations = st.session_state.recommendations\n+        \n+        # 显示请求信息\n+        st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n+        \n+        # 显示餐别和求解状态\n+        st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n+        st.markdown(f\"**求解状态**: {recommendations.get('求解状态', '未知')}\")\n+        \n+        # 显示菜品推荐\n+        st.markdown(\"### 菜品推荐\")\n+        \n+        # 创建选项卡\n+        tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n+        \n+        with tab1:\n+            for dish in recommendations.get(\"菜品推荐\", []):\n+                weight = dish.get(\"推荐权重\", 0)\n+                \n+                # 根据权重设置样式\n+                if weight >= 0.7:\n+                    card_class = \"high-weight\"\n+                    recommendation_text = \"强烈推荐\"\n+                elif weight >= 0.5:\n+                    card_class = \"medium-weight\"\n+                    recommendation_text = \"推荐\"\n+                elif weight >= 0.3:\n+                    card_class = \"medium-weight\"\n+                    recommendation_text = \"适量食用\"\n+                else:\n+                    card_class = \"low-weight\"\n+                    recommendation_text = \"少量尝试\"\n+                \n+                with st.container():\n+                    st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n+                    \n+                    # 菜品名称和权重\n+                    col1, col2 = st.columns([3, 1])\n+                    with col1:\n+                        st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n+                    with col2:\n+                        st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n+                    \n+                    # 推荐原因\n+                    st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n+                    \n+                    # 营养值摘要\n+                    with st.expander(\"查看营养详情\"):\n+                        nutrition = dish.get(\"营养值\", {})\n+                        if nutrition:\n+                            col1, col2, col3 = st.columns(3)\n+                            with col1:\n+                                st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n+                                st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n+                            with col2:\n+                                st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n+                                st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n+                            with col3:\n+                                st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n+                                st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n+                        else:\n+                            st.warning(\"无营养数据\")\n+                    \n+                    st.markdown(\"</div>\", unsafe_allow_html=True)\n+        \n+        with tab2:\n+            # 整餐营养摘要\n+            total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n+            if total_nutrition:\n+                st.markdown(\"### 整餐营养摘要\")\n+                \n+                # 创建营养指标卡片\n+                col1, col2, col3 = st.columns(3)\n+                with col1:\n+                    st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n+                    st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n+                with col2:\n+                    st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n+                    st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n+                with col3:\n+                    st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n+                    st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n+                \n+                # 营养分布图表\n+                st.markdown(\"### 营养分布\")\n+                \n+                # 主要营养素\n+                main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n+                main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n+                \n+                # 创建DataFrame\n+                df = pd.DataFrame({\n+                    \"营养素\": main_nutrients,\n+                    \"含量\": main_values\n+                })\n+                \n+                # 显示柱状图\n+                st.bar_chart(df.set_index(\"营养素\"))\n+                \n+                # 微量营养素\n+                micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n+                micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n+                \n+                # 显示微量营养素\n+                st.markdown(\"### 微量营养素\")\n+                for nutrient, value in zip(micro_nutrients, micro_values):\n+                    st.markdown(f\"**{nutrient}**: {value:.1f}\")\n+                    # 添加简单的进度条\n+                    max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n+                    percent = min(value / max_value, 1.0) if max_value > 0 else 0\n+                    st.markdown(f\"\"\"\n+                    <div class=\"nutrient-bar\">\n+                        <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n+                    </div>\n+                    <div class=\"nutrient-value\">{value:.1f}</div>\n+                    \"\"\", unsafe_allow_html=True)\n+            else:\n+                st.warning(\"无整餐营养摘要数据\")\n+    else:\n+        st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n+\n+# 添加一些说明\n+st.markdown(\"---\")\n+st.markdown(\"\"\"\n+### 使用说明\n+1. 在左侧填写您的个人信息（性别、年龄、身高、体重等）\n+2. 添加您想评估的菜品（至少一个）\n+3. 点击\"生成菜品推荐\"按钮获取个性化推荐\n+4. 查看右侧的推荐结果，了解每道菜的推荐程度和原因\n+\n+**推荐权重说明**:\n+- **强烈推荐 (权重 ≥ 0.7)**: 营养均衡且符合需求\n+- **推荐 (0.5 ≤ 权重 < 0.7)**: 营养良好，适合食用\n+- **适量食用 (0.3 ≤ 权重 < 0.5)**: 可以少量食用\n+- **少量尝试 (权重 < 0.3)**: 建议本餐避免或少量尝试\n+\"\"\")\n+\n+# 调试信息（可选）\n+if st.checkbox(\"显示调试信息\"):\n+    st.markdown(\"### 请求数据\")\n+    st.json(st.session_state.request_data)\n+    \n+    if st.session_state.recommendations:\n+        st.markdown(\"### 完整响应\")\n+        st.json(st.session_state.recommendations)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752479110611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n BACKEND_URL = \"http://192.168.99.55:5000/recommend_dishes\"\n \n # 初始化session state\n if 'dishes' not in st.session_state:\n-    st.session_state.dishes = [{\"name\": \"\", \"weight\": 100}]\n+    st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]\n \n if 'recommendations' not in st.session_state:\n     st.session_state.recommendations = None\n \n@@ -152,9 +152,9 @@\n     st.session_state.response_time = None\n \n # 添加菜品\n def add_dish():\n-    st.session_state.dishes.append({\"name\": \"\", \"weight\": 100})\n+    st.session_state.dishes.append({\"name\": \"\", \"weight\": 100.0})\n \n # 删除菜品\n def remove_dish(index):\n     if len(st.session_state.dishes) > 1:\n@@ -236,52 +236,29 @@\n     \n     return False\n \n # 左侧栏 - 用户信息输入\n-# 初始化session state\n-if 'dishes' not in st.session_state:\n-    st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]  # 改为浮点数\n-\n-if 'recommendations' not in st.session_state:\n-    st.session_state.recommendations = None\n-\n-if 'request_data' not in st.session_state:\n-    st.session_state.request_data = None\n-\n-if 'response_time' not in st.session_state:\n-    st.session_state.response_time = None\n-\n-# 添加菜品\n-def add_dish():\n-    st.session_state.dishes.append({\"name\": \"\", \"weight\": 100.0})  # 改为浮点数\n-\n-# 在左侧栏 - 用户信息输入部分\n with st.sidebar:\n     st.markdown(\"### 🧑 个人信息\")\n     with st.container():\n         st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n         st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n-        \n-        # 修复身高输入\n         st.number_input(\n             \"身高 (cm)\", \n             min_value=50.0, \n             max_value=250.0, \n             key=\"height\", \n             value=175.0,\n             step=1.0\n         )\n-        \n-        # 修复体重输入\n         st.number_input(\n             \"体重 (kg)\", \n             min_value=10.0, \n             max_value=200.0, \n             key=\"weight\", \n             value=65.5,\n             step=0.1\n         )\n-        \n         st.selectbox(\n             \"活动水平\", \n             [\"轻活动水平(办公室工作，很少运动)\", \"中活动水平(每天适量运动)\", \"重活动水平(体力劳动或高强度训练)\"], \n             key=\"activity_level\",\n@@ -292,26 +269,30 @@\n             [\"早餐\", \"午餐\", \"晚餐\"], \n             key=\"meal_type\",\n             index=1\n         )\n+\n # 主内容区\n-# col1, col2 = st.columns([1, 1])\n-# 在菜品输入部分\n+col1, col2 = st.columns([1, 1])  # 使用整数作为列宽参数\n+\n with col1:\n+    # 菜品输入部分\n     st.markdown(\"### 🍽️ 菜品信息\")\n     with st.container():\n         for i, dish in enumerate(st.session_state.dishes):\n             with st.container():\n-                col_a, col_b = st.columns([3, 1])\n+                # 修复列宽参数 - 使用整数\n+                col_a, col_b = st.columns([3, 1])  # 3和1都是整数\n+                \n                 with col_a:\n                     dish_name = st.text_input(\n                         f\"菜品 #{i+1} 名称\", \n                         value=dish[\"name\"],\n                         key=f\"dish_name_{i}\",\n                         placeholder=\"例如: 番茄炒蛋\"\n                     )\n+                \n                 with col_b:\n-                    # 修复菜品重量输入\n                     dish_weight = st.number_input(\n                         \"重量 (g)\", \n                         min_value=1.0, \n                         value=dish[\"weight\"],\n@@ -322,16 +303,23 @@\n                 # 更新session state\n                 st.session_state.dishes[i][\"name\"] = dish_name\n                 st.session_state.dishes[i][\"weight\"] = dish_weight\n                 \n-                # 删除按钮\n+                # 删除按钮（不是第一个菜品时显示）\n                 if i > 0:\n                     st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n+        \n+        # 添加菜品按钮\n+        st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n+        \n+        # 提交按钮\n+        if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n+            if submit_form():\n+                if call_backend_service():\n+                    st.success(\"推荐结果已生成！\")\n+                else:\n+                    st.session_state.recommendations = None\n \n-\n-\n-\n-\n with col2:\n     # 结果显示部分\n     st.markdown(\"### 📊 推荐结果\")\n     \n"
                },
                {
                    "date": 1752479184697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n             index=1\n         )\n \n # 主内容区\n-col1, col2 = st.columns([1, 1])  # 使用整数作为列宽参数\n+col1, col2 = st.columns(2)\n \n with col1:\n     # 菜品输入部分\n     st.markdown(\"### 🍽️ 菜品信息\")\n"
                },
                {
                    "date": 1752479227731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n             index=1\n         )\n \n # 主内容区\n-col1, col2 = st.columns(2)\n+col1, col2 = st.columns([1, 1])  # 使用整数作为列宽参数\n \n with col1:\n     # 菜品输入部分\n     st.markdown(\"### 🍽️ 菜品信息\")\n"
                },
                {
                    "date": 1752479317633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,9 +279,9 @@\n     st.markdown(\"### 🍽️ 菜品信息\")\n     with st.container():\n         for i, dish in enumerate(st.session_state.dishes):\n             with st.container():\n-                # 修复列宽参数 - 使用整数\n+                with st.container():\n                 col_a, col_b = st.columns([3, 1])  # 3和1都是整数\n                 \n                 with col_a:\n                     dish_name = st.text_input(\n"
                },
                {
                    "date": 1752479333434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,9 +280,9 @@\n     with st.container():\n         for i, dish in enumerate(st.session_state.dishes):\n             with st.container():\n                 with st.container():\n-                col_a, col_b = st.columns([3, 1])  # 3和1都是整数\n+                    col_a, col_b = st.columns([3, 1])  # 3和1都是整数\n                 \n                 with col_a:\n                     dish_name = st.text_input(\n                         f\"菜品 #{i+1} 名称\", \n"
                },
                {
                    "date": 1752479570319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,132 +7,26 @@\n from datetime import datetime\n \n # 设置页面配置\n st.set_page_config(\n-    page_title=\"FoodSky膳食推荐\",\n+    page_title=\"智能菜品推荐系统\",\n     page_icon=\"🍲\",\n     layout=\"wide\",\n     initial_sidebar_state=\"expanded\"\n )\n \n # 自定义CSS样式\n st.markdown(\"\"\"\n <style>\n-    .stApp {\n-        background-color: #f5f7fa;\n-    }\n-    .header {\n-        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);\n-        color: white;\n-        padding: 2rem;\n-        border-radius: 0 0 20px 20px;\n-        margin-bottom: 2rem;\n-    }\n-    .section {\n-        background: white;\n-        border-radius: 15px;\n-        padding: 1.5rem;\n-        box-shadow: 0 4px 10px rgba(0,0,0,0.05);\n-        margin-bottom: 1.5rem;\n-    }\n-    .dish-card {\n-        border: 1px solid #e0e6ed;\n-        border-radius: 10px;\n-        padding: 1rem;\n-        margin-bottom: 1rem;\n-        background: #f9fbfd;\n-    }\n-    .recommendation-card {\n-        border-radius: 10px;\n-        padding: 1rem;\n-        margin-bottom: 1rem;\n-        box-shadow: 0 2px 5px rgba(0,0,0,0.05);\n-    }\n-    .high-weight {\n-        background: #d4f7e2;\n-        border-left: 4px solid #2ecc71;\n-    }\n-    .medium-weight {\n-        background: #fef5e7;\n-        border-left: 4px solid #f39c12;\n-    }\n-    .low-weight {\n-        background: #fce8e6;\n-        border-left: 4px solid #e74c3c;\n-    }\n-    .submit-btn {\n-        width: 100%;\n-        padding: 0.75rem;\n-        border-radius: 8px;\n-        background: #3498db;\n-        color: white;\n-        font-weight: bold;\n-        border: none;\n-        cursor: pointer;\n-        transition: background 0.3s;\n-    }\n-    .submit-btn:hover {\n-        background: #2980b9;\n-    }\n-    .add-btn {\n-        background: #2ecc71;\n-        color: white;\n-        border: none;\n-        border-radius: 5px;\n-        padding: 0.5rem 1rem;\n-        cursor: pointer;\n-        transition: background 0.3s;\n-    }\n-    .add-btn:hover {\n-        background: #27ae60;\n-    }\n-    .remove-btn {\n-        background: #e74c3c;\n-        color: white;\n-        border: none;\n-        border-radius: 5px;\n-        padding: 0.25rem 0.75rem;\n-        cursor: pointer;\n-        margin-left: 0.5rem;\n-    }\n-    .spinner {\n-        display: inline-block;\n-        width: 20px;\n-        height: 20px;\n-        border: 3px solid rgba(0,0,0,0.1);\n-        border-radius: 50%;\n-        border-top-color: #3498db;\n-        animation: spin 1s linear infinite;\n-        margin-right: 10px;\n-    }\n-    @keyframes spin {\n-        0% { transform: rotate(0deg); }\n-        100% { transform: rotate(360deg); }\n-    }\n-    .nutrient-bar {\n-        height: 10px;\n-        border-radius: 5px;\n-        margin-top: 5px;\n-        background: #e0e0e0;\n-    }\n-    .nutrient-fill {\n-        height: 100%;\n-        border-radius: 5px;\n-        background: #3498db;\n-    }\n-    .nutrient-value {\n-        font-size: 0.9rem;\n-        margin-top: 3px;\n-        text-align: right;\n-    }\n+    /* 保留所有CSS样式 */\n </style>\n \"\"\", unsafe_allow_html=True)\n \n # 应用标题\n st.markdown(\"\"\"\n <div class=\"header\">\n-    <h1 style=\"text-align:center; margin:0;\">🍲FoodSky膳食推荐</h1>\n-    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于FoodSky，由中科深健研发的食品大模型膳食推荐</p>\n+    <h1 style=\"text-align:center; margin:0;\">🍲 智能菜品推荐系统</h1>\n+    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n </div>\n \"\"\", unsafe_allow_html=True)\n \n # 后端服务URL\n@@ -270,44 +164,41 @@\n             key=\"meal_type\",\n             index=1\n         )\n \n-# 主内容区\n-col1, col2 = st.columns([1, 1])  # 使用整数作为列宽参数\n+# 主内容区 - 使用容器而不是嵌套列\n+main_container = st.container()\n \n-with col1:\n-    # 菜品输入部分\n-    st.markdown(\"### 🍽️ 菜品信息\")\n-    with st.container():\n-        for i, dish in enumerate(st.session_state.dishes):\n-            with st.container():\n+with main_container:\n+    col1, col2 = st.columns([1, 1])\n+    \n+    with col1:\n+        st.markdown(\"### 🍽️ 菜品信息\")\n+        dish_container = st.container()\n+        \n+        with dish_container:\n+            for i, dish in enumerate(st.session_state.dishes):\n+                # 使用容器而不是嵌套列\n                 with st.container():\n-                    col_a, col_b = st.columns([3, 1])  # 3和1都是整数\n-                \n-                with col_a:\n-                    dish_name = st.text_input(\n-                        f\"菜品 #{i+1} 名称\", \n-                        value=dish[\"name\"],\n-                        key=f\"dish_name_{i}\",\n-                        placeholder=\"例如: 番茄炒蛋\"\n-                    )\n-                \n-                with col_b:\n-                    dish_weight = st.number_input(\n-                        \"重量 (g)\", \n-                        min_value=1.0, \n-                        value=dish[\"weight\"],\n-                        key=f\"dish_weight_{i}\",\n-                        step=1.0\n-                    )\n-                \n-                # 更新session state\n-                st.session_state.dishes[i][\"name\"] = dish_name\n-                st.session_state.dishes[i][\"weight\"] = dish_weight\n-                \n-                # 删除按钮（不是第一个菜品时显示）\n-                if i > 0:\n-                    st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n+                    # 使用HTML/CSS创建类似列的效果\n+                    st.markdown(f\"\"\"\n+                    <div style=\"display: flex; margin-bottom: 15px;\">\n+                        <div style=\"flex: 3; margin-right: 10px;\">\n+                            {st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")._repr_html_()}\n+                        </div>\n+                        <div style=\"flex: 1;\">\n+                            {st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)._repr_html_()}\n+                        </div>\n+                    </div>\n+                    \"\"\", unsafe_allow_html=True)\n+                    \n+                    # 更新session state\n+                    st.session_state.dishes[i][\"name\"] = dish[\"name\"]\n+                    st.session_state.dishes[i][\"weight\"] = dish[\"weight\"]\n+                    \n+                    # 删除按钮（不是第一个菜品时显示）\n+                    if i > 0:\n+                        st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n         \n         # 添加菜品按钮\n         st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n         \n@@ -317,134 +208,133 @@\n                 if call_backend_service():\n                     st.success(\"推荐结果已生成！\")\n                 else:\n                     st.session_state.recommendations = None\n-\n-with col2:\n-    # 结果显示部分\n-    st.markdown(\"### 📊 推荐结果\")\n     \n-    if st.session_state.recommendations:\n-        recommendations = st.session_state.recommendations\n+    with col2:\n+        st.markdown(\"### 📊 推荐结果\")\n         \n-        # 显示请求信息\n-        st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n-        \n-        # 显示餐别和求解状态\n-        st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n-        st.markdown(f\"**求解状态**: {recommendations.get('求解状态', '未知')}\")\n-        \n-        # 显示菜品推荐\n-        st.markdown(\"### 菜品推荐\")\n-        \n-        # 创建选项卡\n-        tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n-        \n-        with tab1:\n-            for dish in recommendations.get(\"菜品推荐\", []):\n-                weight = dish.get(\"推荐权重\", 0)\n-                \n-                # 根据权重设置样式\n-                if weight >= 0.7:\n-                    card_class = \"high-weight\"\n-                    recommendation_text = \"强烈推荐\"\n-                elif weight >= 0.5:\n-                    card_class = \"medium-weight\"\n-                    recommendation_text = \"推荐\"\n-                elif weight >= 0.3:\n-                    card_class = \"medium-weight\"\n-                    recommendation_text = \"适量食用\"\n-                else:\n-                    card_class = \"low-weight\"\n-                    recommendation_text = \"少量尝试\"\n-                \n-                with st.container():\n-                    st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n+        if st.session_state.recommendations:\n+            recommendations = st.session_state.recommendations\n+            \n+            # 显示请求信息\n+            st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n+            \n+            # 显示餐别和求解状态\n+            st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n+            st.markdown(f\"**求解状态**: {recommendations.get('求解状态', '未知')}\")\n+            \n+            # 显示菜品推荐\n+            st.markdown(\"### 菜品推荐\")\n+            \n+            # 创建选项卡\n+            tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n+            \n+            with tab1:\n+                for dish in recommendations.get(\"菜品推荐\", []):\n+                    weight = dish.get(\"推荐权重\", 0)\n                     \n-                    # 菜品名称和权重\n-                    col1, col2 = st.columns([3, 1])\n+                    # 根据权重设置样式\n+                    if weight >= 0.7:\n+                        card_class = \"high-weight\"\n+                        recommendation_text = \"强烈推荐\"\n+                    elif weight >= 0.5:\n+                        card_class = \"medium-weight\"\n+                        recommendation_text = \"推荐\"\n+                    elif weight >= 0.3:\n+                        card_class = \"medium-weight\"\n+                        recommendation_text = \"适量食用\"\n+                    else:\n+                        card_class = \"low-weight\"\n+                        recommendation_text = \"少量尝试\"\n+                    \n+                    with st.container():\n+                        st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n+                        \n+                        # 菜品名称和权重\n+                        col1, col2 = st.columns([3, 1])\n+                        with col1:\n+                            st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n+                        with col2:\n+                            st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n+                        \n+                        # 推荐原因\n+                        st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n+                        \n+                        # 营养值摘要\n+                        with st.expander(\"查看营养详情\"):\n+                            nutrition = dish.get(\"营养值\", {})\n+                            if nutrition:\n+                                col1, col2, col3 = st.columns(3)\n+                                with col1:\n+                                    st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n+                                    st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n+                                with col2:\n+                                    st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n+                                    st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n+                                with col3:\n+                                    st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n+                                    st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n+                            else:\n+                                st.warning(\"无营养数据\")\n+                        \n+                        st.markdown(\"</div>\", unsafe_allow_html=True)\n+            \n+            with tab2:\n+                # 整餐营养摘要\n+                total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n+                if total_nutrition:\n+                    st.markdown(\"### 整餐营养摘要\")\n+                    \n+                    # 创建营养指标卡片\n+                    col1, col2, col3 = st.columns(3)\n                     with col1:\n-                        st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n+                        st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n+                        st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n                     with col2:\n-                        st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n+                        st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n+                        st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n+                    with col3:\n+                        st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n+                        st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n                     \n-                    # 推荐原因\n-                    st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n+                    # 营养分布图表\n+                    st.markdown(\"### 营养分布\")\n                     \n-                    # 营养值摘要\n-                    with st.expander(\"查看营养详情\"):\n-                        nutrition = dish.get(\"营养值\", {})\n-                        if nutrition:\n-                            col1, col2, col3 = st.columns(3)\n-                            with col1:\n-                                st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n-                                st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n-                            with col2:\n-                                st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n-                                st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n-                            with col3:\n-                                st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n-                                st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n-                        else:\n-                            st.warning(\"无营养数据\")\n+                    # 主要营养素\n+                    main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n+                    main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n                     \n-                    st.markdown(\"</div>\", unsafe_allow_html=True)\n-        \n-        with tab2:\n-            # 整餐营养摘要\n-            total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n-            if total_nutrition:\n-                st.markdown(\"### 整餐营养摘要\")\n-                \n-                # 创建营养指标卡片\n-                col1, col2, col3 = st.columns(3)\n-                with col1:\n-                    st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n-                    st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n-                with col2:\n-                    st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n-                    st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n-                with col3:\n-                    st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n-                    st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n-                \n-                # 营养分布图表\n-                st.markdown(\"### 营养分布\")\n-                \n-                # 主要营养素\n-                main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n-                main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n-                \n-                # 创建DataFrame\n-                df = pd.DataFrame({\n-                    \"营养素\": main_nutrients,\n-                    \"含量\": main_values\n-                })\n-                \n-                # 显示柱状图\n-                st.bar_chart(df.set_index(\"营养素\"))\n-                \n-                # 微量营养素\n-                micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n-                micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n-                \n-                # 显示微量营养素\n-                st.markdown(\"### 微量营养素\")\n-                for nutrient, value in zip(micro_nutrients, micro_values):\n-                    st.markdown(f\"**{nutrient}**: {value:.1f}\")\n-                    # 添加简单的进度条\n-                    max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n-                    percent = min(value / max_value, 1.0) if max_value > 0 else 0\n-                    st.markdown(f\"\"\"\n-                    <div class=\"nutrient-bar\">\n-                        <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n-                    </div>\n-                    <div class=\"nutrient-value\">{value:.1f}</div>\n-                    \"\"\", unsafe_allow_html=True)\n-            else:\n-                st.warning(\"无整餐营养摘要数据\")\n-    else:\n-        st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n+                    # 创建DataFrame\n+                    df = pd.DataFrame({\n+                        \"营养素\": main_nutrients,\n+                        \"含量\": main_values\n+                    })\n+                    \n+                    # 显示柱状图\n+                    st.bar_chart(df.set_index(\"营养素\"))\n+                    \n+                    # 微量营养素\n+                    micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n+                    micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n+                    \n+                    # 显示微量营养素\n+                    st.markdown(\"### 微量营养素\")\n+                    for nutrient, value in zip(micro_nutrients, micro_values):\n+                        st.markdown(f\"**{nutrient}**: {value:.1f}\")\n+                        # 添加简单的进度条\n+                        max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n+                        percent = min(value / max_value, 1.0) if max_value > 0 else 0\n+                        st.markdown(f\"\"\"\n+                        <div class=\"nutrient-bar\">\n+                            <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n+                        </div>\n+                        <div class=\"nutrient-value\">{value:.1f}</div>\n+                        \"\"\", unsafe_allow_html=True)\n+                else:\n+                    st.warning(\"无整餐营养摘要数据\")\n+        else:\n+            st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n \n # 添加一些说明\n st.markdown(\"---\")\n st.markdown(\"\"\"\n"
                },
                {
                    "date": 1752479836135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,115 @@\n \n # 自定义CSS样式\n st.markdown(\"\"\"\n <style>\n-    /* 保留所有CSS样式 */\n+    .stApp {\n+        background-color: #f5f7fa;\n+    }\n+    .header {\n+        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);\n+        color: white;\n+        padding: 2rem;\n+        border-radius: 0 0 20px 20px;\n+        margin-bottom: 2rem;\n+    }\n+    .section {\n+        background: white;\n+        border-radius: 15px;\n+        padding: 1.5rem;\n+        box-shadow: 0 4px 10px rgba(0,0,0,0.05);\n+        margin-bottom: 1.5rem;\n+    }\n+    .dish-card {\n+        border: 1px solid #e0e6ed;\n+        border-radius: 10px;\n+        padding: 1rem;\n+        margin-bottom: 1rem;\n+        background: #f9fbfd;\n+    }\n+    .recommendation-card {\n+        border-radius: 10px;\n+        padding: 1rem;\n+        margin-bottom: 1rem;\n+        box-shadow: 0 2px 5px rgba(0,0,0,0.05);\n+    }\n+    .high-weight {\n+        background: #d4f7e2;\n+        border-left: 4px solid #2ecc71;\n+    }\n+    .medium-weight {\n+        background: #fef5e7;\n+        border-left: 4px solid #f39c12;\n+    }\n+    .low-weight {\n+        background: #fce8e6;\n+        border-left: 4px solid #e74c3c;\n+    }\n+    .submit-btn {\n+        width: 100%;\n+        padding: 0.75rem;\n+        border-radius: 8px;\n+        background: #3498db;\n+        color: white;\n+        font-weight: bold;\n+        border: none;\n+        cursor: pointer;\n+        transition: background 0.3s;\n+    }\n+    .submit-btn:hover {\n+        background: #2980b9;\n+    }\n+    .add-btn {\n+        background: #2ecc71;\n+        color: white;\n+        border: none;\n+        border-radius: 5px;\n+        padding: 0.5rem 1rem;\n+        cursor: pointer;\n+        transition: background 0.3s;\n+    }\n+    .add-btn:hover {\n+        background: #27ae60;\n+    }\n+    .remove-btn {\n+        background: #e74c3c;\n+        color: white;\n+        border: none;\n+        border-radius: 5px;\n+        padding: 0.25rem 0.75rem;\n+        cursor: pointer;\n+        margin-left: 0.5rem;\n+    }\n+    .spinner {\n+        display: inline-block;\n+        width: 20px;\n+        height: 20px;\n+        border: 3px solid rgba(0,0,0,0.1);\n+        border-radius: 50%;\n+        border-top-color: #3498db;\n+        animation: spin 1s linear infinite;\n+        margin-right: 10px;\n+    }\n+    @keyframes spin {\n+        0% { transform: rotate(0deg); }\n+        100% { transform: rotate(360deg); }\n+    }\n+    .nutrient-bar {\n+        height: 10px;\n+        border-radius: 5px;\n+        margin-top: 5px;\n+        background: #e0e0e0;\n+    }\n+    .nutrient-fill {\n+        height: 100%;\n+        border-radius: 5px;\n+        background: #3498db;\n+    }\n+    .nutrient-value {\n+        font-size: 0.9rem;\n+        margin-top: 3px;\n+        text-align: right;\n+    }\n </style>\n \"\"\", unsafe_allow_html=True)\n \n # 应用标题\n@@ -164,41 +270,48 @@\n             key=\"meal_type\",\n             index=1\n         )\n \n-# 主内容区 - 使用容器而不是嵌套列\n+# 主内容区\n main_container = st.container()\n \n with main_container:\n     col1, col2 = st.columns([1, 1])\n     \n     with col1:\n         st.markdown(\"### 🍽️ 菜品信息\")\n-        dish_container = st.container()\n         \n-        with dish_container:\n-            for i, dish in enumerate(st.session_state.dishes):\n-                # 使用容器而不是嵌套列\n-                with st.container():\n-                    # 使用HTML/CSS创建类似列的效果\n-                    st.markdown(f\"\"\"\n-                    <div style=\"display: flex; margin-bottom: 15px;\">\n-                        <div style=\"flex: 3; margin-right: 10px;\">\n-                            {st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")._repr_html_()}\n-                        </div>\n-                        <div style=\"flex: 1;\">\n-                            {st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)._repr_html_()}\n-                        </div>\n-                    </div>\n-                    \"\"\", unsafe_allow_html=True)\n-                    \n-                    # 更新session state\n-                    st.session_state.dishes[i][\"name\"] = dish[\"name\"]\n-                    st.session_state.dishes[i][\"weight\"] = dish[\"weight\"]\n-                    \n-                    # 删除按钮（不是第一个菜品时显示）\n-                    if i > 0:\n-                        st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n+        for i, dish in enumerate(st.session_state.dishes):\n+            # 为每个菜品创建一个容器\n+            with st.container():\n+                # 使用两列布局：名称和重量\n+                col_name, col_weight = st.columns([3, 1])\n+                \n+                with col_name:\n+                    dish_name = st.text_input(\n+                        f\"菜品 #{i+1} 名称\", \n+                        value=dish[\"name\"],\n+                        key=f\"dish_name_{i}\",\n+                        placeholder=\"例如: 番茄炒蛋\"\n+                    )\n+                \n+                with col_weight:\n+                    dish_weight = st.number_input(\n+                        \"重量 (g)\", \n+                        min_value=1.0, \n+                        value=dish[\"weight\"],\n+                        key=f\"dish_weight_{i}\",\n+                        step=1.0\n+                    )\n+                \n+                # 更新session state\n+                st.session_state.dishes[i][\"name\"] = dish_name\n+                st.session_state.dishes[i][\"weight\"] = dish_weight\n+                \n+                # 删除按钮（不是第一个菜品时显示）\n+                if i > 0:\n+                    # 将删除按钮放在重量列下方，靠右对齐\n+                    st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n         \n         # 添加菜品按钮\n         st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n         \n"
                },
                {
                    "date": 1752480028653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,115 +16,20 @@\n \n # 自定义CSS样式\n st.markdown(\"\"\"\n <style>\n-    .stApp {\n-        background-color: #f5f7fa;\n+    /* 保留所有CSS样式 */\n+    .dish-row {\n+        display: flex;\n+        margin-bottom: 15px;\n     }\n-    .header {\n-        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);\n-        color: white;\n-        padding: 2rem;\n-        border-radius: 0 0 20px 20px;\n-        margin-bottom: 2rem;\n-    }\n-    .section {\n-        background: white;\n-        border-radius: 15px;\n-        padding: 1.5rem;\n-        box-shadow: 0 4px 10px rgba(0,0,0,0.05);\n-        margin-bottom: 1.5rem;\n-    }\n-    .dish-card {\n-        border: 1px solid #e0e6ed;\n-        border-radius: 10px;\n-        padding: 1rem;\n-        margin-bottom: 1rem;\n-        background: #f9fbfd;\n-    }\n-    .recommendation-card {\n-        border-radius: 10px;\n-        padding: 1rem;\n-        margin-bottom: 1rem;\n-        box-shadow: 0 2px 5px rgba(0,0,0,0.05);\n-    }\n-    .high-weight {\n-        background: #d4f7e2;\n-        border-left: 4px solid #2ecc71;\n-    }\n-    .medium-weight {\n-        background: #fef5e7;\n-        border-left: 4px solid #f39c12;\n-    }\n-    .low-weight {\n-        background: #fce8e6;\n-        border-left: 4px solid #e74c3c;\n-    }\n-    .submit-btn {\n-        width: 100%;\n-        padding: 0.75rem;\n-        border-radius: 8px;\n-        background: #3498db;\n-        color: white;\n-        font-weight: bold;\n-        border: none;\n-        cursor: pointer;\n-        transition: background 0.3s;\n-    }\n-    .submit-btn:hover {\n-        background: #2980b9;\n-    }\n-    .add-btn {\n-        background: #2ecc71;\n-        color: white;\n-        border: none;\n-        border-radius: 5px;\n-        padding: 0.5rem 1rem;\n-        cursor: pointer;\n-        transition: background 0.3s;\n-    }\n-    .add-btn:hover {\n-        background: #27ae60;\n-    }\n-    .remove-btn {\n-        background: #e74c3c;\n-        color: white;\n-        border: none;\n-        border-radius: 5px;\n-        padding: 0.25rem 0.75rem;\n-        cursor: pointer;\n-        margin-left: 0.5rem;\n-    }\n-    .spinner {\n-        display: inline-block;\n-        width: 20px;\n-        height: 20px;\n-        border: 3px solid rgba(0,0,0,0.1);\n-        border-radius: 50%;\n-        border-top-color: #3498db;\n-        animation: spin 1s linear infinite;\n+    .dish-name {\n+        flex: 3;\n         margin-right: 10px;\n     }\n-    @keyframes spin {\n-        0% { transform: rotate(0deg); }\n-        100% { transform: rotate(360deg); }\n+    .dish-weight {\n+        flex: 1;\n     }\n-    .nutrient-bar {\n-        height: 10px;\n-        border-radius: 5px;\n-        margin-top: 5px;\n-        background: #e0e0e0;\n-    }\n-    .nutrient-fill {\n-        height: 100%;\n-        border-radius: 5px;\n-        background: #3498db;\n-    }\n-    .nutrient-value {\n-        font-size: 0.9rem;\n-        margin-top: 3px;\n-        text-align: right;\n-    }\n </style>\n \"\"\", unsafe_allow_html=True)\n \n # 应用标题\n@@ -280,38 +185,27 @@\n     with col1:\n         st.markdown(\"### 🍽️ 菜品信息\")\n         \n         for i, dish in enumerate(st.session_state.dishes):\n-            # 为每个菜品创建一个容器\n-            with st.container():\n-                # 使用两列布局：名称和重量\n-                col_name, col_weight = st.columns([3, 1])\n-                \n-                with col_name:\n-                    dish_name = st.text_input(\n-                        f\"菜品 #{i+1} 名称\", \n-                        value=dish[\"name\"],\n-                        key=f\"dish_name_{i}\",\n-                        placeholder=\"例如: 番茄炒蛋\"\n-                    )\n-                \n-                with col_weight:\n-                    dish_weight = st.number_input(\n-                        \"重量 (g)\", \n-                        min_value=1.0, \n-                        value=dish[\"weight\"],\n-                        key=f\"dish_weight_{i}\",\n-                        step=1.0\n-                    )\n-                \n-                # 更新session state\n-                st.session_state.dishes[i][\"name\"] = dish_name\n-                st.session_state.dishes[i][\"weight\"] = dish_weight\n-                \n-                # 删除按钮（不是第一个菜品时显示）\n-                if i > 0:\n-                    # 将删除按钮放在重量列下方，靠右对齐\n-                    st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n+            # 使用HTML/CSS创建类似列的效果，避免嵌套列\n+            st.markdown(f\"\"\"\n+            <div class=\"dish-row\">\n+                <div class=\"dish-name\">\n+                    {st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")._repr_html_()}\n+                </div>\n+                <div class=\"dish-weight\">\n+                    {st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)._repr_html_()}\n+                </div>\n+            </div>\n+            \"\"\", unsafe_allow_html=True)\n+            \n+            # 更新session state\n+            st.session_state.dishes[i][\"name\"] = dish[\"name\"]\n+            st.session_state.dishes[i][\"weight\"] = dish[\"weight\"]\n+            \n+            # 删除按钮（不是第一个菜品时显示）\n+            if i > 0:\n+                st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n         \n         # 添加菜品按钮\n         st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n         \n@@ -363,13 +257,10 @@\n                     with st.container():\n                         st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n                         \n                         # 菜品名称和权重\n-                        col1, col2 = st.columns([3, 1])\n-                        with col1:\n-                            st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n-                        with col2:\n-                            st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n+                        st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n+                        st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n                         \n                         # 推荐原因\n                         st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n                         \n"
                },
                {
                    "date": 1752482911475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,20 +16,39 @@\n \n # 自定义CSS样式\n st.markdown(\"\"\"\n <style>\n-    /* 保留所有CSS样式 */\n-    .dish-row {\n-        display: flex;\n-        margin-bottom: 15px;\n+    .recommendation-card {\n+        border: 1px solid #e0e0e0;\n+        border-radius: 12px;\n+        padding: 15px;\n+        margin-bottom: 10px;\n+        background-color: #fafafa;\n     }\n-    .dish-name {\n-        flex: 3;\n-        margin-right: 10px;\n+    .high-weight {\n+        border-left: 6px solid #4CAF50;\n     }\n-    .dish-weight {\n-        flex: 1;\n+    .medium-weight {\n+        border-left: 6px solid #FFC107;\n     }\n+    .low-weight {\n+        border-left: 6px solid #F44336;\n+    }\n+    .nutrient-bar {\n+        height: 10px;\n+        background-color: #f0f0f0;\n+        border-radius: 5px;\n+        overflow: hidden;\n+        margin-bottom: 4px;\n+    }\n+    .nutrient-fill {\n+        height: 100%;\n+        background-color: #4CAF50;\n+    }\n+    .nutrient-value {\n+        font-size: 12px;\n+        margin-bottom: 10px;\n+    }\n </style>\n \"\"\", unsafe_allow_html=True)\n \n # 应用标题\n@@ -45,15 +64,12 @@\n \n # 初始化session state\n if 'dishes' not in st.session_state:\n     st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]\n-\n if 'recommendations' not in st.session_state:\n     st.session_state.recommendations = None\n-\n if 'request_data' not in st.session_state:\n     st.session_state.request_data = None\n-\n if 'response_time' not in st.session_state:\n     st.session_state.response_time = None\n \n # 添加菜品\n@@ -66,28 +82,23 @@\n         st.session_state.dishes.pop(index)\n \n # 提交表单\n def submit_form():\n-    # 验证用户信息\n     required_fields = ['gender', 'age', 'height', 'weight', 'activity_level', 'meal_type']\n     if not all([st.session_state.get(field) for field in required_fields]):\n         st.error(\"请填写完整的个人信息\")\n         return False\n-    \n-    # 验证菜品信息\n     for i, dish in enumerate(st.session_state.dishes):\n         if not dish[\"name\"]:\n             st.error(f\"菜品 #{i+1} 名称不能为空\")\n             return False\n         if dish[\"weight\"] <= 0:\n             st.error(f\"菜品 #{i+1} 重量必须大于0\")\n             return False\n-    \n     return True\n \n # 调用后端服务\n def call_backend_service():\n-    # 准备请求数据\n     st.session_state.request_data = {\n         \"info\": {\n             \"性别\": st.session_state.gender,\n             \"年龄\": st.session_state.age,\n@@ -104,25 +115,16 @@\n                 } for dish in st.session_state.dishes\n             ]\n         }\n     }\n-    \n+\n     try:\n-        # 显示加载状态\n         with st.spinner(\"正在分析您的营养需求，请稍候...\"):\n             start_time = time.time()\n-            \n-            # 发送请求\n-            response = requests.post(\n-                BACKEND_URL,\n-                json=st.session_state.request_data,\n-                timeout=120  # 120秒超时\n-            )\n-            \n+            response = requests.post(BACKEND_URL, json=st.session_state.request_data, timeout=120)\n             end_time = time.time()\n             st.session_state.response_time = end_time - start_time\n-            \n-            # 检查响应状态\n+\n             if response.status_code == 200:\n                 data = response.json()\n                 if data.get(\"success\"):\n                     st.session_state.recommendations = data[\"result\"]\n@@ -137,111 +139,73 @@\n     except requests.exceptions.ConnectionError:\n         st.error(\"无法连接到后端服务，请检查网络连接\")\n     except Exception as e:\n         st.error(f\"发生未知错误: {str(e)}\")\n-    \n     return False\n \n # 左侧栏 - 用户信息输入\n with st.sidebar:\n     st.markdown(\"### 🧑 个人信息\")\n-    with st.container():\n-        st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n-        st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n-        st.number_input(\n-            \"身高 (cm)\", \n-            min_value=50.0, \n-            max_value=250.0, \n-            key=\"height\", \n-            value=175.0,\n-            step=1.0\n-        )\n-        st.number_input(\n-            \"体重 (kg)\", \n-            min_value=10.0, \n-            max_value=200.0, \n-            key=\"weight\", \n-            value=65.5,\n-            step=0.1\n-        )\n-        st.selectbox(\n-            \"活动水平\", \n-            [\"轻活动水平(办公室工作，很少运动)\", \"中活动水平(每天适量运动)\", \"重活动水平(体力劳动或高强度训练)\"], \n-            key=\"activity_level\",\n-            index=1\n-        )\n-        st.selectbox(\n-            \"餐别\", \n-            [\"早餐\", \"午餐\", \"晚餐\"], \n-            key=\"meal_type\",\n-            index=1\n-        )\n+    st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n+    st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n+    st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=175.0, step=1.0)\n+    st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.1)\n+    st.selectbox(\n+        \"活动水平\",\n+        [\"轻活动水平(办公室工作，很少运动)\", \"中活动水平(每天适量运动)\", \"重活动水平(体力劳动或高强度训练)\"],\n+        key=\"activity_level\",\n+        index=1\n+    )\n+    st.selectbox(\"餐别\", [\"早餐\", \"午餐\", \"晚餐\"], key=\"meal_type\", index=1)\n \n # 主内容区\n main_container = st.container()\n \n with main_container:\n     col1, col2 = st.columns([1, 1])\n-    \n+\n     with col1:\n         st.markdown(\"### 🍽️ 菜品信息\")\n-        \n+\n         for i, dish in enumerate(st.session_state.dishes):\n-            # 使用HTML/CSS创建类似列的效果，避免嵌套列\n-            st.markdown(f\"\"\"\n-            <div class=\"dish-row\">\n-                <div class=\"dish-name\">\n-                    {st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")._repr_html_()}\n-                </div>\n-                <div class=\"dish-weight\">\n-                    {st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)._repr_html_()}\n-                </div>\n-            </div>\n-            \"\"\", unsafe_allow_html=True)\n-            \n-            # 更新session state\n-            st.session_state.dishes[i][\"name\"] = dish[\"name\"]\n-            st.session_state.dishes[i][\"weight\"] = dish[\"weight\"]\n-            \n-            # 删除按钮（不是第一个菜品时显示）\n-            if i > 0:\n-                st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n-        \n-        # 添加菜品按钮\n+            col_name, col_weight, col_remove = st.columns([3, 1, 0.5])\n+\n+            with col_name:\n+                name = st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")\n+            with col_weight:\n+                weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)\n+            with col_remove:\n+                if i > 0:\n+                    if st.button(\"删除\", key=f\"remove_{i}\"):\n+                        remove_dish(i)\n+                        st.experimental_rerun()\n+\n+            # 更新 session state\n+            st.session_state.dishes[i][\"name\"] = name\n+            st.session_state.dishes[i][\"weight\"] = weight\n+\n         st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n-        \n-        # 提交按钮\n+\n         if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n             if submit_form():\n                 if call_backend_service():\n                     st.success(\"推荐结果已生成！\")\n                 else:\n                     st.session_state.recommendations = None\n-    \n+\n     with col2:\n         st.markdown(\"### 📊 推荐结果\")\n-        \n         if st.session_state.recommendations:\n             recommendations = st.session_state.recommendations\n-            \n-            # 显示请求信息\n             st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n-            \n-            # 显示餐别和求解状态\n             st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n             st.markdown(f\"**求解状态**: {recommendations.get('求解状态', '未知')}\")\n-            \n-            # 显示菜品推荐\n             st.markdown(\"### 菜品推荐\")\n-            \n-            # 创建选项卡\n             tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n-            \n+\n             with tab1:\n                 for dish in recommendations.get(\"菜品推荐\", []):\n                     weight = dish.get(\"推荐权重\", 0)\n-                    \n-                    # 根据权重设置样式\n                     if weight >= 0.7:\n                         card_class = \"high-weight\"\n                         recommendation_text = \"强烈推荐\"\n                     elif weight >= 0.5:\n@@ -252,20 +216,14 @@\n                         recommendation_text = \"适量食用\"\n                     else:\n                         card_class = \"low-weight\"\n                         recommendation_text = \"少量尝试\"\n-                    \n+\n                     with st.container():\n                         st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n-                        \n-                        # 菜品名称和权重\n                         st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n                         st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n-                        \n-                        # 推荐原因\n                         st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n-                        \n-                        # 营养值摘要\n                         with st.expander(\"查看营养详情\"):\n                             nutrition = dish.get(\"营养值\", {})\n                             if nutrition:\n                                 col1, col2, col3 = st.columns(3)\n@@ -279,18 +237,14 @@\n                                     st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n                                     st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n                             else:\n                                 st.warning(\"无营养数据\")\n-                        \n                         st.markdown(\"</div>\", unsafe_allow_html=True)\n-            \n+\n             with tab2:\n-                # 整餐营养摘要\n                 total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n                 if total_nutrition:\n                     st.markdown(\"### 整餐营养摘要\")\n-                    \n-                    # 创建营养指标卡片\n                     col1, col2, col3 = st.columns(3)\n                     with col1:\n                         st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n                         st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n@@ -299,34 +253,20 @@\n                         st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n                     with col3:\n                         st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n                         st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n-                    \n-                    # 营养分布图表\n+\n                     st.markdown(\"### 营养分布\")\n-                    \n-                    # 主要营养素\n                     main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n                     main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n-                    \n-                    # 创建DataFrame\n-                    df = pd.DataFrame({\n-                        \"营养素\": main_nutrients,\n-                        \"含量\": main_values\n-                    })\n-                    \n-                    # 显示柱状图\n+                    df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n                     st.bar_chart(df.set_index(\"营养素\"))\n-                    \n-                    # 微量营养素\n+\n                     micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n                     micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n-                    \n-                    # 显示微量营养素\n                     st.markdown(\"### 微量营养素\")\n                     for nutrient, value in zip(micro_nutrients, micro_values):\n                         st.markdown(f\"**{nutrient}**: {value:.1f}\")\n-                        # 添加简单的进度条\n                         max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n                         percent = min(value / max_value, 1.0) if max_value > 0 else 0\n                         st.markdown(f\"\"\"\n                         <div class=\"nutrient-bar\">\n@@ -338,9 +278,9 @@\n                     st.warning(\"无整餐营养摘要数据\")\n         else:\n             st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n \n-# 添加一些说明\n+# 使用说明\n st.markdown(\"---\")\n st.markdown(\"\"\"\n ### 使用说明\n 1. 在左侧填写您的个人信息（性别、年龄、身高、体重等）\n@@ -348,18 +288,17 @@\n 3. 点击\"生成菜品推荐\"按钮获取个性化推荐\n 4. 查看右侧的推荐结果，了解每道菜的推荐程度和原因\n \n **推荐权重说明**:\n-- **强烈推荐 (权重 ≥ 0.7)**: 营养均衡且符合需求\n-- **推荐 (0.5 ≤ 权重 < 0.7)**: 营养良好，适合食用\n-- **适量食用 (0.3 ≤ 权重 < 0.5)**: 可以少量食用\n+- **强烈推荐 (权重 ≥ 0.7)**: 营养均衡且符合需求  \n+- **推荐 (0.5 ≤ 权重 < 0.7)**: 营养良好，适合食用  \n+- **适量食用 (0.3 ≤ 权重 < 0.5)**: 可以少量食用  \n - **少量尝试 (权重 < 0.3)**: 建议本餐避免或少量尝试\n \"\"\")\n \n # 调试信息（可选）\n if st.checkbox(\"显示调试信息\"):\n     st.markdown(\"### 请求数据\")\n     st.json(st.session_state.request_data)\n-    \n\\ No newline at end of file\n     if st.session_state.recommendations:\n         st.markdown(\"### 完整响应\")\n-        st.json(st.session_state.recommendations)\n+        st.json(st.session_state.recommendations)\n"
                },
                {
                    "date": 1752483062216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,10 +163,10 @@\n with main_container:\n     col1, col2 = st.columns([1, 1])\n \n     with col1:\n-        st.markdown(\"### 🍽️ 菜品信息\")\n \n+\n         for i, dish in enumerate(st.session_state.dishes):\n             col_name, col_weight, col_remove = st.columns([3, 1, 0.5])\n \n             with col_name:\n"
                },
                {
                    "date": 1752483068892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,9 @@\n main_container = st.container()\n \n with main_container:\n     col1, col2 = st.columns([1, 1])\n-\n+            st.markdown(\"### 🍽️ 菜品信息\")\n     with col1:\n \n \n         for i, dish in enumerate(st.session_state.dishes):\n"
                },
                {
                    "date": 1752483117367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,38 +161,35 @@\n main_container = st.container()\n \n with main_container:\n     col1, col2 = st.columns([1, 1])\n-            st.markdown(\"### 🍽️ 菜品信息\")\n-    with col1:\n+st.markdown(\"### 🍽️ 菜品信息\")\n \n+for i, dish in enumerate(st.session_state.dishes):\n+    col_name, col_weight, col_remove = st.columns([3, 1, 0.5])\n \n-        for i, dish in enumerate(st.session_state.dishes):\n-            col_name, col_weight, col_remove = st.columns([3, 1, 0.5])\n+    with col_name:\n+        name = st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")\n+    with col_weight:\n+        weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)\n+    with col_remove:\n+        if i > 0:\n+            if st.button(\"删除\", key=f\"remove_{i}\"):\n+                remove_dish(i)\n+                st.experimental_rerun()\n \n-            with col_name:\n-                name = st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")\n-            with col_weight:\n-                weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)\n-            with col_remove:\n-                if i > 0:\n-                    if st.button(\"删除\", key=f\"remove_{i}\"):\n-                        remove_dish(i)\n-                        st.experimental_rerun()\n+    st.session_state.dishes[i][\"name\"] = name\n+    st.session_state.dishes[i][\"weight\"] = weight\n \n-            # 更新 session state\n-            st.session_state.dishes[i][\"name\"] = name\n-            st.session_state.dishes[i][\"weight\"] = weight\n+# 添加按钮和生成推荐\n+st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n+if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n+    if submit_form():\n+        if call_backend_service():\n+            st.success(\"推荐结果已生成！\")\n+        else:\n+            st.session_state.recommendations = None\n \n-        st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n-\n-        if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n-            if submit_form():\n-                if call_backend_service():\n-                    st.success(\"推荐结果已生成！\")\n-                else:\n-                    st.session_state.recommendations = None\n-\n     with col2:\n         st.markdown(\"### 📊 推荐结果\")\n         if st.session_state.recommendations:\n             recommendations = st.session_state.recommendations\n"
                },
                {
                    "date": 1752483124741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,34 +161,34 @@\n main_container = st.container()\n \n with main_container:\n     col1, col2 = st.columns([1, 1])\n-st.markdown(\"### 🍽️ 菜品信息\")\n+    st.markdown(\"### 🍽️ 菜品信息\")\n \n-for i, dish in enumerate(st.session_state.dishes):\n-    col_name, col_weight, col_remove = st.columns([3, 1, 0.5])\n+    for i, dish in enumerate(st.session_state.dishes):\n+        col_name, col_weight, col_remove = st.columns([3, 1, 0.5])\n \n-    with col_name:\n-        name = st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")\n-    with col_weight:\n-        weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)\n-    with col_remove:\n-        if i > 0:\n-            if st.button(\"删除\", key=f\"remove_{i}\"):\n-                remove_dish(i)\n-                st.experimental_rerun()\n+        with col_name:\n+            name = st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")\n+        with col_weight:\n+            weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)\n+        with col_remove:\n+            if i > 0:\n+                if st.button(\"删除\", key=f\"remove_{i}\"):\n+                    remove_dish(i)\n+                    st.experimental_rerun()\n \n-    st.session_state.dishes[i][\"name\"] = name\n-    st.session_state.dishes[i][\"weight\"] = weight\n+        st.session_state.dishes[i][\"name\"] = name\n+        st.session_state.dishes[i][\"weight\"] = weight\n \n-# 添加按钮和生成推荐\n-st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n-if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n-    if submit_form():\n-        if call_backend_service():\n-            st.success(\"推荐结果已生成！\")\n-        else:\n-            st.session_state.recommendations = None\n+    # 添加按钮和生成推荐\n+    st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n+    if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n+        if submit_form():\n+            if call_backend_service():\n+                st.success(\"推荐结果已生成！\")\n+            else:\n+                st.session_state.recommendations = None\n \n     with col2:\n         st.markdown(\"### 📊 推荐结果\")\n         if st.session_state.recommendations:\n"
                },
                {
                    "date": 1752483193941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n         st.session_state.dishes[i][\"weight\"] = weight\n \n     # 添加按钮和生成推荐\n     st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n-    if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n+    if st.button(\"生成菜品推荐\"):\n         if submit_form():\n             if call_backend_service():\n                 st.success(\"推荐结果已生成！\")\n             else:\n"
                },
                {
                    "date": 1752483199562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n         st.session_state.dishes[i][\"name\"] = name\n         st.session_state.dishes[i][\"weight\"] = weight\n \n     # 添加按钮和生成推荐\n-    st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n+    st.button(\"➕ 添加菜品\", on_click=add_dish)\n     if st.button(\"生成菜品推荐\"):\n         if submit_form():\n             if call_backend_service():\n                 st.success(\"推荐结果已生成！\")\n"
                },
                {
                    "date": 1752483546504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,10 +180,10 @@\n         st.session_state.dishes[i][\"name\"] = name\n         st.session_state.dishes[i][\"weight\"] = weight\n \n     # 添加按钮和生成推荐\n-    st.button(\"➕ 添加菜品\", on_click=add_dish)\n-    if st.button(\"生成菜品推荐\"):\n+    st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n+    if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n         if submit_form():\n             if call_backend_service():\n                 st.success(\"推荐结果已生成！\")\n             else:\n"
                },
                {
                    "date": 1752484001244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n         st.session_state.dishes[i][\"weight\"] = weight\n \n     # 添加按钮和生成推荐\n     st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n-    if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n+    if st.button(\"生成菜品推荐\"):\n         if submit_form():\n             if call_backend_service():\n                 st.success(\"推荐结果已生成！\")\n             else:\n"
                },
                {
                    "date": 1752484679969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,14 +148,24 @@\n     st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n     st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n     st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=175.0, step=1.0)\n     st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.1)\n-    st.selectbox(\n+    \n+    # 活动水平映射\n+    activity_options = {\n+        \"轻活动水平(办公室工作，很少运动)\": \"a\",\n+        \"中活动水平(每天适量运动)\": \"b\",\n+        \"重活动水平(体力劳动或高强度训练)\": \"c\"\n+    }\n+    selected_activity_label = st.selectbox(\n         \"活动水平\",\n-        [\"轻活动水平(办公室工作，很少运动)\", \"中活动水平(每天适量运动)\", \"重活动水平(体力劳动或高强度训练)\"],\n-        key=\"activity_level\",\n+        list(activity_options.keys()),\n+        key=\"activity_level_label\",\n         index=1\n     )\n+    # 将选择的值映射为简写形式\n+    st.session_state.activity_level = activity_options[selected_activity_label]\n+    \n     st.selectbox(\"餐别\", [\"早餐\", \"午餐\", \"晚餐\"], key=\"meal_type\", index=1)\n \n # 主内容区\n main_container = st.container()\n@@ -180,9 +190,9 @@\n         st.session_state.dishes[i][\"name\"] = name\n         st.session_state.dishes[i][\"weight\"] = weight\n \n     # 添加按钮和生成推荐\n-    st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n+    st.button(\"➕ 添加菜品\", on_click=add_dish)\n     if st.button(\"生成菜品推荐\"):\n         if submit_form():\n             if call_backend_service():\n                 st.success(\"推荐结果已生成！\")\n"
                },
                {
                    "date": 1752484697961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n     st.markdown(\"### 🧑 个人信息\")\n     st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n     st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n     st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=175.0, step=1.0)\n-    st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.1)\n+    st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.5)\n     \n     # 活动水平映射\n     activity_options = {\n         \"轻活动水平(办公室工作，很少运动)\": \"a\",\n"
                },
                {
                    "date": 1752484915045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -246,44 +246,57 @@\n                             else:\n                                 st.warning(\"无营养数据\")\n                         st.markdown(\"</div>\", unsafe_allow_html=True)\n \n-            with tab2:\n-                total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n-                if total_nutrition:\n-                    st.markdown(\"### 整餐营养摘要\")\n-                    col1, col2, col3 = st.columns(3)\n-                    with col1:\n-                        st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n-                        st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n-                    with col2:\n-                        st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n-                        st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n-                    with col3:\n-                        st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n-                        st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n+with tab2:\n+    # 整餐营养摘要\n+    total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n+    if total_nutrition:\n+        st.markdown(\"### 整餐营养摘要\")\n \n-                    st.markdown(\"### 营养分布\")\n-                    main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n-                    main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n-                    df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n-                    st.bar_chart(df.set_index(\"营养素\"))\n+        # 在最外层容器中使用 columns，避免嵌套\n+        energy_col, protein_col, fat_col = st.columns(3)\n+        with energy_col:\n+            st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n+        with protein_col:\n+            st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n+        with fat_col:\n+            st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n \n-                    micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n-                    micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n-                    st.markdown(\"### 微量营养素\")\n-                    for nutrient, value in zip(micro_nutrients, micro_values):\n-                        st.markdown(f\"**{nutrient}**: {value:.1f}\")\n-                        max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n-                        percent = min(value / max_value, 1.0) if max_value > 0 else 0\n-                        st.markdown(f\"\"\"\n-                        <div class=\"nutrient-bar\">\n-                            <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n-                        </div>\n-                        <div class=\"nutrient-value\">{value:.1f}</div>\n-                        \"\"\", unsafe_allow_html=True)\n-                else:\n-                    st.warning(\"无整餐营养摘要数据\")\n+        carb_col, sodium_col, vc_col = st.columns(3)\n+        with carb_col:\n+            st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n+        with sodium_col:\n+            st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n+        with vc_col:\n+            st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n+\n+        # 营养分布图表\n+        st.markdown(\"### 营养分布\")\n+\n+        # 主要营养素\n+        main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n+        main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n+        df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n+        st.bar_chart(df.set_index(\"营养素\"))\n+\n+        # 微量营养素\n+        st.markdown(\"### 微量营养素\")\n+        micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n+        micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n+\n+        for nutrient, value in zip(micro_nutrients, micro_values):\n+            st.markdown(f\"**{nutrient}**: {value:.1f}\")\n+            max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n+            percent = min(value / max_value, 1.0) if max_value > 0 else 0\n+            st.markdown(f\"\"\"\n+                <div class=\"nutrient-bar\" style=\"height: 8px; background: #eee;\">\n+                    <div class=\"nutrient-fill\" style=\"width: {percent*100}%; background: #4caf50; height: 100%;\"></div>\n+                </div>\n+                <div class=\"nutrient-value\">{value:.1f}</div>\n+            \"\"\", unsafe_allow_html=True)\n+    else:\n+        st.warning(\"无整餐营养摘要数据\")\n         else:\n             st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n \n # 使用说明\n"
                },
                {
                    "date": 1752484924988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -246,57 +246,57 @@\n                             else:\n                                 st.warning(\"无营养数据\")\n                         st.markdown(\"</div>\", unsafe_allow_html=True)\n \n-with tab2:\n-    # 整餐营养摘要\n-    total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n-    if total_nutrition:\n-        st.markdown(\"### 整餐营养摘要\")\n+        with tab2:\n+            # 整餐营养摘要\n+            total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n+            if total_nutrition:\n+                st.markdown(\"### 整餐营养摘要\")\n \n-        # 在最外层容器中使用 columns，避免嵌套\n-        energy_col, protein_col, fat_col = st.columns(3)\n-        with energy_col:\n-            st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n-        with protein_col:\n-            st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n-        with fat_col:\n-            st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n+                # 在最外层容器中使用 columns，避免嵌套\n+                energy_col, protein_col, fat_col = st.columns(3)\n+                with energy_col:\n+                    st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n+                with protein_col:\n+                    st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n+                with fat_col:\n+                    st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n \n-        carb_col, sodium_col, vc_col = st.columns(3)\n-        with carb_col:\n-            st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n-        with sodium_col:\n-            st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n-        with vc_col:\n-            st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n+                carb_col, sodium_col, vc_col = st.columns(3)\n+                with carb_col:\n+                    st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n+                with sodium_col:\n+                    st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n+                with vc_col:\n+                    st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n \n-        # 营养分布图表\n-        st.markdown(\"### 营养分布\")\n+                # 营养分布图表\n+                st.markdown(\"### 营养分布\")\n \n-        # 主要营养素\n-        main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n-        main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n-        df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n-        st.bar_chart(df.set_index(\"营养素\"))\n+                # 主要营养素\n+                main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n+                main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n+                df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n+                st.bar_chart(df.set_index(\"营养素\"))\n \n-        # 微量营养素\n-        st.markdown(\"### 微量营养素\")\n-        micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n-        micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n+                # 微量营养素\n+                st.markdown(\"### 微量营养素\")\n+                micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n+                micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n \n-        for nutrient, value in zip(micro_nutrients, micro_values):\n-            st.markdown(f\"**{nutrient}**: {value:.1f}\")\n-            max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n-            percent = min(value / max_value, 1.0) if max_value > 0 else 0\n-            st.markdown(f\"\"\"\n-                <div class=\"nutrient-bar\" style=\"height: 8px; background: #eee;\">\n-                    <div class=\"nutrient-fill\" style=\"width: {percent*100}%; background: #4caf50; height: 100%;\"></div>\n-                </div>\n-                <div class=\"nutrient-value\">{value:.1f}</div>\n-            \"\"\", unsafe_allow_html=True)\n-    else:\n-        st.warning(\"无整餐营养摘要数据\")\n+                for nutrient, value in zip(micro_nutrients, micro_values):\n+                    st.markdown(f\"**{nutrient}**: {value:.1f}\")\n+                    max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n+                    percent = min(value / max_value, 1.0) if max_value > 0 else 0\n+                    st.markdown(f\"\"\"\n+                        <div class=\"nutrient-bar\" style=\"height: 8px; background: #eee;\">\n+                            <div class=\"nutrient-fill\" style=\"width: {percent*100}%; background: #4caf50; height: 100%;\"></div>\n+                        </div>\n+                        <div class=\"nutrient-value\">{value:.1f}</div>\n+                    \"\"\", unsafe_allow_html=True)\n+            else:\n+                st.warning(\"无整餐营养摘要数据\")\n         else:\n             st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n \n # 使用说明\n"
                },
                {
                    "date": 1752484930761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -246,57 +246,57 @@\n                             else:\n                                 st.warning(\"无营养数据\")\n                         st.markdown(\"</div>\", unsafe_allow_html=True)\n \n-        with tab2:\n-            # 整餐营养摘要\n-            total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n-            if total_nutrition:\n-                st.markdown(\"### 整餐营养摘要\")\n+            with tab2:\n+                # 整餐营养摘要\n+                total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n+                if total_nutrition:\n+                    st.markdown(\"### 整餐营养摘要\")\n \n-                # 在最外层容器中使用 columns，避免嵌套\n-                energy_col, protein_col, fat_col = st.columns(3)\n-                with energy_col:\n-                    st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n-                with protein_col:\n-                    st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n-                with fat_col:\n-                    st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n+                    # 在最外层容器中使用 columns，避免嵌套\n+                    energy_col, protein_col, fat_col = st.columns(3)\n+                    with energy_col:\n+                        st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n+                    with protein_col:\n+                        st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n+                    with fat_col:\n+                        st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n \n-                carb_col, sodium_col, vc_col = st.columns(3)\n-                with carb_col:\n-                    st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n-                with sodium_col:\n-                    st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n-                with vc_col:\n-                    st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n+                    carb_col, sodium_col, vc_col = st.columns(3)\n+                    with carb_col:\n+                        st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n+                    with sodium_col:\n+                        st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n+                    with vc_col:\n+                        st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n \n-                # 营养分布图表\n-                st.markdown(\"### 营养分布\")\n+                    # 营养分布图表\n+                    st.markdown(\"### 营养分布\")\n \n-                # 主要营养素\n-                main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n-                main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n-                df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n-                st.bar_chart(df.set_index(\"营养素\"))\n+                    # 主要营养素\n+                    main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n+                    main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n+                    df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n+                    st.bar_chart(df.set_index(\"营养素\"))\n \n-                # 微量营养素\n-                st.markdown(\"### 微量营养素\")\n-                micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n-                micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n+                    # 微量营养素\n+                    st.markdown(\"### 微量营养素\")\n+                    micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n+                    micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n \n-                for nutrient, value in zip(micro_nutrients, micro_values):\n-                    st.markdown(f\"**{nutrient}**: {value:.1f}\")\n-                    max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n-                    percent = min(value / max_value, 1.0) if max_value > 0 else 0\n-                    st.markdown(f\"\"\"\n-                        <div class=\"nutrient-bar\" style=\"height: 8px; background: #eee;\">\n-                            <div class=\"nutrient-fill\" style=\"width: {percent*100}%; background: #4caf50; height: 100%;\"></div>\n-                        </div>\n-                        <div class=\"nutrient-value\">{value:.1f}</div>\n-                    \"\"\", unsafe_allow_html=True)\n-            else:\n-                st.warning(\"无整餐营养摘要数据\")\n+                    for nutrient, value in zip(micro_nutrients, micro_values):\n+                        st.markdown(f\"**{nutrient}**: {value:.1f}\")\n+                        max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n+                        percent = min(value / max_value, 1.0) if max_value > 0 else 0\n+                        st.markdown(f\"\"\"\n+                            <div class=\"nutrient-bar\" style=\"height: 8px; background: #eee;\">\n+                                <div class=\"nutrient-fill\" style=\"width: {percent*100}%; background: #4caf50; height: 100%;\"></div>\n+                            </div>\n+                            <div class=\"nutrient-value\">{value:.1f}</div>\n+                        \"\"\", unsafe_allow_html=True)\n+                else:\n+                    st.warning(\"无整餐营养摘要数据\")\n         else:\n             st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n \n # 使用说明\n"
                },
                {
                    "date": 1752484991973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n     st.markdown(\"### 🧑 个人信息\")\n     st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n     st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n     st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=175.0, step=1.0)\n-    st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.5)\n+    st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.)\n     \n     # 活动水平映射\n     activity_options = {\n         \"轻活动水平(办公室工作，很少运动)\": \"a\",\n@@ -247,53 +247,40 @@\n                                 st.warning(\"无营养数据\")\n                         st.markdown(\"</div>\", unsafe_allow_html=True)\n \n             with tab2:\n-                # 整餐营养摘要\n                 total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n                 if total_nutrition:\n                     st.markdown(\"### 整餐营养摘要\")\n-\n-                    # 在最外层容器中使用 columns，避免嵌套\n-                    energy_col, protein_col, fat_col = st.columns(3)\n-                    with energy_col:\n+                    col1, col2, col3 = st.columns(3)\n+                    with col1:\n                         st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n-                    with protein_col:\n                         st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n-                    with fat_col:\n+                    with col2:\n                         st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n-\n-                    carb_col, sodium_col, vc_col = st.columns(3)\n-                    with carb_col:\n                         st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n-                    with sodium_col:\n+                    with col3:\n                         st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n-                    with vc_col:\n                         st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n \n-                    # 营养分布图表\n                     st.markdown(\"### 营养分布\")\n-\n-                    # 主要营养素\n                     main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n                     main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n                     df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n                     st.bar_chart(df.set_index(\"营养素\"))\n \n-                    # 微量营养素\n-                    st.markdown(\"### 微量营养素\")\n                     micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n                     micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n-\n+                    st.markdown(\"### 微量营养素\")\n                     for nutrient, value in zip(micro_nutrients, micro_values):\n                         st.markdown(f\"**{nutrient}**: {value:.1f}\")\n                         max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n                         percent = min(value / max_value, 1.0) if max_value > 0 else 0\n                         st.markdown(f\"\"\"\n-                            <div class=\"nutrient-bar\" style=\"height: 8px; background: #eee;\">\n-                                <div class=\"nutrient-fill\" style=\"width: {percent*100}%; background: #4caf50; height: 100%;\"></div>\n-                            </div>\n-                            <div class=\"nutrient-value\">{value:.1f}</div>\n+                        <div class=\"nutrient-bar\">\n+                            <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n+                        </div>\n+                        <div class=\"nutrient-value\">{value:.1f}</div>\n                         \"\"\", unsafe_allow_html=True)\n                 else:\n                     st.warning(\"无整餐营养摘要数据\")\n         else:\n"
                },
                {
                    "date": 1752485141926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,68 +2,26 @@\n import requests\n import time\n import json\n import pandas as pd\n-import numpy as np\n from datetime import datetime\n \n-# 设置页面配置\n+# 页面配置\n st.set_page_config(\n     page_title=\"智能菜品推荐系统\",\n     page_icon=\"🍲\",\n     layout=\"wide\",\n     initial_sidebar_state=\"expanded\"\n )\n \n-# 自定义CSS样式\n-st.markdown(\"\"\"\n-<style>\n-    .recommendation-card {\n-        border: 1px solid #e0e0e0;\n-        border-radius: 12px;\n-        padding: 15px;\n-        margin-bottom: 10px;\n-        background-color: #fafafa;\n-    }\n-    .high-weight {\n-        border-left: 6px solid #4CAF50;\n-    }\n-    .medium-weight {\n-        border-left: 6px solid #FFC107;\n-    }\n-    .low-weight {\n-        border-left: 6px solid #F44336;\n-    }\n-    .nutrient-bar {\n-        height: 10px;\n-        background-color: #f0f0f0;\n-        border-radius: 5px;\n-        overflow: hidden;\n-        margin-bottom: 4px;\n-    }\n-    .nutrient-fill {\n-        height: 100%;\n-        background-color: #4CAF50;\n-    }\n-    .nutrient-value {\n-        font-size: 12px;\n-        margin-bottom: 10px;\n-    }\n-</style>\n-\"\"\", unsafe_allow_html=True)\n+# 标题\n+st.title(\"🍲 智能菜品推荐系统\")\n+st.markdown(\"基于营养学与AI的个性化菜品推荐\")\n \n-# 应用标题\n-st.markdown(\"\"\"\n-<div class=\"header\">\n-    <h1 style=\"text-align:center; margin:0;\">🍲 智能菜品推荐系统</h1>\n-    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n-</div>\n-\"\"\", unsafe_allow_html=True)\n-\n-# 后端服务URL\n+# 后端地址\n BACKEND_URL = \"http://192.168.99.55:5000/recommend_dishes\"\n \n-# 初始化session state\n+# Session 初始化\n if 'dishes' not in st.session_state:\n     st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]\n if 'recommendations' not in st.session_state:\n     st.session_state.recommendations = None\n@@ -80,9 +38,9 @@\n def remove_dish(index):\n     if len(st.session_state.dishes) > 1:\n         st.session_state.dishes.pop(index)\n \n-# 提交表单\n+# 表单验证\n def submit_form():\n     required_fields = ['gender', 'age', 'height', 'weight', 'activity_level', 'meal_type']\n     if not all([st.session_state.get(field) for field in required_fields]):\n         st.error(\"请填写完整的个人信息\")\n@@ -95,9 +53,9 @@\n             st.error(f\"菜品 #{i+1} 重量必须大于0\")\n             return False\n     return True\n \n-# 调用后端服务\n+# 调用后端\n def call_backend_service():\n     st.session_state.request_data = {\n         \"info\": {\n             \"性别\": st.session_state.gender,\n@@ -119,9 +77,13 @@\n \n     try:\n         with st.spinner(\"正在分析您的营养需求，请稍候...\"):\n             start_time = time.time()\n-            response = requests.post(BACKEND_URL, json=st.session_state.request_data, timeout=120)\n+            response = requests.post(\n+                BACKEND_URL,\n+                json=st.session_state.request_data,\n+                timeout=120\n+            )\n             end_time = time.time()\n             st.session_state.response_time = end_time - start_time\n \n             if response.status_code == 200:\n@@ -133,179 +95,104 @@\n                     st.error(f\"服务返回错误: {data.get('error', '未知错误')}\")\n             else:\n                 st.error(f\"请求失败, 状态码: {response.status_code}\")\n                 st.error(f\"错误信息: {response.text}\")\n-    except requests.exceptions.Timeout:\n-        st.error(\"请求超时，请稍后再试\")\n-    except requests.exceptions.ConnectionError:\n-        st.error(\"无法连接到后端服务，请检查网络连接\")\n     except Exception as e:\n-        st.error(f\"发生未知错误: {str(e)}\")\n+        st.error(f\"请求错误: {e}\")\n     return False\n \n-# 左侧栏 - 用户信息输入\n+# 左侧输入\n with st.sidebar:\n-    st.markdown(\"### 🧑 个人信息\")\n-    st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n-    st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n-    st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=175.0, step=1.0)\n-    st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.)\n-    \n-    # 活动水平映射\n-    activity_options = {\n-        \"轻活动水平(办公室工作，很少运动)\": \"a\",\n-        \"中活动水平(每天适量运动)\": \"b\",\n-        \"重活动水平(体力劳动或高强度训练)\": \"c\"\n-    }\n-    selected_activity_label = st.selectbox(\n-        \"活动水平\",\n-        list(activity_options.keys()),\n-        key=\"activity_level_label\",\n-        index=1\n-    )\n-    # 将选择的值映射为简写形式\n-    st.session_state.activity_level = activity_options[selected_activity_label]\n-    \n-    st.selectbox(\"餐别\", [\"早餐\", \"午餐\", \"晚餐\"], key=\"meal_type\", index=1)\n+    st.header(\"🧑 个人信息\")\n+    st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\")\n+    st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=25)\n+    st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=170.0)\n+    st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=60.0)\n+    st.selectbox(\"活动水平\", [\n+        \"轻活动水平(办公室工作，很少运动)\",\n+        \"中活动水平(每天适量运动)\",\n+        \"重活动水平(体力劳动或高强度训练)\"\n+    ], key=\"activity_level\")\n+    st.selectbox(\"餐别\", [\"早餐\", \"午餐\", \"晚餐\"], key=\"meal_type\")\n \n-# 主内容区\n-main_container = st.container()\n+# 菜品输入部分\n+st.subheader(\"🍽️ 菜品信息\")\n+for i, dish in enumerate(st.session_state.dishes):\n+    col_name, col_weight, col_del = st.columns([3, 2, 1])\n+    with col_name:\n+        name = st.text_input(f\"菜品 #{i+1}\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如：番茄炒蛋\")\n+    with col_weight:\n+        weight = st.number_input(\"重量(g)\", value=dish[\"weight\"], key=f\"dish_weight_{i}\", min_value=1.0, step=1.0)\n+    with col_del:\n+        if i > 0 and st.button(\"删除\", key=f\"del_{i}\"):\n+            remove_dish(i)\n+            st.experimental_rerun()\n+    st.session_state.dishes[i][\"name\"] = name\n+    st.session_state.dishes[i][\"weight\"] = weight\n \n-with main_container:\n-    col1, col2 = st.columns([1, 1])\n-    st.markdown(\"### 🍽️ 菜品信息\")\n+if st.button(\"➕ 添加菜品\"):\n+    add_dish()\n+    st.experimental_rerun()\n \n-    for i, dish in enumerate(st.session_state.dishes):\n-        col_name, col_weight, col_remove = st.columns([3, 1, 0.5])\n+if st.button(\"生成菜品推荐\"):\n+    if submit_form():\n+        if call_backend_service():\n+            st.success(\"推荐结果已生成！\")\n+        else:\n+            st.session_state.recommendations = None\n \n-        with col_name:\n-            name = st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")\n-        with col_weight:\n-            weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)\n-        with col_remove:\n-            if i > 0:\n-                if st.button(\"删除\", key=f\"remove_{i}\"):\n-                    remove_dish(i)\n-                    st.experimental_rerun()\n+# 推荐结果展示\n+if st.session_state.recommendations:\n+    rec = st.session_state.recommendations\n+    st.markdown(\"---\")\n+    st.subheader(\"📊 推荐结果\")\n+    st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应耗时: {st.session_state.response_time:.2f} 秒\")\n+    st.markdown(f\"**餐别**: {rec.get('餐别', '午餐')}  |  **求解状态**: {rec.get('求解状态', '未知')}\")\n \n-        st.session_state.dishes[i][\"name\"] = name\n-        st.session_state.dishes[i][\"weight\"] = weight\n+    tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n \n-    # 添加按钮和生成推荐\n-    st.button(\"➕ 添加菜品\", on_click=add_dish)\n-    if st.button(\"生成菜品推荐\"):\n-        if submit_form():\n-            if call_backend_service():\n-                st.success(\"推荐结果已生成！\")\n-            else:\n-                st.session_state.recommendations = None\n+    with tab1:\n+        for dish in rec.get(\"菜品推荐\", []):\n+            name = dish.get(\"菜品名称\", \"未知\")\n+            weight = dish.get(\"推荐权重\", 0)\n+            reason = dish.get(\"原因\", \"无推荐理由\")\n+            st.markdown(f\"### {name}\")\n+            st.markdown(f\"**推荐权重**: {weight:.2f}\")\n+            st.markdown(f\"**推荐理由**: {reason}\")\n+            with st.expander(\"营养详情\"):\n+                nutrition = dish.get(\"营养值\", {})\n+                for key, value in nutrition.items():\n+                    st.write(f\"{key}: {value}\")\n \n-    with col2:\n-        st.markdown(\"### 📊 推荐结果\")\n-        if st.session_state.recommendations:\n-            recommendations = st.session_state.recommendations\n-            st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n-            st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n-            st.markdown(f\"**求解状态**: {recommendations.get('求解状态', '未知')}\")\n-            st.markdown(\"### 菜品推荐\")\n-            tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n+    with tab2:\n+        st.subheader(\"整餐营养摘要\")\n+        nutrition = rec.get(\"整餐营养摘要\", {})\n+        if nutrition:\n+            col1, col2, col3 = st.columns(3)\n+            with col1:\n+                st.metric(\"总能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n+                st.metric(\"总蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n+            with col2:\n+                st.metric(\"总脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n+                st.metric(\"总碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n+            with col3:\n+                st.metric(\"总钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n+                st.metric(\"总维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n \n-            with tab1:\n-                for dish in recommendations.get(\"菜品推荐\", []):\n-                    weight = dish.get(\"推荐权重\", 0)\n-                    if weight >= 0.7:\n-                        card_class = \"high-weight\"\n-                        recommendation_text = \"强烈推荐\"\n-                    elif weight >= 0.5:\n-                        card_class = \"medium-weight\"\n-                        recommendation_text = \"推荐\"\n-                    elif weight >= 0.3:\n-                        card_class = \"medium-weight\"\n-                        recommendation_text = \"适量食用\"\n-                    else:\n-                        card_class = \"low-weight\"\n-                        recommendation_text = \"少量尝试\"\n+            st.markdown(\"### 营养分布图\")\n+            keys = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n+            values = [nutrition.get(k, 0) for k in keys]\n+            df = pd.DataFrame({\"营养素\": keys, \"含量\": values})\n+            st.bar_chart(df.set_index(\"营养素\"))\n \n-                    with st.container():\n-                        st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n-                        st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n-                        st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n-                        st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n-                        with st.expander(\"查看营养详情\"):\n-                            nutrition = dish.get(\"营养值\", {})\n-                            if nutrition:\n-                                col1, col2, col3 = st.columns(3)\n-                                with col1:\n-                                    st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n-                                    st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n-                                with col2:\n-                                    st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n-                                    st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n-                                with col3:\n-                                    st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n-                                    st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n-                            else:\n-                                st.warning(\"无营养数据\")\n-                        st.markdown(\"</div>\", unsafe_allow_html=True)\n-\n-            with tab2:\n-                total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n-                if total_nutrition:\n-                    st.markdown(\"### 整餐营养摘要\")\n-                    col1, col2, col3 = st.columns(3)\n-                    with col1:\n-                        st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n-                        st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n-                    with col2:\n-                        st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n-                        st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n-                    with col3:\n-                        st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n-                        st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n-\n-                    st.markdown(\"### 营养分布\")\n-                    main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n-                    main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n-                    df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n-                    st.bar_chart(df.set_index(\"营养素\"))\n-\n-                    micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n-                    micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n-                    st.markdown(\"### 微量营养素\")\n-                    for nutrient, value in zip(micro_nutrients, micro_values):\n-                        st.markdown(f\"**{nutrient}**: {value:.1f}\")\n-                        max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n-                        percent = min(value / max_value, 1.0) if max_value > 0 else 0\n-                        st.markdown(f\"\"\"\n-                        <div class=\"nutrient-bar\">\n-                            <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n-                        </div>\n-                        <div class=\"nutrient-value\">{value:.1f}</div>\n-                        \"\"\", unsafe_allow_html=True)\n-                else:\n-                    st.warning(\"无整餐营养摘要数据\")\n+            st.markdown(\"### 微量营养素\")\n+            micronutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n+            for k in micronutrients:\n+                v = nutrition.get(k, 0.0)\n+                st.write(f\"**{k}**: {v:.1f}\")\n         else:\n-            st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n+            st.warning(\"无整餐营养数据\")\n \n-# 使用说明\n-st.markdown(\"---\")\n-st.markdown(\"\"\"\n-### 使用说明\n-1. 在左侧填写您的个人信息（性别、年龄、身高、体重等）\n-2. 添加您想评估的菜品（至少一个）\n-3. 点击\"生成菜品推荐\"按钮获取个性化推荐\n-4. 查看右侧的推荐结果，了解每道菜的推荐程度和原因\n-\n-**推荐权重说明**:\n-- **强烈推荐 (权重 ≥ 0.7)**: 营养均衡且符合需求  \n-- **推荐 (0.5 ≤ 权重 < 0.7)**: 营养良好，适合食用  \n-- **适量食用 (0.3 ≤ 权重 < 0.5)**: 可以少量食用  \n-- **少量尝试 (权重 < 0.3)**: 建议本餐避免或少量尝试\n-\"\"\")\n-\n # 调试信息（可选）\n if st.checkbox(\"显示调试信息\"):\n-    st.markdown(\"### 请求数据\")\n     st.json(st.session_state.request_data)\n-    if st.session_state.recommendations:\n-        st.markdown(\"### 完整响应\")\n-        st.json(st.session_state.recommendations)\n+    st.json(st.session_state.recommendations)\n"
                },
                {
                    "date": 1752485152917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,26 +2,68 @@\n import requests\n import time\n import json\n import pandas as pd\n+import numpy as np\n from datetime import datetime\n \n-# 页面配置\n+# 设置页面配置\n st.set_page_config(\n     page_title=\"智能菜品推荐系统\",\n     page_icon=\"🍲\",\n     layout=\"wide\",\n     initial_sidebar_state=\"expanded\"\n )\n \n-# 标题\n-st.title(\"🍲 智能菜品推荐系统\")\n-st.markdown(\"基于营养学与AI的个性化菜品推荐\")\n+# 自定义CSS样式\n+st.markdown(\"\"\"\n+<style>\n+    .recommendation-card {\n+        border: 1px solid #e0e0e0;\n+        border-radius: 12px;\n+        padding: 15px;\n+        margin-bottom: 10px;\n+        background-color: #fafafa;\n+    }\n+    .high-weight {\n+        border-left: 6px solid #4CAF50;\n+    }\n+    .medium-weight {\n+        border-left: 6px solid #FFC107;\n+    }\n+    .low-weight {\n+        border-left: 6px solid #F44336;\n+    }\n+    .nutrient-bar {\n+        height: 10px;\n+        background-color: #f0f0f0;\n+        border-radius: 5px;\n+        overflow: hidden;\n+        margin-bottom: 4px;\n+    }\n+    .nutrient-fill {\n+        height: 100%;\n+        background-color: #4CAF50;\n+    }\n+    .nutrient-value {\n+        font-size: 12px;\n+        margin-bottom: 10px;\n+    }\n+</style>\n+\"\"\", unsafe_allow_html=True)\n \n-# 后端地址\n+# 应用标题\n+st.markdown(\"\"\"\n+<div class=\"header\">\n+    <h1 style=\"text-align:center; margin:0;\">🍲 智能菜品推荐系统</h1>\n+    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n+</div>\n+\"\"\", unsafe_allow_html=True)\n+\n+# 后端服务URL\n BACKEND_URL = \"http://192.168.99.55:5000/recommend_dishes\"\n \n-# Session 初始化\n+# 初始化session state\n if 'dishes' not in st.session_state:\n     st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]\n if 'recommendations' not in st.session_state:\n     st.session_state.recommendations = None\n@@ -38,9 +80,9 @@\n def remove_dish(index):\n     if len(st.session_state.dishes) > 1:\n         st.session_state.dishes.pop(index)\n \n-# 表单验证\n+# 提交表单\n def submit_form():\n     required_fields = ['gender', 'age', 'height', 'weight', 'activity_level', 'meal_type']\n     if not all([st.session_state.get(field) for field in required_fields]):\n         st.error(\"请填写完整的个人信息\")\n@@ -53,9 +95,9 @@\n             st.error(f\"菜品 #{i+1} 重量必须大于0\")\n             return False\n     return True\n \n-# 调用后端\n+# 调用后端服务\n def call_backend_service():\n     st.session_state.request_data = {\n         \"info\": {\n             \"性别\": st.session_state.gender,\n@@ -77,13 +119,9 @@\n \n     try:\n         with st.spinner(\"正在分析您的营养需求，请稍候...\"):\n             start_time = time.time()\n-            response = requests.post(\n-                BACKEND_URL,\n-                json=st.session_state.request_data,\n-                timeout=120\n-            )\n+            response = requests.post(BACKEND_URL, json=st.session_state.request_data, timeout=120)\n             end_time = time.time()\n             st.session_state.response_time = end_time - start_time\n \n             if response.status_code == 200:\n@@ -95,104 +133,179 @@\n                     st.error(f\"服务返回错误: {data.get('error', '未知错误')}\")\n             else:\n                 st.error(f\"请求失败, 状态码: {response.status_code}\")\n                 st.error(f\"错误信息: {response.text}\")\n+    except requests.exceptions.Timeout:\n+        st.error(\"请求超时，请稍后再试\")\n+    except requests.exceptions.ConnectionError:\n+        st.error(\"无法连接到后端服务，请检查网络连接\")\n     except Exception as e:\n-        st.error(f\"请求错误: {e}\")\n+        st.error(f\"发生未知错误: {str(e)}\")\n     return False\n \n-# 左侧输入\n+# 左侧栏 - 用户信息输入\n with st.sidebar:\n-    st.header(\"🧑 个人信息\")\n-    st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\")\n-    st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=25)\n-    st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=170.0)\n-    st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=60.0)\n-    st.selectbox(\"活动水平\", [\n-        \"轻活动水平(办公室工作，很少运动)\",\n-        \"中活动水平(每天适量运动)\",\n-        \"重活动水平(体力劳动或高强度训练)\"\n-    ], key=\"activity_level\")\n-    st.selectbox(\"餐别\", [\"早餐\", \"午餐\", \"晚餐\"], key=\"meal_type\")\n+    st.markdown(\"### 🧑 个人信息\")\n+    st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n+    st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n+    st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=175.0, step=1.0)\n+    st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.5)\n+    \n+    # 活动水平映射\n+    activity_options = {\n+        \"轻活动水平(办公室工作，很少运动)\": \"a\",\n+        \"中活动水平(每天适量运动)\": \"b\",\n+        \"重活动水平(体力劳动或高强度训练)\": \"c\"\n+    }\n+    selected_activity_label = st.selectbox(\n+        \"活动水平\",\n+        list(activity_options.keys()),\n+        key=\"activity_level_label\",\n+        index=1\n+    )\n+    # 将选择的值映射为简写形式\n+    st.session_state.activity_level = activity_options[selected_activity_label]\n+    \n+    st.selectbox(\"餐别\", [\"早餐\", \"午餐\", \"晚餐\"], key=\"meal_type\", index=1)\n \n-# 菜品输入部分\n-st.subheader(\"🍽️ 菜品信息\")\n-for i, dish in enumerate(st.session_state.dishes):\n-    col_name, col_weight, col_del = st.columns([3, 2, 1])\n-    with col_name:\n-        name = st.text_input(f\"菜品 #{i+1}\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如：番茄炒蛋\")\n-    with col_weight:\n-        weight = st.number_input(\"重量(g)\", value=dish[\"weight\"], key=f\"dish_weight_{i}\", min_value=1.0, step=1.0)\n-    with col_del:\n-        if i > 0 and st.button(\"删除\", key=f\"del_{i}\"):\n-            remove_dish(i)\n-            st.experimental_rerun()\n-    st.session_state.dishes[i][\"name\"] = name\n-    st.session_state.dishes[i][\"weight\"] = weight\n+# 主内容区\n+main_container = st.container()\n \n-if st.button(\"➕ 添加菜品\"):\n-    add_dish()\n-    st.experimental_rerun()\n+with main_container:\n+    col1, col2 = st.columns([1, 1])\n+    st.markdown(\"### 🍽️ 菜品信息\")\n \n-if st.button(\"生成菜品推荐\"):\n-    if submit_form():\n-        if call_backend_service():\n-            st.success(\"推荐结果已生成！\")\n-        else:\n-            st.session_state.recommendations = None\n+    for i, dish in enumerate(st.session_state.dishes):\n+        col_name, col_weight, col_remove = st.columns([3, 1, 0.5])\n \n-# 推荐结果展示\n-if st.session_state.recommendations:\n-    rec = st.session_state.recommendations\n-    st.markdown(\"---\")\n-    st.subheader(\"📊 推荐结果\")\n-    st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应耗时: {st.session_state.response_time:.2f} 秒\")\n-    st.markdown(f\"**餐别**: {rec.get('餐别', '午餐')}  |  **求解状态**: {rec.get('求解状态', '未知')}\")\n+        with col_name:\n+            name = st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")\n+        with col_weight:\n+            weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)\n+        with col_remove:\n+            if i > 0:\n+                if st.button(\"删除\", key=f\"remove_{i}\"):\n+                    remove_dish(i)\n+                    st.experimental_rerun()\n \n-    tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n+        st.session_state.dishes[i][\"name\"] = name\n+        st.session_state.dishes[i][\"weight\"] = weight\n \n-    with tab1:\n-        for dish in rec.get(\"菜品推荐\", []):\n-            name = dish.get(\"菜品名称\", \"未知\")\n-            weight = dish.get(\"推荐权重\", 0)\n-            reason = dish.get(\"原因\", \"无推荐理由\")\n-            st.markdown(f\"### {name}\")\n-            st.markdown(f\"**推荐权重**: {weight:.2f}\")\n-            st.markdown(f\"**推荐理由**: {reason}\")\n-            with st.expander(\"营养详情\"):\n-                nutrition = dish.get(\"营养值\", {})\n-                for key, value in nutrition.items():\n-                    st.write(f\"{key}: {value}\")\n+    # 添加按钮和生成推荐\n+    st.button(\"➕ 添加菜品\", on_click=add_dish)\n+    if st.button(\"生成菜品推荐\"):\n+        if submit_form():\n+            if call_backend_service():\n+                st.success(\"推荐结果已生成！\")\n+            else:\n+                st.session_state.recommendations = None\n \n-    with tab2:\n-        st.subheader(\"整餐营养摘要\")\n-        nutrition = rec.get(\"整餐营养摘要\", {})\n-        if nutrition:\n-            col1, col2, col3 = st.columns(3)\n-            with col1:\n-                st.metric(\"总能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n-                st.metric(\"总蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n-            with col2:\n-                st.metric(\"总脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n-                st.metric(\"总碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n-            with col3:\n-                st.metric(\"总钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n-                st.metric(\"总维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n+    with col2:\n+        st.markdown(\"### 📊 推荐结果\")\n+        if st.session_state.recommendations:\n+            recommendations = st.session_state.recommendations\n+            st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n+            st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n+            st.markdown(f\"**求解状态**: {recommendations.get('求解状态', '未知')}\")\n+            st.markdown(\"### 菜品推荐\")\n+            tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n \n-            st.markdown(\"### 营养分布图\")\n-            keys = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n-            values = [nutrition.get(k, 0) for k in keys]\n-            df = pd.DataFrame({\"营养素\": keys, \"含量\": values})\n-            st.bar_chart(df.set_index(\"营养素\"))\n+            with tab1:\n+                for dish in recommendations.get(\"菜品推荐\", []):\n+                    weight = dish.get(\"推荐权重\", 0)\n+                    if weight >= 0.7:\n+                        card_class = \"high-weight\"\n+                        recommendation_text = \"强烈推荐\"\n+                    elif weight >= 0.5:\n+                        card_class = \"medium-weight\"\n+                        recommendation_text = \"推荐\"\n+                    elif weight >= 0.3:\n+                        card_class = \"medium-weight\"\n+                        recommendation_text = \"适量食用\"\n+                    else:\n+                        card_class = \"low-weight\"\n+                        recommendation_text = \"少量尝试\"\n \n-            st.markdown(\"### 微量营养素\")\n-            micronutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n-            for k in micronutrients:\n-                v = nutrition.get(k, 0.0)\n-                st.write(f\"**{k}**: {v:.1f}\")\n+                    with st.container():\n+                        st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n+                        st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n+                        st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n+                        st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n+                        with st.expander(\"查看营养详情\"):\n+                            nutrition = dish.get(\"营养值\", {})\n+                            if nutrition:\n+                                col1, col2, col3 = st.columns(3)\n+                                with col1:\n+                                    st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n+                                    st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n+                                with col2:\n+                                    st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n+                                    st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n+                                with col3:\n+                                    st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n+                                    st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n+                            else:\n+                                st.warning(\"无营养数据\")\n+                        st.markdown(\"</div>\", unsafe_allow_html=True)\n+\n+            with tab2:\n+                total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n+                if total_nutrition:\n+                    st.markdown(\"### 整餐营养摘要\")\n+                    col1, col2, col3 = st.columns(3)\n+                    with col1:\n+                        st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n+                        st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n+                    with col2:\n+                        st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n+                        st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n+                    with col3:\n+                        st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n+                        st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n+\n+                    st.markdown(\"### 营养分布\")\n+                    main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n+                    main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n+                    df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n+                    st.bar_chart(df.set_index(\"营养素\"))\n+\n+                    micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n+                    micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n+                    st.markdown(\"### 微量营养素\")\n+                    for nutrient, value in zip(micro_nutrients, micro_values):\n+                        st.markdown(f\"**{nutrient}**: {value:.1f}\")\n+                        max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n+                        percent = min(value / max_value, 1.0) if max_value > 0 else 0\n+                        st.markdown(f\"\"\"\n+                        <div class=\"nutrient-bar\">\n+                            <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n+                        </div>\n+                        <div class=\"nutrient-value\">{value:.1f}</div>\n+                        \"\"\", unsafe_allow_html=True)\n+                else:\n+                    st.warning(\"无整餐营养摘要数据\")\n         else:\n-            st.warning(\"无整餐营养数据\")\n+            st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n \n+# 使用说明\n+st.markdown(\"---\")\n+st.markdown(\"\"\"\n+### 使用说明\n+1. 在左侧填写您的个人信息（性别、年龄、身高、体重等）\n+2. 添加您想评估的菜品（至少一个）\n+3. 点击\"生成菜品推荐\"按钮获取个性化推荐\n+4. 查看右侧的推荐结果，了解每道菜的推荐程度和原因\n+\n+**推荐权重说明**:\n+- **强烈推荐 (权重 ≥ 0.7)**: 营养均衡且符合需求  \n+- **推荐 (0.5 ≤ 权重 < 0.7)**: 营养良好，适合食用  \n+- **适量食用 (0.3 ≤ 权重 < 0.5)**: 可以少量食用  \n+- **少量尝试 (权重 < 0.3)**: 建议本餐避免或少量尝试\n+\"\"\")\n+\n # 调试信息（可选）\n if st.checkbox(\"显示调试信息\"):\n+    st.markdown(\"### 请求数据\")\n     st.json(st.session_state.request_data)\n-    st.json(st.session_state.recommendations)\n+    if st.session_state.recommendations:\n+        st.markdown(\"### 完整响应\")\n+        st.json(st.session_state.recommendations)\n"
                },
                {
                    "date": 1752485195173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,311 +1,311 @@\n-import streamlit as st\n-import requests\n-import time\n-import json\n-import pandas as pd\n-import numpy as np\n-from datetime import datetime\n+# import streamlit as st\n+# import requests\n+# import time\n+# import json\n+# import pandas as pd\n+# import numpy as np\n+# from datetime import datetime\n \n-# 设置页面配置\n-st.set_page_config(\n-    page_title=\"智能菜品推荐系统\",\n-    page_icon=\"🍲\",\n-    layout=\"wide\",\n-    initial_sidebar_state=\"expanded\"\n-)\n+# # 设置页面配置\n+# st.set_page_config(\n+#     page_title=\"智能菜品推荐系统\",\n+#     page_icon=\"🍲\",\n+#     layout=\"wide\",\n+#     initial_sidebar_state=\"expanded\"\n+# )\n \n-# 自定义CSS样式\n-st.markdown(\"\"\"\n-<style>\n-    .recommendation-card {\n-        border: 1px solid #e0e0e0;\n-        border-radius: 12px;\n-        padding: 15px;\n-        margin-bottom: 10px;\n-        background-color: #fafafa;\n-    }\n-    .high-weight {\n-        border-left: 6px solid #4CAF50;\n-    }\n-    .medium-weight {\n-        border-left: 6px solid #FFC107;\n-    }\n-    .low-weight {\n-        border-left: 6px solid #F44336;\n-    }\n-    .nutrient-bar {\n-        height: 10px;\n-        background-color: #f0f0f0;\n-        border-radius: 5px;\n-        overflow: hidden;\n-        margin-bottom: 4px;\n-    }\n-    .nutrient-fill {\n-        height: 100%;\n-        background-color: #4CAF50;\n-    }\n-    .nutrient-value {\n-        font-size: 12px;\n-        margin-bottom: 10px;\n-    }\n-</style>\n-\"\"\", unsafe_allow_html=True)\n+# # 自定义CSS样式\n+# st.markdown(\"\"\"\n+# <style>\n+#     .recommendation-card {\n+#         border: 1px solid #e0e0e0;\n+#         border-radius: 12px;\n+#         padding: 15px;\n+#         margin-bottom: 10px;\n+#         background-color: #fafafa;\n+#     }\n+#     .high-weight {\n+#         border-left: 6px solid #4CAF50;\n+#     }\n+#     .medium-weight {\n+#         border-left: 6px solid #FFC107;\n+#     }\n+#     .low-weight {\n+#         border-left: 6px solid #F44336;\n+#     }\n+#     .nutrient-bar {\n+#         height: 10px;\n+#         background-color: #f0f0f0;\n+#         border-radius: 5px;\n+#         overflow: hidden;\n+#         margin-bottom: 4px;\n+#     }\n+#     .nutrient-fill {\n+#         height: 100%;\n+#         background-color: #4CAF50;\n+#     }\n+#     .nutrient-value {\n+#         font-size: 12px;\n+#         margin-bottom: 10px;\n+#     }\n+# </style>\n+# \"\"\", unsafe_allow_html=True)\n \n-# 应用标题\n-st.markdown(\"\"\"\n-<div class=\"header\">\n-    <h1 style=\"text-align:center; margin:0;\">🍲 智能菜品推荐系统</h1>\n-    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n-</div>\n-\"\"\", unsafe_allow_html=True)\n+# # 应用标题\n+# st.markdown(\"\"\"\n+# <div class=\"header\">\n+#     <h1 style=\"text-align:center; margin:0;\">🍲 智能菜品推荐系统</h1>\n+#     <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n+# </div>\n+# \"\"\", unsafe_allow_html=True)\n \n-# 后端服务URL\n-BACKEND_URL = \"http://192.168.99.55:5000/recommend_dishes\"\n+# # 后端服务URL\n+# BACKEND_URL = \"http://192.168.99.55:5000/recommend_dishes\"\n \n-# 初始化session state\n-if 'dishes' not in st.session_state:\n-    st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]\n-if 'recommendations' not in st.session_state:\n-    st.session_state.recommendations = None\n-if 'request_data' not in st.session_state:\n-    st.session_state.request_data = None\n-if 'response_time' not in st.session_state:\n-    st.session_state.response_time = None\n+# # 初始化session state\n+# if 'dishes' not in st.session_state:\n+#     st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]\n+# if 'recommendations' not in st.session_state:\n+#     st.session_state.recommendations = None\n+# if 'request_data' not in st.session_state:\n+#     st.session_state.request_data = None\n+# if 'response_time' not in st.session_state:\n+#     st.session_state.response_time = None\n \n-# 添加菜品\n-def add_dish():\n-    st.session_state.dishes.append({\"name\": \"\", \"weight\": 100.0})\n+# # 添加菜品\n+# def add_dish():\n+#     st.session_state.dishes.append({\"name\": \"\", \"weight\": 100.0})\n \n-# 删除菜品\n-def remove_dish(index):\n-    if len(st.session_state.dishes) > 1:\n-        st.session_state.dishes.pop(index)\n+# # 删除菜品\n+# def remove_dish(index):\n+#     if len(st.session_state.dishes) > 1:\n+#         st.session_state.dishes.pop(index)\n \n-# 提交表单\n-def submit_form():\n-    required_fields = ['gender', 'age', 'height', 'weight', 'activity_level', 'meal_type']\n-    if not all([st.session_state.get(field) for field in required_fields]):\n-        st.error(\"请填写完整的个人信息\")\n-        return False\n-    for i, dish in enumerate(st.session_state.dishes):\n-        if not dish[\"name\"]:\n-            st.error(f\"菜品 #{i+1} 名称不能为空\")\n-            return False\n-        if dish[\"weight\"] <= 0:\n-            st.error(f\"菜品 #{i+1} 重量必须大于0\")\n-            return False\n-    return True\n+# # 提交表单\n+# def submit_form():\n+#     required_fields = ['gender', 'age', 'height', 'weight', 'activity_level', 'meal_type']\n+#     if not all([st.session_state.get(field) for field in required_fields]):\n+#         st.error(\"请填写完整的个人信息\")\n+#         return False\n+#     for i, dish in enumerate(st.session_state.dishes):\n+#         if not dish[\"name\"]:\n+#             st.error(f\"菜品 #{i+1} 名称不能为空\")\n+#             return False\n+#         if dish[\"weight\"] <= 0:\n+#             st.error(f\"菜品 #{i+1} 重量必须大于0\")\n+#             return False\n+#     return True\n \n-# 调用后端服务\n-def call_backend_service():\n-    st.session_state.request_data = {\n-        \"info\": {\n-            \"性别\": st.session_state.gender,\n-            \"年龄\": st.session_state.age,\n-            \"身高\": st.session_state.height,\n-            \"体重\": st.session_state.weight,\n-            \"activity_level\": st.session_state.activity_level\n-        },\n-        \"data\": {\n-            \"餐别\": st.session_state.meal_type,\n-            \"菜品名称\": [\n-                {\n-                    \"食品名称\": dish[\"name\"],\n-                    \"食品克数\": dish[\"weight\"]\n-                } for dish in st.session_state.dishes\n-            ]\n-        }\n-    }\n+# # 调用后端服务\n+# def call_backend_service():\n+#     st.session_state.request_data = {\n+#         \"info\": {\n+#             \"性别\": st.session_state.gender,\n+#             \"年龄\": st.session_state.age,\n+#             \"身高\": st.session_state.height,\n+#             \"体重\": st.session_state.weight,\n+#             \"activity_level\": st.session_state.activity_level\n+#         },\n+#         \"data\": {\n+#             \"餐别\": st.session_state.meal_type,\n+#             \"菜品名称\": [\n+#                 {\n+#                     \"食品名称\": dish[\"name\"],\n+#                     \"食品克数\": dish[\"weight\"]\n+#                 } for dish in st.session_state.dishes\n+#             ]\n+#         }\n+#     }\n \n-    try:\n-        with st.spinner(\"正在分析您的营养需求，请稍候...\"):\n-            start_time = time.time()\n-            response = requests.post(BACKEND_URL, json=st.session_state.request_data, timeout=120)\n-            end_time = time.time()\n-            st.session_state.response_time = end_time - start_time\n+#     try:\n+#         with st.spinner(\"正在分析您的营养需求，请稍候...\"):\n+#             start_time = time.time()\n+#             response = requests.post(BACKEND_URL, json=st.session_state.request_data, timeout=120)\n+#             end_time = time.time()\n+#             st.session_state.response_time = end_time - start_time\n \n-            if response.status_code == 200:\n-                data = response.json()\n-                if data.get(\"success\"):\n-                    st.session_state.recommendations = data[\"result\"]\n-                    return True\n-                else:\n-                    st.error(f\"服务返回错误: {data.get('error', '未知错误')}\")\n-            else:\n-                st.error(f\"请求失败, 状态码: {response.status_code}\")\n-                st.error(f\"错误信息: {response.text}\")\n-    except requests.exceptions.Timeout:\n-        st.error(\"请求超时，请稍后再试\")\n-    except requests.exceptions.ConnectionError:\n-        st.error(\"无法连接到后端服务，请检查网络连接\")\n-    except Exception as e:\n-        st.error(f\"发生未知错误: {str(e)}\")\n-    return False\n+#             if response.status_code == 200:\n+#                 data = response.json()\n+#                 if data.get(\"success\"):\n+#                     st.session_state.recommendations = data[\"result\"]\n+#                     return True\n+#                 else:\n+#                     st.error(f\"服务返回错误: {data.get('error', '未知错误')}\")\n+#             else:\n+#                 st.error(f\"请求失败, 状态码: {response.status_code}\")\n+#                 st.error(f\"错误信息: {response.text}\")\n+#     except requests.exceptions.Timeout:\n+#         st.error(\"请求超时，请稍后再试\")\n+#     except requests.exceptions.ConnectionError:\n+#         st.error(\"无法连接到后端服务，请检查网络连接\")\n+#     except Exception as e:\n+#         st.error(f\"发生未知错误: {str(e)}\")\n+#     return False\n \n-# 左侧栏 - 用户信息输入\n-with st.sidebar:\n-    st.markdown(\"### 🧑 个人信息\")\n-    st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n-    st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n-    st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=175.0, step=1.0)\n-    st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.5)\n+# # 左侧栏 - 用户信息输入\n+# with st.sidebar:\n+#     st.markdown(\"### 🧑 个人信息\")\n+#     st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n+#     st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n+#     st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=175.0, step=1.0)\n+#     st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.5)\n     \n-    # 活动水平映射\n-    activity_options = {\n-        \"轻活动水平(办公室工作，很少运动)\": \"a\",\n-        \"中活动水平(每天适量运动)\": \"b\",\n-        \"重活动水平(体力劳动或高强度训练)\": \"c\"\n-    }\n-    selected_activity_label = st.selectbox(\n-        \"活动水平\",\n-        list(activity_options.keys()),\n-        key=\"activity_level_label\",\n-        index=1\n-    )\n-    # 将选择的值映射为简写形式\n-    st.session_state.activity_level = activity_options[selected_activity_label]\n+#     # 活动水平映射\n+#     activity_options = {\n+#         \"轻活动水平(办公室工作，很少运动)\": \"a\",\n+#         \"中活动水平(每天适量运动)\": \"b\",\n+#         \"重活动水平(体力劳动或高强度训练)\": \"c\"\n+#     }\n+#     selected_activity_label = st.selectbox(\n+#         \"活动水平\",\n+#         list(activity_options.keys()),\n+#         key=\"activity_level_label\",\n+#         index=1\n+#     )\n+#     # 将选择的值映射为简写形式\n+#     st.session_state.activity_level = activity_options[selected_activity_label]\n     \n-    st.selectbox(\"餐别\", [\"早餐\", \"午餐\", \"晚餐\"], key=\"meal_type\", index=1)\n+#     st.selectbox(\"餐别\", [\"早餐\", \"午餐\", \"晚餐\"], key=\"meal_type\", index=1)\n \n-# 主内容区\n-main_container = st.container()\n+# # 主内容区\n+# main_container = st.container()\n \n-with main_container:\n-    col1, col2 = st.columns([1, 1])\n-    st.markdown(\"### 🍽️ 菜品信息\")\n+# with main_container:\n+#     col1, col2 = st.columns([1, 1])\n+#     st.markdown(\"### 🍽️ 菜品信息\")\n \n-    for i, dish in enumerate(st.session_state.dishes):\n-        col_name, col_weight, col_remove = st.columns([3, 1, 0.5])\n+#     for i, dish in enumerate(st.session_state.dishes):\n+#         col_name, col_weight, col_remove = st.columns([3, 1, 0.5])\n \n-        with col_name:\n-            name = st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")\n-        with col_weight:\n-            weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)\n-        with col_remove:\n-            if i > 0:\n-                if st.button(\"删除\", key=f\"remove_{i}\"):\n-                    remove_dish(i)\n-                    st.experimental_rerun()\n+#         with col_name:\n+#             name = st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")\n+#         with col_weight:\n+#             weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)\n+#         with col_remove:\n+#             if i > 0:\n+#                 if st.button(\"删除\", key=f\"remove_{i}\"):\n+#                     remove_dish(i)\n+#                     st.experimental_rerun()\n \n-        st.session_state.dishes[i][\"name\"] = name\n-        st.session_state.dishes[i][\"weight\"] = weight\n+#         st.session_state.dishes[i][\"name\"] = name\n+#         st.session_state.dishes[i][\"weight\"] = weight\n \n-    # 添加按钮和生成推荐\n-    st.button(\"➕ 添加菜品\", on_click=add_dish)\n-    if st.button(\"生成菜品推荐\"):\n-        if submit_form():\n-            if call_backend_service():\n-                st.success(\"推荐结果已生成！\")\n-            else:\n-                st.session_state.recommendations = None\n+#     # 添加按钮和生成推荐\n+#     st.button(\"➕ 添加菜品\", on_click=add_dish)\n+#     if st.button(\"生成菜品推荐\"):\n+#         if submit_form():\n+#             if call_backend_service():\n+#                 st.success(\"推荐结果已生成！\")\n+#             else:\n+#                 st.session_state.recommendations = None\n \n-    with col2:\n-        st.markdown(\"### 📊 推荐结果\")\n-        if st.session_state.recommendations:\n-            recommendations = st.session_state.recommendations\n-            st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n-            st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n-            st.markdown(f\"**求解状态**: {recommendations.get('求解状态', '未知')}\")\n-            st.markdown(\"### 菜品推荐\")\n-            tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n+#     with col2:\n+#         st.markdown(\"### 📊 推荐结果\")\n+#         if st.session_state.recommendations:\n+#             recommendations = st.session_state.recommendations\n+#             st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n+#             st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n+#             st.markdown(f\"**求解状态**: {recommendations.get('求解状态', '未知')}\")\n+#             st.markdown(\"### 菜品推荐\")\n+#             tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n \n-            with tab1:\n-                for dish in recommendations.get(\"菜品推荐\", []):\n-                    weight = dish.get(\"推荐权重\", 0)\n-                    if weight >= 0.7:\n-                        card_class = \"high-weight\"\n-                        recommendation_text = \"强烈推荐\"\n-                    elif weight >= 0.5:\n-                        card_class = \"medium-weight\"\n-                        recommendation_text = \"推荐\"\n-                    elif weight >= 0.3:\n-                        card_class = \"medium-weight\"\n-                        recommendation_text = \"适量食用\"\n-                    else:\n-                        card_class = \"low-weight\"\n-                        recommendation_text = \"少量尝试\"\n+#             with tab1:\n+#                 for dish in recommendations.get(\"菜品推荐\", []):\n+#                     weight = dish.get(\"推荐权重\", 0)\n+#                     if weight >= 0.7:\n+#                         card_class = \"high-weight\"\n+#                         recommendation_text = \"强烈推荐\"\n+#                     elif weight >= 0.5:\n+#                         card_class = \"medium-weight\"\n+#                         recommendation_text = \"推荐\"\n+#                     elif weight >= 0.3:\n+#                         card_class = \"medium-weight\"\n+#                         recommendation_text = \"适量食用\"\n+#                     else:\n+#                         card_class = \"low-weight\"\n+#                         recommendation_text = \"少量尝试\"\n \n-                    with st.container():\n-                        st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n-                        st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n-                        st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n-                        st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n-                        with st.expander(\"查看营养详情\"):\n-                            nutrition = dish.get(\"营养值\", {})\n-                            if nutrition:\n-                                col1, col2, col3 = st.columns(3)\n-                                with col1:\n-                                    st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n-                                    st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n-                                with col2:\n-                                    st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n-                                    st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n-                                with col3:\n-                                    st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n-                                    st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n-                            else:\n-                                st.warning(\"无营养数据\")\n-                        st.markdown(\"</div>\", unsafe_allow_html=True)\n+#                     with st.container():\n+#                         st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n+#                         st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n+#                         st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n+#                         st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n+#                         with st.expander(\"查看营养详情\"):\n+#                             nutrition = dish.get(\"营养值\", {})\n+#                             if nutrition:\n+#                                 col1, col2, col3 = st.columns(3)\n+#                                 with col1:\n+#                                     st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n+#                                     st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n+#                                 with col2:\n+#                                     st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n+#                                     st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n+#                                 with col3:\n+#                                     st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n+#                                     st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n+#                             else:\n+#                                 st.warning(\"无营养数据\")\n+#                         st.markdown(\"</div>\", unsafe_allow_html=True)\n \n-            with tab2:\n-                total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n-                if total_nutrition:\n-                    st.markdown(\"### 整餐营养摘要\")\n-                    col1, col2, col3 = st.columns(3)\n-                    with col1:\n-                        st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n-                        st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n-                    with col2:\n-                        st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n-                        st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n-                    with col3:\n-                        st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n-                        st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n+#             with tab2:\n+#                 total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n+#                 if total_nutrition:\n+#                     st.markdown(\"### 整餐营养摘要\")\n+#                     col1, col2, col3 = st.columns(3)\n+#                     with col1:\n+#                         st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n+#                         st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n+#                     with col2:\n+#                         st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n+#                         st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n+#                     with col3:\n+#                         st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n+#                         st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n \n-                    st.markdown(\"### 营养分布\")\n-                    main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n-                    main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n-                    df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n-                    st.bar_chart(df.set_index(\"营养素\"))\n+#                     st.markdown(\"### 营养分布\")\n+#                     main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n+#                     main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n+#                     df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n+#                     st.bar_chart(df.set_index(\"营养素\"))\n \n-                    micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n-                    micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n-                    st.markdown(\"### 微量营养素\")\n-                    for nutrient, value in zip(micro_nutrients, micro_values):\n-                        st.markdown(f\"**{nutrient}**: {value:.1f}\")\n-                        max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n-                        percent = min(value / max_value, 1.0) if max_value > 0 else 0\n-                        st.markdown(f\"\"\"\n-                        <div class=\"nutrient-bar\">\n-                            <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n-                        </div>\n-                        <div class=\"nutrient-value\">{value:.1f}</div>\n-                        \"\"\", unsafe_allow_html=True)\n-                else:\n-                    st.warning(\"无整餐营养摘要数据\")\n-        else:\n-            st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n+#                     micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n+#                     micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n+#                     st.markdown(\"### 微量营养素\")\n+#                     for nutrient, value in zip(micro_nutrients, micro_values):\n+#                         st.markdown(f\"**{nutrient}**: {value:.1f}\")\n+#                         max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n+#                         percent = min(value / max_value, 1.0) if max_value > 0 else 0\n+#                         st.markdown(f\"\"\"\n+#                         <div class=\"nutrient-bar\">\n+#                             <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n+#                         </div>\n+#                         <div class=\"nutrient-value\">{value:.1f}</div>\n+#                         \"\"\", unsafe_allow_html=True)\n+#                 else:\n+#                     st.warning(\"无整餐营养摘要数据\")\n+#         else:\n+#             st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n \n-# 使用说明\n-st.markdown(\"---\")\n-st.markdown(\"\"\"\n-### 使用说明\n-1. 在左侧填写您的个人信息（性别、年龄、身高、体重等）\n-2. 添加您想评估的菜品（至少一个）\n-3. 点击\"生成菜品推荐\"按钮获取个性化推荐\n-4. 查看右侧的推荐结果，了解每道菜的推荐程度和原因\n+# # 使用说明\n+# st.markdown(\"---\")\n+# st.markdown(\"\"\"\n+# ### 使用说明\n+# 1. 在左侧填写您的个人信息（性别、年龄、身高、体重等）\n+# 2. 添加您想评估的菜品（至少一个）\n+# 3. 点击\"生成菜品推荐\"按钮获取个性化推荐\n+# 4. 查看右侧的推荐结果，了解每道菜的推荐程度和原因\n \n-**推荐权重说明**:\n-- **强烈推荐 (权重 ≥ 0.7)**: 营养均衡且符合需求  \n-- **推荐 (0.5 ≤ 权重 < 0.7)**: 营养良好，适合食用  \n-- **适量食用 (0.3 ≤ 权重 < 0.5)**: 可以少量食用  \n-- **少量尝试 (权重 < 0.3)**: 建议本餐避免或少量尝试\n-\"\"\")\n+# **推荐权重说明**:\n+# - **强烈推荐 (权重 ≥ 0.7)**: 营养均衡且符合需求  \n+# - **推荐 (0.5 ≤ 权重 < 0.7)**: 营养良好，适合食用  \n+# - **适量食用 (0.3 ≤ 权重 < 0.5)**: 可以少量食用  \n+# - **少量尝试 (权重 < 0.3)**: 建议本餐避免或少量尝试\n+# \"\"\")\n \n-# 调试信息（可选）\n-if st.checkbox(\"显示调试信息\"):\n-    st.markdown(\"### 请求数据\")\n-    st.json(st.session_state.request_data)\n-    if st.session_state.recommendations:\n-        st.markdown(\"### 完整响应\")\n-        st.json(st.session_state.recommendations)\n+# # 调试信息（可选）\n+# if st.checkbox(\"显示调试信息\"):\n+#     st.markdown(\"### 请求数据\")\n+#     st.json(st.session_state.request_data)\n+#     if st.session_state.recommendations:\n+#         st.markdown(\"### 完整响应\")\n+#         st.json(st.session_state.recommendations)\n"
                },
                {
                    "date": 1752485209175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,4 +308,427 @@\n #     st.json(st.session_state.request_data)\n #     if st.session_state.recommendations:\n #         st.markdown(\"### 完整响应\")\n #         st.json(st.session_state.recommendations)\n+import streamlit as st\n+import requests\n+import time\n+import json\n+import pandas as pd\n+import numpy as np\n+from datetime import datetime\n+\n+# 设置页面配置\n+st.set_page_config(\n+    page_title=\"智能菜品推荐系统\",\n+    page_icon=\"🍲\",\n+    layout=\"wide\",\n+    initial_sidebar_state=\"expanded\"\n+)\n+\n+# 自定义CSS样式\n+st.markdown(\"\"\"\n+<style>\n+    .header {\n+        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);\n+        color: white;\n+        padding: 2rem;\n+        border-radius: 0 0 20px 20px;\n+        margin-bottom: 2rem;\n+    }\n+    .recommendation-card {\n+        border: 1px solid #e0e0e0;\n+        border-radius: 12px;\n+        padding: 15px;\n+        margin-bottom: 10px;\n+        background-color: #fafafa;\n+    }\n+    .high-weight {\n+        border-left: 6px solid #4CAF50;\n+    }\n+    .medium-weight {\n+        border-left: 6px solid #FFC107;\n+    }\n+    .low-weight {\n+        border-left: 6px solid #F44336;\n+    }\n+    .nutrient-bar {\n+        height: 10px;\n+        background-color: #f0f0f0;\n+        border-radius: 5px;\n+        overflow: hidden;\n+        margin-bottom: 4px;\n+    }\n+    .nutrient-fill {\n+        height: 100%;\n+        background-color: #4CAF50;\n+    }\n+    .nutrient-value {\n+        font-size: 12px;\n+        margin-bottom: 10px;\n+    }\n+    .nutrient-grid {\n+        display: grid;\n+        grid-template-columns: repeat(3, 1fr);\n+        gap: 15px;\n+        margin-top: 15px;\n+    }\n+    .nutrient-item {\n+        background: #f8f9fa;\n+        border-radius: 8px;\n+        padding: 12px;\n+        text-align: center;\n+        box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n+    }\n+    .nutrient-title {\n+        font-weight: 600;\n+        margin-bottom: 5px;\n+    }\n+    .nutrient-value-display {\n+        font-size: 18px;\n+        font-weight: bold;\n+    }\n+    .nutrient-unit {\n+        font-size: 12px;\n+        color: #666;\n+    }\n+    .dish-row {\n+        display: flex;\n+        margin-bottom: 15px;\n+    }\n+    .dish-name {\n+        flex: 3;\n+        margin-right: 10px;\n+    }\n+    .dish-weight {\n+        flex: 1;\n+        margin-right: 10px;\n+    }\n+    .dish-remove {\n+        flex: 0.5;\n+    }\n+</style>\n+\"\"\", unsafe_allow_html=True)\n+\n+# 应用标题\n+st.markdown(\"\"\"\n+<div class=\"header\">\n+    <h1 style=\"text-align:center; margin:0;\">🍲 智能菜品推荐系统</h1>\n+    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n+</div>\n+\"\"\", unsafe_allow_html=True)\n+\n+# 后端服务URL\n+BACKEND_URL = \"http://192.168.99.55:5000/recommend_dishes\"\n+\n+# 初始化session state\n+if 'dishes' not in st.session_state:\n+    st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]\n+if 'recommendations' not in st.session_state:\n+    st.session_state.recommendations = None\n+if 'request_data' not in st.session_state:\n+    st.session_state.request_data = None\n+if 'response_time' not in st.session_state:\n+    st.session_state.response_time = None\n+\n+# 添加菜品\n+def add_dish():\n+    st.session_state.dishes.append({\"name\": \"\", \"weight\": 100.0})\n+\n+# 删除菜品\n+def remove_dish(index):\n+    if len(st.session_state.dishes) > 1:\n+        st.session_state.dishes.pop(index)\n+        st.experimental_rerun()\n+\n+# 提交表单\n+def submit_form():\n+    required_fields = ['gender', 'age', 'height', 'weight', 'activity_level', 'meal_type']\n+    if not all([st.session_state.get(field) for field in required_fields]):\n+        st.error(\"请填写完整的个人信息\")\n+        return False\n+    for i, dish in enumerate(st.session_state.dishes):\n+        if not dish[\"name\"]:\n+            st.error(f\"菜品 #{i+1} 名称不能为空\")\n+            return False\n+        if dish[\"weight\"] <= 0:\n+            st.error(f\"菜品 #{i+1} 重量必须大于0\")\n+            return False\n+    return True\n+\n+# 调用后端服务\n+def call_backend_service():\n+    st.session_state.request_data = {\n+        \"info\": {\n+            \"性别\": st.session_state.gender,\n+            \"年龄\": st.session_state.age,\n+            \"身高\": st.session_state.height,\n+            \"体重\": st.session_state.weight,\n+            \"activity_level\": st.session_state.activity_level\n+        },\n+        \"data\": {\n+            \"餐别\": st.session_state.meal_type,\n+            \"菜品名称\": [\n+                {\n+                    \"食品名称\": dish[\"name\"],\n+                    \"食品克数\": dish[\"weight\"]\n+                } for dish in st.session_state.dishes\n+            ]\n+        }\n+    }\n+\n+    try:\n+        with st.spinner(\"正在分析您的营养需求，请稍候...\"):\n+            start_time = time.time()\n+            response = requests.post(BACKEND_URL, json=st.session_state.request_data, timeout=120)\n+            end_time = time.time()\n+            st.session_state.response_time = end_time - start_time\n+\n+            if response.status_code == 200:\n+                data = response.json()\n+                if data.get(\"success\"):\n+                    st.session_state.recommendations = data[\"result\"]\n+                    return True\n+                else:\n+                    st.error(f\"服务返回错误: {data.get('error', '未知错误')}\")\n+            else:\n+                st.error(f\"请求失败, 状态码: {response.status_code}\")\n+                st.error(f\"错误信息: {response.text}\")\n+    except requests.exceptions.Timeout:\n+        st.error(\"请求超时，请稍后再试\")\n+    except requests.exceptions.ConnectionError:\n+        st.error(\"无法连接到后端服务，请检查网络连接\")\n+    except Exception as e:\n+        st.error(f\"发生未知错误: {str(e)}\")\n+    return False\n+\n+# 左侧栏 - 用户信息输入\n+with st.sidebar:\n+    st.markdown(\"### 🧑 个人信息\")\n+    st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n+    st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n+    st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=175.0, step=1.0)\n+    st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.1)\n+    \n+    # 活动水平映射\n+    activity_options = {\n+        \"轻活动水平(办公室工作，很少运动)\": \"a\",\n+        \"中活动水平(每天适量运动)\": \"b\",\n+        \"重活动水平(体力劳动或高强度训练)\": \"c\"\n+    }\n+    selected_activity_label = st.selectbox(\n+        \"活动水平\",\n+        list(activity_options.keys()),\n+        key=\"activity_level_label\",\n+        index=1\n+    )\n+    # 将选择的值映射为简写形式\n+    st.session_state.activity_level = activity_options[selected_activity_label]\n+    \n+    st.selectbox(\"餐别\", [\"早餐\", \"午餐\", \"晚餐\"], key=\"meal_type\", index=1)\n+\n+# 主内容区\n+main_container = st.container()\n+\n+with main_container:\n+    col1, col2 = st.columns([1, 1])\n+    \n+    with col1:\n+        st.markdown(\"### 🍽️ 菜品信息\")\n+        \n+        for i, dish in enumerate(st.session_state.dishes):\n+            # 使用HTML/CSS创建类似列的效果\n+            st.markdown(f\"\"\"\n+            <div class=\"dish-row\">\n+                <div class=\"dish-name\">\n+                    {st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")._repr_html_()}\n+                </div>\n+                <div class=\"dish-weight\">\n+                    {st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)._repr_html_()}\n+                </div>\n+                <div class=\"dish-remove\">\n+            \"\"\", unsafe_allow_html=True)\n+            \n+            # 删除按钮（不是第一个菜品时显示）\n+            if i > 0:\n+                st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n+            \n+            st.markdown(\"</div></div>\", unsafe_allow_html=True)\n+        \n+        # 添加菜品按钮\n+        st.button(\"➕ 添加菜品\", on_click=add_dish)\n+        \n+        # 提交按钮\n+        if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n+            if submit_form():\n+                if call_backend_service():\n+                    st.success(\"推荐结果已生成！\")\n+                else:\n+                    st.session_state.recommendations = None\n+    \n+    with col2:\n+        st.markdown(\"### 📊 推荐结果\")\n+        \n+        if st.session_state.recommendations:\n+            recommendations = st.session_state.recommendations\n+            st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n+            st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n+            st.markdown(f\"**求解状态**: {recommendations.get('求解状态', '未知')}\")\n+            st.markdown(\"### 菜品推荐\")\n+            tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n+\n+            with tab1:\n+                for dish in recommendations.get(\"菜品推荐\", []):\n+                    weight = dish.get(\"推荐权重\", 0)\n+                    if weight >= 0.7:\n+                        card_class = \"high-weight\"\n+                        recommendation_text = \"强烈推荐\"\n+                    elif weight >= 0.5:\n+                        card_class = \"medium-weight\"\n+                        recommendation_text = \"推荐\"\n+                    elif weight >= 0.3:\n+                        card_class = \"medium-weight\"\n+                        recommendation_text = \"适量食用\"\n+                    else:\n+                        card_class = \"low-weight\"\n+                        recommendation_text = \"少量尝试\"\n+\n+                    with st.container():\n+                        st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n+                        st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n+                        st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n+                        st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n+                        \n+                        with st.expander(\"查看营养详情\"):\n+                            nutrition = dish.get(\"营养值\", {})\n+                            if nutrition:\n+                                st.markdown(\"\"\"\n+                                <style>\n+                                .nutrient-grid {\n+                                    display: grid;\n+                                    grid-template-columns: repeat(3, 1fr);\n+                                    gap: 15px;\n+                                    margin-top: 15px;\n+                                }\n+                                .nutrient-item {\n+                                    background: #f8f9fa;\n+                                    border-radius: 8px;\n+                                    padding: 12px;\n+                                    text-align: center;\n+                                    box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n+                                }\n+                                .nutrient-title {\n+                                    font-weight: 600;\n+                                    margin-bottom: 5px;\n+                                }\n+                                .nutrient-value-display {\n+                                    font-size: 18px;\n+                                    font-weight: bold;\n+                                }\n+                                .nutrient-unit {\n+                                    font-size: 12px;\n+                                    color: #666;\n+                                }\n+                                </style>\n+                                \"\"\", unsafe_allow_html=True)\n+                                \n+                                st.markdown(f\"\"\"\n+                                <div class=\"nutrient-grid\">\n+                                    <div class=\"nutrient-item\">\n+                                        <div class=\"nutrient-title\">能量</div>\n+                                        <div class=\"nutrient-value-display\">{nutrition.get('能量', 0):.1f}</div>\n+                                        <div class=\"nutrient-unit\">kcal</div>\n+                                    </div>\n+                                    <div class=\"nutrient-item\">\n+                                        <div class=\"nutrient-title\">蛋白质</div>\n+                                        <div class=\"nutrient-value-display\">{nutrition.get('蛋白质', 0):.1f}</div>\n+                                        <div class=\"nutrient-unit\">g</div>\n+                                    </div>\n+                                    <div class=\"nutrient-item\">\n+                                        <div class=\"nutrient-title\">脂肪</div>\n+                                        <div class=\"nutrient-value-display\">{nutrition.get('脂肪', 0):.1f}</div>\n+                                        <div class=\"nutrient-unit\">g</div>\n+                                    </div>\n+                                    <div class=\"nutrient-item\">\n+                                        <div class=\"nutrient-title\">碳水化合物</div>\n+                                        <div class=\"nutrient-value-display\">{nutrition.get('碳水化合物', 0):.1f}</div>\n+                                        <div class=\"nutrient-unit\">g</div>\n+                                    </div>\n+                                    <div class=\"nutrient-item\">\n+                                        <div class=\"nutrient-title\">钠</div>\n+                                        <div class=\"nutrient-value-display\">{nutrition.get('钠', 0):.1f}</div>\n+                                        <div class=\"nutrient-unit\">mg</div>\n+                                    </div>\n+                                    <div class=\"nutrient-item\">\n+                                        <div class=\"nutrient-title\">维生素C</div>\n+                                        <div class=\"nutrient-value-display\">{nutrition.get('维生素C', 0):.1f}</div>\n+                                        <div class=\"nutrient-unit\">mg</div>\n+                                    </div>\n+                                </div>\n+                                \"\"\", unsafe_allow_html=True)\n+                            else:\n+                                st.warning(\"无营养数据\")\n+                        \n+                        st.markdown(\"</div>\", unsafe_allow_html=True)\n+\n+            with tab2:\n+                total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n+                if total_nutrition:\n+                    st.markdown(\"### 整餐营养摘要\")\n+                    col1, col2, col3 = st.columns(3)\n+                    with col1:\n+                        st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n+                        st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n+                    with col2:\n+                        st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n+                        st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n+                    with col3:\n+                        st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n+                        st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n+\n+                    st.markdown(\"### 营养分布\")\n+                    main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n+                    main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n+                    df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n+                    st.bar_chart(df.set_index(\"营养素\"))\n+\n+                    micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n+                    micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n+                    st.markdown(\"### 微量营养素\")\n+                    for nutrient, value in zip(micro_nutrients, micro_values):\n+                        st.markdown(f\"**{nutrient}**: {value:.1f}\")\n+                        max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n+                        percent = min(value / max_value, 1.0) if max_value > 0 else 0\n+                        st.markdown(f\"\"\"\n+                        <div class=\"nutrient-bar\">\n+                            <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n+                        </div>\n+                        <div class=\"nutrient-value\">{value:.1f}</div>\n+                        \"\"\", unsafe_allow_html=True)\n+                else:\n+                    st.warning(\"无整餐营养摘要数据\")\n+        else:\n+            st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n+\n+# 使用说明\n+st.markdown(\"---\")\n+st.markdown(\"\"\"\n+### 使用说明\n+1. 在左侧填写您的个人信息（性别、年龄、身高、体重等）\n+2. 添加您想评估的菜品（至少一个）\n+3. 点击\"生成菜品推荐\"按钮获取个性化推荐\n+4. 查看右侧的推荐结果，了解每道菜的推荐程度和原因\n+\n+**推荐权重说明**:\n+- **强烈推荐 (权重 ≥ 0.7)**: 营养均衡且符合需求  \n+- **推荐 (0.5 ≤ 权重 < 0.7)**: 营养良好，适合食用  \n+- **适量食用 (0.3 ≤ 权重 < 0.5)**: 可以少量食用  \n+- **少量尝试 (权重 < 0.3)**: 建议本餐避免或少量尝试\n+\"\"\")\n+\n+# 调试信息（可选）\n+if st.checkbox(\"显示调试信息\"):\n+    st.markdown(\"### 请求数据\")\n+    st.json(st.session_state.request_data)\n+    if st.session_state.recommendations:\n+        st.markdown(\"### 完整响应\")\n+        st.json(st.session_state.recommendations)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752485225988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,315 +1,4 @@\n-# import streamlit as st\n-# import requests\n-# import time\n-# import json\n-# import pandas as pd\n-# import numpy as np\n-# from datetime import datetime\n-\n-# # 设置页面配置\n-# st.set_page_config(\n-#     page_title=\"智能菜品推荐系统\",\n-#     page_icon=\"🍲\",\n-#     layout=\"wide\",\n-#     initial_sidebar_state=\"expanded\"\n-# )\n-\n-# # 自定义CSS样式\n-# st.markdown(\"\"\"\n-# <style>\n-#     .recommendation-card {\n-#         border: 1px solid #e0e0e0;\n-#         border-radius: 12px;\n-#         padding: 15px;\n-#         margin-bottom: 10px;\n-#         background-color: #fafafa;\n-#     }\n-#     .high-weight {\n-#         border-left: 6px solid #4CAF50;\n-#     }\n-#     .medium-weight {\n-#         border-left: 6px solid #FFC107;\n-#     }\n-#     .low-weight {\n-#         border-left: 6px solid #F44336;\n-#     }\n-#     .nutrient-bar {\n-#         height: 10px;\n-#         background-color: #f0f0f0;\n-#         border-radius: 5px;\n-#         overflow: hidden;\n-#         margin-bottom: 4px;\n-#     }\n-#     .nutrient-fill {\n-#         height: 100%;\n-#         background-color: #4CAF50;\n-#     }\n-#     .nutrient-value {\n-#         font-size: 12px;\n-#         margin-bottom: 10px;\n-#     }\n-# </style>\n-# \"\"\", unsafe_allow_html=True)\n-\n-# # 应用标题\n-# st.markdown(\"\"\"\n-# <div class=\"header\">\n-#     <h1 style=\"text-align:center; margin:0;\">🍲 智能菜品推荐系统</h1>\n-#     <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n-# </div>\n-# \"\"\", unsafe_allow_html=True)\n-\n-# # 后端服务URL\n-# BACKEND_URL = \"http://192.168.99.55:5000/recommend_dishes\"\n-\n-# # 初始化session state\n-# if 'dishes' not in st.session_state:\n-#     st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]\n-# if 'recommendations' not in st.session_state:\n-#     st.session_state.recommendations = None\n-# if 'request_data' not in st.session_state:\n-#     st.session_state.request_data = None\n-# if 'response_time' not in st.session_state:\n-#     st.session_state.response_time = None\n-\n-# # 添加菜品\n-# def add_dish():\n-#     st.session_state.dishes.append({\"name\": \"\", \"weight\": 100.0})\n-\n-# # 删除菜品\n-# def remove_dish(index):\n-#     if len(st.session_state.dishes) > 1:\n-#         st.session_state.dishes.pop(index)\n-\n-# # 提交表单\n-# def submit_form():\n-#     required_fields = ['gender', 'age', 'height', 'weight', 'activity_level', 'meal_type']\n-#     if not all([st.session_state.get(field) for field in required_fields]):\n-#         st.error(\"请填写完整的个人信息\")\n-#         return False\n-#     for i, dish in enumerate(st.session_state.dishes):\n-#         if not dish[\"name\"]:\n-#             st.error(f\"菜品 #{i+1} 名称不能为空\")\n-#             return False\n-#         if dish[\"weight\"] <= 0:\n-#             st.error(f\"菜品 #{i+1} 重量必须大于0\")\n-#             return False\n-#     return True\n-\n-# # 调用后端服务\n-# def call_backend_service():\n-#     st.session_state.request_data = {\n-#         \"info\": {\n-#             \"性别\": st.session_state.gender,\n-#             \"年龄\": st.session_state.age,\n-#             \"身高\": st.session_state.height,\n-#             \"体重\": st.session_state.weight,\n-#             \"activity_level\": st.session_state.activity_level\n-#         },\n-#         \"data\": {\n-#             \"餐别\": st.session_state.meal_type,\n-#             \"菜品名称\": [\n-#                 {\n-#                     \"食品名称\": dish[\"name\"],\n-#                     \"食品克数\": dish[\"weight\"]\n-#                 } for dish in st.session_state.dishes\n-#             ]\n-#         }\n-#     }\n-\n-#     try:\n-#         with st.spinner(\"正在分析您的营养需求，请稍候...\"):\n-#             start_time = time.time()\n-#             response = requests.post(BACKEND_URL, json=st.session_state.request_data, timeout=120)\n-#             end_time = time.time()\n-#             st.session_state.response_time = end_time - start_time\n-\n-#             if response.status_code == 200:\n-#                 data = response.json()\n-#                 if data.get(\"success\"):\n-#                     st.session_state.recommendations = data[\"result\"]\n-#                     return True\n-#                 else:\n-#                     st.error(f\"服务返回错误: {data.get('error', '未知错误')}\")\n-#             else:\n-#                 st.error(f\"请求失败, 状态码: {response.status_code}\")\n-#                 st.error(f\"错误信息: {response.text}\")\n-#     except requests.exceptions.Timeout:\n-#         st.error(\"请求超时，请稍后再试\")\n-#     except requests.exceptions.ConnectionError:\n-#         st.error(\"无法连接到后端服务，请检查网络连接\")\n-#     except Exception as e:\n-#         st.error(f\"发生未知错误: {str(e)}\")\n-#     return False\n-\n-# # 左侧栏 - 用户信息输入\n-# with st.sidebar:\n-#     st.markdown(\"### 🧑 个人信息\")\n-#     st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n-#     st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n-#     st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=175.0, step=1.0)\n-#     st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.5)\n-    \n-#     # 活动水平映射\n-#     activity_options = {\n-#         \"轻活动水平(办公室工作，很少运动)\": \"a\",\n-#         \"中活动水平(每天适量运动)\": \"b\",\n-#         \"重活动水平(体力劳动或高强度训练)\": \"c\"\n-#     }\n-#     selected_activity_label = st.selectbox(\n-#         \"活动水平\",\n-#         list(activity_options.keys()),\n-#         key=\"activity_level_label\",\n-#         index=1\n-#     )\n-#     # 将选择的值映射为简写形式\n-#     st.session_state.activity_level = activity_options[selected_activity_label]\n-    \n-#     st.selectbox(\"餐别\", [\"早餐\", \"午餐\", \"晚餐\"], key=\"meal_type\", index=1)\n-\n-# # 主内容区\n-# main_container = st.container()\n-\n-# with main_container:\n-#     col1, col2 = st.columns([1, 1])\n-#     st.markdown(\"### 🍽️ 菜品信息\")\n-\n-#     for i, dish in enumerate(st.session_state.dishes):\n-#         col_name, col_weight, col_remove = st.columns([3, 1, 0.5])\n-\n-#         with col_name:\n-#             name = st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")\n-#         with col_weight:\n-#             weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)\n-#         with col_remove:\n-#             if i > 0:\n-#                 if st.button(\"删除\", key=f\"remove_{i}\"):\n-#                     remove_dish(i)\n-#                     st.experimental_rerun()\n-\n-#         st.session_state.dishes[i][\"name\"] = name\n-#         st.session_state.dishes[i][\"weight\"] = weight\n-\n-#     # 添加按钮和生成推荐\n-#     st.button(\"➕ 添加菜品\", on_click=add_dish)\n-#     if st.button(\"生成菜品推荐\"):\n-#         if submit_form():\n-#             if call_backend_service():\n-#                 st.success(\"推荐结果已生成！\")\n-#             else:\n-#                 st.session_state.recommendations = None\n-\n-#     with col2:\n-#         st.markdown(\"### 📊 推荐结果\")\n-#         if st.session_state.recommendations:\n-#             recommendations = st.session_state.recommendations\n-#             st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n-#             st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n-#             st.markdown(f\"**求解状态**: {recommendations.get('求解状态', '未知')}\")\n-#             st.markdown(\"### 菜品推荐\")\n-#             tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n-\n-#             with tab1:\n-#                 for dish in recommendations.get(\"菜品推荐\", []):\n-#                     weight = dish.get(\"推荐权重\", 0)\n-#                     if weight >= 0.7:\n-#                         card_class = \"high-weight\"\n-#                         recommendation_text = \"强烈推荐\"\n-#                     elif weight >= 0.5:\n-#                         card_class = \"medium-weight\"\n-#                         recommendation_text = \"推荐\"\n-#                     elif weight >= 0.3:\n-#                         card_class = \"medium-weight\"\n-#                         recommendation_text = \"适量食用\"\n-#                     else:\n-#                         card_class = \"low-weight\"\n-#                         recommendation_text = \"少量尝试\"\n-\n-#                     with st.container():\n-#                         st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n-#                         st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n-#                         st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n-#                         st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n-#                         with st.expander(\"查看营养详情\"):\n-#                             nutrition = dish.get(\"营养值\", {})\n-#                             if nutrition:\n-#                                 col1, col2, col3 = st.columns(3)\n-#                                 with col1:\n-#                                     st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n-#                                     st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n-#                                 with col2:\n-#                                     st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n-#                                     st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n-#                                 with col3:\n-#                                     st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n-#                                     st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n-#                             else:\n-#                                 st.warning(\"无营养数据\")\n-#                         st.markdown(\"</div>\", unsafe_allow_html=True)\n-\n-#             with tab2:\n-#                 total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n-#                 if total_nutrition:\n-#                     st.markdown(\"### 整餐营养摘要\")\n-#                     col1, col2, col3 = st.columns(3)\n-#                     with col1:\n-#                         st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n-#                         st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n-#                     with col2:\n-#                         st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n-#                         st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n-#                     with col3:\n-#                         st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n-#                         st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n-\n-#                     st.markdown(\"### 营养分布\")\n-#                     main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n-#                     main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n-#                     df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n-#                     st.bar_chart(df.set_index(\"营养素\"))\n-\n-#                     micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n-#                     micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n-#                     st.markdown(\"### 微量营养素\")\n-#                     for nutrient, value in zip(micro_nutrients, micro_values):\n-#                         st.markdown(f\"**{nutrient}**: {value:.1f}\")\n-#                         max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n-#                         percent = min(value / max_value, 1.0) if max_value > 0 else 0\n-#                         st.markdown(f\"\"\"\n-#                         <div class=\"nutrient-bar\">\n-#                             <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n-#                         </div>\n-#                         <div class=\"nutrient-value\">{value:.1f}</div>\n-#                         \"\"\", unsafe_allow_html=True)\n-#                 else:\n-#                     st.warning(\"无整餐营养摘要数据\")\n-#         else:\n-#             st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n-\n-# # 使用说明\n-# st.markdown(\"---\")\n-# st.markdown(\"\"\"\n-# ### 使用说明\n-# 1. 在左侧填写您的个人信息（性别、年龄、身高、体重等）\n-# 2. 添加您想评估的菜品（至少一个）\n-# 3. 点击\"生成菜品推荐\"按钮获取个性化推荐\n-# 4. 查看右侧的推荐结果，了解每道菜的推荐程度和原因\n-\n-# **推荐权重说明**:\n-# - **强烈推荐 (权重 ≥ 0.7)**: 营养均衡且符合需求  \n-# - **推荐 (0.5 ≤ 权重 < 0.7)**: 营养良好，适合食用  \n-# - **适量食用 (0.3 ≤ 权重 < 0.5)**: 可以少量食用  \n-# - **少量尝试 (权重 < 0.3)**: 建议本餐避免或少量尝试\n-# \"\"\")\n-\n-# # 调试信息（可选）\n-# if st.checkbox(\"显示调试信息\"):\n-#     st.markdown(\"### 请求数据\")\n-#     st.json(st.session_state.request_data)\n-#     if st.session_state.recommendations:\n-#         st.markdown(\"### 完整响应\")\n-#         st.json(st.session_state.recommendations)\n import streamlit as st\n import requests\n import time\n import json\n@@ -327,15 +16,8 @@\n \n # 自定义CSS样式\n st.markdown(\"\"\"\n <style>\n-    .header {\n-        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);\n-        color: white;\n-        padding: 2rem;\n-        border-radius: 0 0 20px 20px;\n-        margin-bottom: 2rem;\n-    }\n     .recommendation-card {\n         border: 1px solid #e0e0e0;\n         border-radius: 12px;\n         padding: 15px;\n@@ -365,48 +47,8 @@\n     .nutrient-value {\n         font-size: 12px;\n         margin-bottom: 10px;\n     }\n-    .nutrient-grid {\n-        display: grid;\n-        grid-template-columns: repeat(3, 1fr);\n-        gap: 15px;\n-        margin-top: 15px;\n-    }\n-    .nutrient-item {\n-        background: #f8f9fa;\n-        border-radius: 8px;\n-        padding: 12px;\n-        text-align: center;\n-        box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n-    }\n-    .nutrient-title {\n-        font-weight: 600;\n-        margin-bottom: 5px;\n-    }\n-    .nutrient-value-display {\n-        font-size: 18px;\n-        font-weight: bold;\n-    }\n-    .nutrient-unit {\n-        font-size: 12px;\n-        color: #666;\n-    }\n-    .dish-row {\n-        display: flex;\n-        margin-bottom: 15px;\n-    }\n-    .dish-name {\n-        flex: 3;\n-        margin-right: 10px;\n-    }\n-    .dish-weight {\n-        flex: 1;\n-        margin-right: 10px;\n-    }\n-    .dish-remove {\n-        flex: 0.5;\n-    }\n </style>\n \"\"\", unsafe_allow_html=True)\n \n # 应用标题\n@@ -437,9 +79,8 @@\n # 删除菜品\n def remove_dish(index):\n     if len(st.session_state.dishes) > 1:\n         st.session_state.dishes.pop(index)\n-        st.experimental_rerun()\n \n # 提交表单\n def submit_form():\n     required_fields = ['gender', 'age', 'height', 'weight', 'activity_level', 'meal_type']\n@@ -506,9 +147,9 @@\n     st.markdown(\"### 🧑 个人信息\")\n     st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n     st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n     st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=175.0, step=1.0)\n-    st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.1)\n+    st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.5)\n     \n     # 活动水平映射\n     activity_options = {\n         \"轻活动水平(办公室工作，很少运动)\": \"a\",\n@@ -530,45 +171,37 @@\n main_container = st.container()\n \n with main_container:\n     col1, col2 = st.columns([1, 1])\n-    \n-    with col1:\n-        st.markdown(\"### 🍽️ 菜品信息\")\n-        \n-        for i, dish in enumerate(st.session_state.dishes):\n-            # 使用HTML/CSS创建类似列的效果\n-            st.markdown(f\"\"\"\n-            <div class=\"dish-row\">\n-                <div class=\"dish-name\">\n-                    {st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")._repr_html_()}\n-                </div>\n-                <div class=\"dish-weight\">\n-                    {st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)._repr_html_()}\n-                </div>\n-                <div class=\"dish-remove\">\n-            \"\"\", unsafe_allow_html=True)\n-            \n-            # 删除按钮（不是第一个菜品时显示）\n+    st.markdown(\"### 🍽️ 菜品信息\")\n+\n+    for i, dish in enumerate(st.session_state.dishes):\n+        col_name, col_weight, col_remove = st.columns([3, 1, 0.5])\n+\n+        with col_name:\n+            name = st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")\n+        with col_weight:\n+            weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)\n+        with col_remove:\n             if i > 0:\n-                st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n-            \n-            st.markdown(\"</div></div>\", unsafe_allow_html=True)\n-        \n-        # 添加菜品按钮\n-        st.button(\"➕ 添加菜品\", on_click=add_dish)\n-        \n-        # 提交按钮\n-        if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n-            if submit_form():\n-                if call_backend_service():\n-                    st.success(\"推荐结果已生成！\")\n-                else:\n-                    st.session_state.recommendations = None\n-    \n+                if st.button(\"删除\", key=f\"remove_{i}\"):\n+                    remove_dish(i)\n+                    st.experimental_rerun()\n+\n+        st.session_state.dishes[i][\"name\"] = name\n+        st.session_state.dishes[i][\"weight\"] = weight\n+\n+    # 添加按钮和生成推荐\n+    st.button(\"➕ 添加菜品\", on_click=add_dish)\n+    if st.button(\"生成菜品推荐\"):\n+        if submit_form():\n+            if call_backend_service():\n+                st.success(\"推荐结果已生成！\")\n+            else:\n+                st.session_state.recommendations = None\n+\n     with col2:\n         st.markdown(\"### 📊 推荐结果\")\n-        \n         if st.session_state.recommendations:\n             recommendations = st.session_state.recommendations\n             st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n             st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n@@ -596,79 +229,23 @@\n                         st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n                         st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n                         st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n                         st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n-                        \n                         with st.expander(\"查看营养详情\"):\n                             nutrition = dish.get(\"营养值\", {})\n                             if nutrition:\n-                                st.markdown(\"\"\"\n-                                <style>\n-                                .nutrient-grid {\n-                                    display: grid;\n-                                    grid-template-columns: repeat(3, 1fr);\n-                                    gap: 15px;\n-                                    margin-top: 15px;\n-                                }\n-                                .nutrient-item {\n-                                    background: #f8f9fa;\n-                                    border-radius: 8px;\n-                                    padding: 12px;\n-                                    text-align: center;\n-                                    box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n-                                }\n-                                .nutrient-title {\n-                                    font-weight: 600;\n-                                    margin-bottom: 5px;\n-                                }\n-                                .nutrient-value-display {\n-                                    font-size: 18px;\n-                                    font-weight: bold;\n-                                }\n-                                .nutrient-unit {\n-                                    font-size: 12px;\n-                                    color: #666;\n-                                }\n-                                </style>\n-                                \"\"\", unsafe_allow_html=True)\n-                                \n-                                st.markdown(f\"\"\"\n-                                <div class=\"nutrient-grid\">\n-                                    <div class=\"nutrient-item\">\n-                                        <div class=\"nutrient-title\">能量</div>\n-                                        <div class=\"nutrient-value-display\">{nutrition.get('能量', 0):.1f}</div>\n-                                        <div class=\"nutrient-unit\">kcal</div>\n-                                    </div>\n-                                    <div class=\"nutrient-item\">\n-                                        <div class=\"nutrient-title\">蛋白质</div>\n-                                        <div class=\"nutrient-value-display\">{nutrition.get('蛋白质', 0):.1f}</div>\n-                                        <div class=\"nutrient-unit\">g</div>\n-                                    </div>\n-                                    <div class=\"nutrient-item\">\n-                                        <div class=\"nutrient-title\">脂肪</div>\n-                                        <div class=\"nutrient-value-display\">{nutrition.get('脂肪', 0):.1f}</div>\n-                                        <div class=\"nutrient-unit\">g</div>\n-                                    </div>\n-                                    <div class=\"nutrient-item\">\n-                                        <div class=\"nutrient-title\">碳水化合物</div>\n-                                        <div class=\"nutrient-value-display\">{nutrition.get('碳水化合物', 0):.1f}</div>\n-                                        <div class=\"nutrient-unit\">g</div>\n-                                    </div>\n-                                    <div class=\"nutrient-item\">\n-                                        <div class=\"nutrient-title\">钠</div>\n-                                        <div class=\"nutrient-value-display\">{nutrition.get('钠', 0):.1f}</div>\n-                                        <div class=\"nutrient-unit\">mg</div>\n-                                    </div>\n-                                    <div class=\"nutrient-item\">\n-                                        <div class=\"nutrient-title\">维生素C</div>\n-                                        <div class=\"nutrient-value-display\">{nutrition.get('维生素C', 0):.1f}</div>\n-                                        <div class=\"nutrient-unit\">mg</div>\n-                                    </div>\n-                                </div>\n-                                \"\"\", unsafe_allow_html=True)\n+                                col1, col2, col3 = st.columns(3)\n+                                with col1:\n+                                    st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n+                                    st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n+                                with col2:\n+                                    st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n+                                    st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n+                                with col3:\n+                                    st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n+                                    st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n                             else:\n                                 st.warning(\"无营养数据\")\n-                        \n                         st.markdown(\"</div>\", unsafe_allow_html=True)\n \n             with tab2:\n                 total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n@@ -730,5 +307,5 @@\n     st.markdown(\"### 请求数据\")\n     st.json(st.session_state.request_data)\n     if st.session_state.recommendations:\n         st.markdown(\"### 完整响应\")\n-        st.json(st.session_state.recommendations)\n\\ No newline at end of file\n+        st.json(st.session_state.recommendations)\n"
                },
                {
                    "date": 1752544284449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,14 @@\n         border-radius: 12px;\n         padding: 15px;\n         margin-bottom: 10px;\n         background-color: #fafafa;\n+        transition: transform 0.2s, box-shadow 0.2s;\n     }\n+    .recommendation-card:hover {\n+        transform: translateY(-3px);\n+        box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n+    }\n     .high-weight {\n         border-left: 6px solid #4CAF50;\n     }\n     .medium-weight {\n@@ -42,13 +47,26 @@\n     }\n     .nutrient-fill {\n         height: 100%;\n         background-color: #4CAF50;\n+        transition: width 0.5s;\n     }\n     .nutrient-value {\n         font-size: 12px;\n         margin-bottom: 10px;\n     }\n+    .nutrition-range {\n+        font-size: 12px;\n+        color: #666;\n+        margin-top: -5px;\n+    }\n+    .summary-card {\n+        background: linear-gradient(145deg, #f5f5f5, #e0e0e0);\n+        border-radius: 10px;\n+        padding: 15px;\n+        margin-bottom: 15px;\n+        box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n+    }\n </style>\n \"\"\", unsafe_allow_html=True)\n \n # 应用标题\n@@ -61,8 +79,26 @@\n \n # 后端服务URL\n BACKEND_URL = \"http://192.168.99.55:5000/recommend_dishes\"\n \n+# 营养单位映射\n+NUTRIENT_UNITS = {\n+    \"能量\": \"kcal\",\n+    \"蛋白质\": \"g\",\n+    \"脂肪\": \"g\",\n+    \"碳水化合物\": \"g\",\n+    \"钠\": \"mg\",\n+    \"钙\": \"mg\",\n+    \"铁\": \"mg\",\n+    \"维生素C\": \"mg\",\n+    \"维生素A\": \"μg\",\n+    \"维生素B1\": \"mg\",\n+    \"维生素B2\": \"mg\",\n+    \"烟酸\": \"mg\",\n+    \"锌\": \"mg\",\n+    \"膳食纤维\": \"g\"\n+}\n+\n # 初始化session state\n if 'dishes' not in st.session_state:\n     st.session_state.dishes = [{\"name\": \"\", \"weight\": 100.0}]\n if 'recommendations' not in st.session_state:\n@@ -70,8 +106,10 @@\n if 'request_data' not in st.session_state:\n     st.session_state.request_data = None\n if 'response_time' not in st.session_state:\n     st.session_state.response_time = None\n+if 'selected_dish' not in st.session_state:\n+    st.session_state.selected_dish = None\n \n # 添加菜品\n def add_dish():\n     st.session_state.dishes.append({\"name\": \"\", \"weight\": 100.0})\n@@ -80,11 +118,18 @@\n def remove_dish(index):\n     if len(st.session_state.dishes) > 1:\n         st.session_state.dishes.pop(index)\n \n+# 活动水平映射\n+ACTIVITY_MAPPING = {\n+    \"轻活动水平(办公室工作，很少运动)\": \"a\",\n+    \"中活动水平(每天适量运动)\": \"b\",\n+    \"重活动水平(体力劳动或高强度训练)\": \"c\"\n+}\n+\n # 提交表单\n def submit_form():\n-    required_fields = ['gender', 'age', 'height', 'weight', 'activity_level', 'meal_type']\n+    required_fields = ['gender', 'age', 'height', 'weight', 'activity_level_label', 'meal_type']\n     if not all([st.session_state.get(field) for field in required_fields]):\n         st.error(\"请填写完整的个人信息\")\n         return False\n     for i, dish in enumerate(st.session_state.dishes):\n@@ -97,15 +142,18 @@\n     return True\n \n # 调用后端服务\n def call_backend_service():\n+    # 映射活动水平为简写形式\n+    activity_level = ACTIVITY_MAPPING[st.session_state.activity_level_label]\n+    \n     st.session_state.request_data = {\n         \"info\": {\n             \"性别\": st.session_state.gender,\n             \"年龄\": st.session_state.age,\n             \"身高\": st.session_state.height,\n             \"体重\": st.session_state.weight,\n-            \"activity_level\": st.session_state.activity_level\n+            \"activity_level\": activity_level\n         },\n         \"data\": {\n             \"餐别\": st.session_state.meal_type,\n             \"菜品名称\": [\n@@ -141,171 +189,356 @@\n     except Exception as e:\n         st.error(f\"发生未知错误: {str(e)}\")\n     return False\n \n+# 渲染营养需求卡\n+def render_nutrition_card(title, value, range_value, unit):\n+    if isinstance(range_value, tuple) or isinstance(range_value, list):\n+        range_str = f\"{range_value[0]:.0f}-{range_value[1]:.0f}{unit}\"\n+    else:\n+        range_str = f\"{range_value:.0f}{unit}\"\n+    \n+    return f\"\"\"\n+    <div class=\"summary-card\">\n+        <h4>{title}</h4>\n+        <div class=\"nutrient-bar\">\n+            <div class=\"nutrient-fill\" style=\"width: {min(value / (range_value[1] if isinstance(range_value, tuple) else range_value), 1) * 100}%\"></div>\n+        </div>\n+        <div class=\"nutrient-value\">当前: {value:.0f}{unit} <span class=\"nutrition-range\">需求: {range_str}</span></div>\n+    </div>\n+    \"\"\"\n+\n # 左侧栏 - 用户信息输入\n with st.sidebar:\n     st.markdown(\"### 🧑 个人信息\")\n     st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n     st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n     st.number_input(\"身高 (cm)\", min_value=50.0, max_value=250.0, key=\"height\", value=175.0, step=1.0)\n     st.number_input(\"体重 (kg)\", min_value=10.0, max_value=200.0, key=\"weight\", value=65.5, step=0.5)\n     \n-    # 活动水平映射\n-    activity_options = {\n-        \"轻活动水平(办公室工作，很少运动)\": \"a\",\n-        \"中活动水平(每天适量运动)\": \"b\",\n-        \"重活动水平(体力劳动或高强度训练)\": \"c\"\n-    }\n     selected_activity_label = st.selectbox(\n         \"活动水平\",\n-        list(activity_options.keys()),\n+        list(ACTIVITY_MAPPING.keys()),\n         key=\"activity_level_label\",\n         index=1\n     )\n-    # 将选择的值映射为简写形式\n-    st.session_state.activity_level = activity_options[selected_activity_label]\n     \n     st.selectbox(\"餐别\", [\"早餐\", \"午餐\", \"晚餐\"], key=\"meal_type\", index=1)\n \n # 主内容区\n main_container = st.container()\n \n with main_container:\n     col1, col2 = st.columns([1, 1])\n-    st.markdown(\"### 🍽️ 菜品信息\")\n+    \n+    with col1:\n+        st.markdown(\"### 🍽️ 菜品信息\")\n+        for i, dish in enumerate(st.session_state.dishes):\n+            cols = st.columns([0.5, 3, 1, 1.2])\n+            \n+            with cols[0]:\n+                st.write(f\"#{i+1}\")\n+            with cols[1]:\n+                name = st.text_input(f\"菜品名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\", label_visibility=\"collapsed\")\n+            with cols[2]:\n+                weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0, label_visibility=\"collapsed\")\n+            with cols[3]:\n+                if i > 0:\n+                    if st.button(\"❌ 删除\", key=f\"remove_{i}\", use_container_width=True):\n+                        remove_dish(i)\n+                        st.rerun()\n \n-    for i, dish in enumerate(st.session_state.dishes):\n-        col_name, col_weight, col_remove = st.columns([3, 1, 0.5])\n+            st.session_state.dishes[i][\"name\"] = name\n+            st.session_state.dishes[i][\"weight\"] = weight\n \n-        with col_name:\n-            name = st.text_input(f\"菜品 #{i+1} 名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\")\n-        with col_weight:\n-            weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0)\n-        with col_remove:\n-            if i > 0:\n-                if st.button(\"删除\", key=f\"remove_{i}\"):\n-                    remove_dish(i)\n-                    st.experimental_rerun()\n+        # 添加按钮和生成推荐\n+        st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n+        if st.button(\"✨ 生成菜品推荐\", type=\"primary\", use_container_width=True):\n+            if submit_form():\n+                if call_backend_service():\n+                    st.toast(\"推荐结果已生成！\", icon=\"✅\")\n+                else:\n+                    st.session_state.recommendations = None\n+                    st.toast(\"推荐生成失败，请检查错误信息\", icon=\"⚠️\")\n \n-        st.session_state.dishes[i][\"name\"] = name\n-        st.session_state.dishes[i][\"weight\"] = weight\n-\n-    # 添加按钮和生成推荐\n-    st.button(\"➕ 添加菜品\", on_click=add_dish)\n-    if st.button(\"生成菜品推荐\"):\n-        if submit_form():\n-            if call_backend_service():\n-                st.success(\"推荐结果已生成！\")\n-            else:\n-                st.session_state.recommendations = None\n-\n+# 推荐结果显示\n+if st.session_state.recommendations:\n+    recommendations = st.session_state.recommendations\n     with col2:\n         st.markdown(\"### 📊 推荐结果\")\n-        if st.session_state.recommendations:\n-            recommendations = st.session_state.recommendations\n-            st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n-            st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n-            st.markdown(f\"**求解状态**: {recommendations.get('求解状态', '未知')}\")\n-            st.markdown(\"### 菜品推荐\")\n-            tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n-\n-            with tab1:\n-                for dish in recommendations.get(\"菜品推荐\", []):\n-                    weight = dish.get(\"推荐权重\", 0)\n-                    if weight >= 0.7:\n-                        card_class = \"high-weight\"\n-                        recommendation_text = \"强烈推荐\"\n-                    elif weight >= 0.5:\n-                        card_class = \"medium-weight\"\n-                        recommendation_text = \"推荐\"\n-                    elif weight >= 0.3:\n-                        card_class = \"medium-weight\"\n-                        recommendation_text = \"适量食用\"\n-                    else:\n-                        card_class = \"low-weight\"\n-                        recommendation_text = \"少量尝试\"\n-\n-                    with st.container():\n-                        st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n-                        st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n-                        st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n-                        st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n-                        with st.expander(\"查看营养详情\"):\n-                            nutrition = dish.get(\"营养值\", {})\n-                            if nutrition:\n-                                col1, col2, col3 = st.columns(3)\n-                                with col1:\n-                                    st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n-                                    st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n-                                with col2:\n-                                    st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n-                                    st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n-                                with col3:\n-                                    st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n-                                    st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n-                            else:\n-                                st.warning(\"无营养数据\")\n-                        st.markdown(\"</div>\", unsafe_allow_html=True)\n-\n-            with tab2:\n-                total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n-                if total_nutrition:\n-                    st.markdown(\"### 整餐营养摘要\")\n-                    col1, col2, col3 = st.columns(3)\n-                    with col1:\n-                        st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n-                        st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n-                    with col2:\n-                        st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n-                        st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n-                    with col3:\n-                        st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n-                        st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n-\n-                    st.markdown(\"### 营养分布\")\n-                    main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n-                    main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n-                    df = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n-                    st.bar_chart(df.set_index(\"营养素\"))\n-\n-                    micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n-                    micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n-                    st.markdown(\"### 微量营养素\")\n-                    for nutrient, value in zip(micro_nutrients, micro_values):\n-                        st.markdown(f\"**{nutrient}**: {value:.1f}\")\n-                        max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n-                        percent = min(value / max_value, 1.0) if max_value > 0 else 0\n-                        st.markdown(f\"\"\"\n-                        <div class=\"nutrient-bar\">\n-                            <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n-                        </div>\n-                        <div class=\"nutrient-value\">{value:.1f}</div>\n-                        \"\"\", unsafe_allow_html=True)\n+        st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n+        \n+        # 基本信息卡片\n+        with st.expander(\"📋 基本信息摘要\", expanded=True):\n+            col_summary1, col_summary2 = st.columns(2)\n+            with col_summary1:\n+                st.metric(\"餐别\", recommendations.get(\"餐别\", \"午餐\"))\n+                st.metric(\"状态\", recommendations.get(\"求解状态\", \"未知\"))\n+            with col_summary2:\n+                st.metric(\"活动水平\", st.session_state.activity_level_label)\n+                st.metric(\"能量需求范围\", \n+                         f\"{recommendations.get('用户营养需求', {}).get('能量', [0,0])[0]:.0f}-\"\n+                         f\"{recommendations.get('用户营养需求', {}).get('能量', [0,0])[1]:.0f} kcal\")\n+        \n+        tab_rec, tab_nutrition, tab_details = st.tabs([\"菜品推荐\", \"营养分析\", \"详情数据\"])\n+        \n+        with tab_rec:\n+            st.markdown(\"#### 📋 菜品推荐列表\")\n+            \n+            # 排序：按权重降序\n+            sorted_dishes = sorted(recommendations.get(\"菜品推荐\", []), \n+                                  key=lambda x: x.get(\"推荐权重\", 0), \n+                                  reverse=True)\n+            \n+            for dish in sorted_dishes:\n+                weight = dish.get(\"推荐权重\", 0)\n+                if weight >= 0.7:\n+                    card_class = \"high-weight\"\n+                    recommendation_text = \"强烈推荐\"\n+                elif weight >= 0.5:\n+                    card_class = \"medium-weight\"\n+                    recommendation_text = \"推荐\"\n+                elif weight >= 0.3:\n+                    card_class = \"medium-weight\"\n+                    recommendation_text = \"适量食用\"\n                 else:\n-                    st.warning(\"无整餐营养摘要数据\")\n-        else:\n-            st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n+                    card_class = \"low-weight\"\n+                    recommendation_text = \"少量尝试\"\n+                \n+                with st.container():\n+                    st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n+                    \n+                    cols = st.columns([3, 2])\n+                    with cols[0]:\n+                        st.markdown(f\"#### 🍲 {dish.get('菜品名称', '未知菜品')}\")\n+                        st.markdown(f\"**推荐指数**: {weight:.2f} ({recommendation_text})\")\n+                    with cols[1]:\n+                        st.progress(min(weight, 1.0), text=f\"{recommendation_text}\")\n+                    \n+                    st.markdown(f\"##### 🧠 推荐理由\")\n+                    st.caption(f\"{dish.get('原因', '暂无推荐理由')}\")\n+                    \n+                    nutrition = dish.get(\"营养值\", {})\n+                    if nutrition:\n+                        with st.expander(\"📊 营养成分分析\", expanded=False):\n+                            st.markdown(\"**主要营养素**\")\n+                            col_nut1, col_nut2, col_nut3 = st.columns(3)\n+                            with col_nut1:\n+                                st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n+                                st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n+                            with col_nut2:\n+                                st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n+                                st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n+                            with col_nut3:\n+                                st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n+                                st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n+                    \n+                    st.markdown(\"</div>\", unsafe_allow_html=True)\n+        \n+        with tab_nutrition:\n+            st.markdown(\"#### 📊 营养分析\")\n+            \n+            user_needs = recommendations.get(\"用户营养需求\", {})\n+            total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n+            \n+            if total_nutrition and user_needs:\n+                st.markdown(\"##### 🍽️ 整餐营养摘要\")\n+                col_sum1, col_sum2 = st.columns(2)\n+                \n+                with col_sum1:\n+                    st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\", \n+                             delta=f\"{recommendations['用户营养需求'].get('能量', [0,0])[0]:.1f}-{recommendations['用户营养需求'].get('能量', [0,0])[1]:.1f} kcal\",\n+                             delta_color=\"off\")\n+                    st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\",\n+                             delta=f\"{recommendations['用户营养需求'].get('蛋白质', [0,0])[0]:.1f}-{recommendations['用户营养需求'].get('蛋白质', [0,0])[1]:.1f} g\",\n+                             delta_color=\"off\")\n+                with col_sum2:\n+                    st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\",\n+                             delta=f\"{recommendations['用户营养需求'].get('脂肪', [0,0])[0]:.1f}-{recommendations['用户营养需求'].get('脂肪', [0,0])[1]:.1f} g\",\n+                             delta_color=\"off\")\n+                    st.metric(\"总碳水\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\",\n+                             delta=f\"{recommendations['用户营养需求'].get('碳水化合物', [0,0])[0]:.1f}-{recommendations['用户营养需求'].get('碳水化合物', [0,0])[1]:.1f} g\",\n+                             delta_color=\"off\")\n+                \n+                st.markdown(\"---\")\n+                st.markdown(\"##### 📈 营养素满足情况\")\n+                \n+                # 宏量营养素分析\n+                st.markdown(\"**宏量营养素**\")\n+                col_macronutrients = st.columns(2)\n+                with col_macronutrients[0]:\n+                    st.markdown(render_nutrition_card(\n+                        \"能量\", \n+                        total_nutrition.get('能量', 0),\n+                        user_needs.get('能量', [0, 0]),\n+                        \"kcal\"\n+                    ), unsafe_allow_html=True)\n+                    \n+                    st.markdown(render_nutrition_card(\n+                        \"蛋白质\", \n+                        total_nutrition.get('蛋白质', 0),\n+                        user_needs.get('蛋白质', [0, 0]),\n+                        \"g\"\n+                    ), unsafe_allow_html=True)\n+                    \n+                with col_macronutrients[1]:\n+                    st.markdown(render_nutrition_card(\n+                        \"脂肪\", \n+                        total_nutrition.get('脂肪', 0),\n+                        user_needs.get('脂肪', [0, 0]),\n+                        \"g\"\n+                    ), unsafe_allow_html=True)\n+                    \n+                    st.markdown(render_nutrition_card(\n+                        \"碳水化合物\", \n+                        total_nutrition.get('碳水化合物', 0),\n+                        user_needs.get('碳水化合物', [0, 0]),\n+                        \"g\"\n+                    ), unsafe_allow_html=True)\n+                \n+                # 微量营养素分析\n+                st.markdown(\"**微量营养素**\")\n+                col_micronutrients = st.columns(2)\n+                with col_micronutrients[0]:\n+                    st.markdown(render_nutrition_card(\n+                        \"钠\", \n+                        total_nutrition.get('钠', 0),\n+                        user_needs.get('钠', [0, 0]) if isinstance(user_needs.get('钠'), (list, tuple)) else user_needs.get('钠', 0),\n+                        \"mg\"\n+                    ), unsafe_allow_html=True)\n+                    \n+                    st.markdown(render_nutrition_card(\n+                        \"钙\", \n+                        total_nutrition.get('钙', 0),\n+                        user_needs.get('钙', [0, 0]) if isinstance(user_needs.get('钙'), (list, tuple)) else user_needs.get('钙', 0),\n+                        \"mg\"\n+                    ), unsafe_allow_html=True)\n+                    \n+                with col_micronutrients[1]:\n+                    st.markdown(render_nutrition_card(\n+                        \"铁\", \n+                        total_nutrition.get('铁', 0),\n+                        user_needs.get('铁', [0, 0]) if isinstance(user_needs.get('铁'), (list, tuple)) else user_needs.get('铁', 0),\n+                        \"mg\"\n+                    ), unsafe_allow_html=True)\n+                    \n+                    st.markdown(render_nutrition_card(\n+                        \"维生素C\", \n+                        total_nutrition.get('维生素C', 0),\n+                        user_needs.get('维生素C', [0, 0]) if isinstance(user_needs.get('维生素C'), (list, tuple)) else user_needs.get('维生素C', 0),\n+                        \"mg\"\n+                    ), unsafe_allow_html=True)\n+                \n+                # 营养分布图表\n+                st.markdown(\"---\")\n+                st.markdown(\"##### 📊 营养分布\")\n+                \n+                main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n+                main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n+                df_main = pd.DataFrame({\n+                    \"营养素\": main_nutrients,\n+                    \"含量\": main_values,\n+                    \"单位\": [NUTRIENT_UNITS.get(n, \"\") for n in main_nutrients]\n+                })\n+                st.bar_chart(df_main.set_index(\"营养素\")[\"含量\"])\n+                \n+                st.markdown(\"**维生素分布**\")\n+                vitamin_nutrients = [\"维生素A\", \"维生素B1\", \"维生素B2\", \"维生素C\"]\n+                vitamin_values = [total_nutrition.get(n, 0) for n in vitamin_nutrients]\n+                df_vitamin = pd.DataFrame({\n+                    \"维生素\": vitamin_nutrients,\n+                    \"含量\": vitamin_values,\n+                    \"单位\": [NUTRIENT_UNITS.get(n, \"\") for n in vitamin_nutrients]\n+                })\n+                st.bar_chart(df_vitamin.set_index(\"维生素\")[\"含量\"])\n+                \n+                st.markdown(\"**矿物质分布**\")\n+                mineral_nutrients = [\"钠\", \"钙\", \"铁\", \"锌\"]\n+                mineral_values = [total_nutrition.get(n, 0) for n in mineral_nutrients]\n+                df_mineral = pd.DataFrame({\n+                    \"矿物质\": mineral_nutrients,\n+                    \"含量\": mineral_values,\n+                    \"单位\": [NUTRIENT_UNITS.get(n, \"\") for n in mineral_nutrients]\n+                })\n+                st.bar_chart(df_mineral.set_index(\"矿物质\")[\"含量\"])\n+        \n+        with tab_details:\n+            st.markdown(\"#### 📊 详情数据\")\n+            \n+            st.markdown(\"##### 用户需求营养范围\")\n+            if recommendations.get(\"用户营养需求\"):\n+                df_needs = pd.DataFrame.from_dict(recommendations[\"用户营养需求\"], orient=\"index\", columns=[\"值\"])\n+                st.dataframe(df_needs, use_container_width=True)\n+            else:\n+                st.warning(\"无用户营养需求数据\")\n+            \n+            st.markdown(\"##### 菜品推荐详情\")\n+            if recommendations.get(\"菜品推荐\"):\n+                dish_data = []\n+                for dish in recommendations[\"菜品推荐\"]:\n+                    dish_data.append({\n+                        \"菜品名称\": dish.get(\"菜品名称\", \"\"),\n+                        \"推荐权重\": dish.get(\"推荐权重\", 0),\n+                        \"原因\": dish.get(\"原因\", \"\")\n+                    })\n+                st.dataframe(pd.DataFrame(dish_data), use_container_width=True)\n+            else:\n+                st.warning(\"无菜品推荐数据\")\n+            \n+            st.markdown(\"##### 整餐营养摘要\")\n+            if recommendations.get(\"整餐营养摘要\"):\n+                df_total = pd.DataFrame.from_dict(recommendations[\"整餐营养摘要\"], orient=\"index\", columns=[\"值\"])\n+                st.dataframe(df_total, use_container_width=True)\n+            else:\n+                st.warning(\"无整餐营养摘要数据\")\n+else:\n+    with col2:\n+        st.info(\"✨ 请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n+        st.image(\"https://via.placeholder.com/600x300?text=等待推荐结果\", use_column_width=True)\n \n # 使用说明\n st.markdown(\"---\")\n-st.markdown(\"\"\"\n-### 使用说明\n-1. 在左侧填写您的个人信息（性别、年龄、身高、体重等）\n-2. 添加您想评估的菜品（至少一个）\n-3. 点击\"生成菜品推荐\"按钮获取个性化推荐\n-4. 查看右侧的推荐结果，了解每道菜的推荐程度和原因\n+with st.expander(\"ℹ️ 使用说明\"):\n+    st.markdown(\"\"\"\n+    ### 使用指南\n+    \n+    1. **填写个人信息**：\n+       - 在左侧栏完整填写您的性别、年龄、身高、体重等信息\n+       - 选择您的活动水平（根据日常活动强度）\n+       - 选择要规划的餐别（早餐/午餐/晚餐）\n+    \n+    2. **添加菜品信息**：\n+       - 输入菜品名称（如：番茄炒蛋）\n+       - 设置菜品份量（克数）\n+       - 可添加多个菜品进行混合分析\n+    \n+    3. **生成推荐**：\n+       - 点击\"✨ 生成菜品推荐\"按钮进行分析\n+       - 系统将根据您的个人情况和菜品特点生成推荐\n+    \n+    4. **查看结果**：\n+       - 在右侧推荐结果区域查看分析结果\n+       - 通过三个标签页分别查看：\n+         - 📋 菜品推荐 - 各菜品推荐指数及原因\n+         - 📊 营养分析 - 整餐营养构成及需求满足情况\n+         - 📊 详情数据 - 详细的数据表格\n+    \"\"\")\n+    \n+    st.markdown(\"### 推荐权重说明\")\n+    cols_legend = st.columns(4)\n+    with cols_legend[0]:\n+        st.markdown(\"<div class='recommendation-card high-weight'><b>强烈推荐</b><br>(权重 ≥ 0.7)</div>\", unsafe_allow_html=True)\n+    with cols_legend[1]:\n+        st.markdown(\"<div class='recommendation-card medium-weight'><b>推荐</b><br>(0.5 ≤ 权重 < 0.7)</div>\", unsafe_allow_html=True)\n+    with cols_legend[2]:\n+        st.markdown(\"<div class='recommendation-card medium-weight'><b>适量食用</b><br>(0.3 ≤ 权重 < 0.5)</div>\", unsafe_allow_html=True)\n+    with cols_legend[3]:\n+        st.markdown(\"<div class='recommendation-card low-weight'><b>少量尝试</b><br>(权重 < 0.3)</div>\", unsafe_allow_html=True)\n \n-**推荐权重说明**:\n-- **强烈推荐 (权重 ≥ 0.7)**: 营养均衡且符合需求  \n-- **推荐 (0.5 ≤ 权重 < 0.7)**: 营养良好，适合食用  \n-- **适量食用 (0.3 ≤ 权重 < 0.5)**: 可以少量食用  \n-- **少量尝试 (权重 < 0.3)**: 建议本餐避免或少量尝试\n-\"\"\")\n-\n # 调试信息（可选）\n if st.checkbox(\"显示调试信息\"):\n     st.markdown(\"### 请求数据\")\n     st.json(st.session_state.request_data)\n+    \n     if st.session_state.recommendations:\n         st.markdown(\"### 完整响应\")\n-        st.json(st.session_state.recommendations)\n+        st.json(st.session_state.recommendations)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752544651032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,16 @@\n         padding: 15px;\n         margin-bottom: 15px;\n         box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n     }\n+    .dish-input-row {\n+        display: flex;\n+        margin-bottom: 15px;\n+        align-items: center;\n+    }\n+    .dish-input-cell {\n+        margin-right: 15px;\n+    }\n </style>\n \"\"\", unsafe_allow_html=True)\n \n # 应用标题\n@@ -117,8 +125,9 @@\n # 删除菜品\n def remove_dish(index):\n     if len(st.session_state.dishes) > 1:\n         st.session_state.dishes.pop(index)\n+        st.rerun()\n \n # 活动水平映射\n ACTIVITY_MAPPING = {\n     \"轻活动水平(办公室工作，很少运动)\": \"a\",\n@@ -191,9 +200,9 @@\n     return False\n \n # 渲染营养需求卡\n def render_nutrition_card(title, value, range_value, unit):\n-    if isinstance(range_value, tuple) or isinstance(range_value, list):\n+    if isinstance(range_value, (tuple, list)):\n         range_str = f\"{range_value[0]:.0f}-{range_value[1]:.0f}{unit}\"\n     else:\n         range_str = f\"{range_value:.0f}{unit}\"\n     \n@@ -231,26 +240,30 @@\n     col1, col2 = st.columns([1, 1])\n     \n     with col1:\n         st.markdown(\"### 🍽️ 菜品信息\")\n+        \n         for i, dish in enumerate(st.session_state.dishes):\n-            cols = st.columns([0.5, 3, 1, 1.2])\n+            st.markdown(f\"**菜品 #{i+1}**\")\n+            st.text_input(\"菜品名称\", value=dish[\"name\"], \n+                         key=f\"dish_name_{i}\", \n+                         placeholder=\"例如: 番茄炒蛋\",\n+                         label_visibility=\"collapsed\")\n             \n-            with cols[0]:\n-                st.write(f\"#{i+1}\")\n-            with cols[1]:\n-                name = st.text_input(f\"菜品名称\", value=dish[\"name\"], key=f\"dish_name_{i}\", placeholder=\"例如: 番茄炒蛋\", label_visibility=\"collapsed\")\n-            with cols[2]:\n-                weight = st.number_input(\"重量 (g)\", min_value=1.0, value=dish[\"weight\"], key=f\"dish_weight_{i}\", step=1.0, label_visibility=\"collapsed\")\n-            with cols[3]:\n+            weight_col, remove_col = st.columns([3, 1])\n+            with weight_col:\n+                dish[\"weight\"] = st.number_input(\"重量 (g)\", min_value=1.0, \n+                                               value=dish[\"weight\"], \n+                                               key=f\"dish_weight_{i}\", \n+                                               step=1.0)\n+            with remove_col:\n                 if i > 0:\n-                    if st.button(\"❌ 删除\", key=f\"remove_{i}\", use_container_width=True):\n+                    if st.button(\"删除\", key=f\"remove_{i}\", use_container_width=True):\n                         remove_dish(i)\n-                        st.rerun()\n-\n-            st.session_state.dishes[i][\"name\"] = name\n-            st.session_state.dishes[i][\"weight\"] = weight\n-\n+                        st.stop()\n+            \n+            st.divider()\n+        \n         # 添加按钮和生成推荐\n         st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n         if st.button(\"✨ 生成菜品推荐\", type=\"primary\", use_container_width=True):\n             if submit_form():\n@@ -492,9 +505,8 @@\n                 st.warning(\"无整餐营养摘要数据\")\n else:\n     with col2:\n         st.info(\"✨ 请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n-        st.image(\"https://via.placeholder.com/600x300?text=等待推荐结果\", use_column_width=True)\n \n # 使用说明\n st.markdown(\"---\")\n with st.expander(\"ℹ️ 使用说明\"):\n"
                },
                {
                    "date": 1752544817737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,11 @@\n     }\n     .dish-input-cell {\n         margin-right: 15px;\n     }\n+    .hidden-label label {\n+        display: none;\n+    }\n </style>\n \"\"\", unsafe_allow_html=True)\n \n # 应用标题\n@@ -125,9 +128,8 @@\n # 删除菜品\n def remove_dish(index):\n     if len(st.session_state.dishes) > 1:\n         st.session_state.dishes.pop(index)\n-        st.rerun()\n \n # 活动水平映射\n ACTIVITY_MAPPING = {\n     \"轻活动水平(办公室工作，很少运动)\": \"a\",\n@@ -198,25 +200,8 @@\n     except Exception as e:\n         st.error(f\"发生未知错误: {str(e)}\")\n     return False\n \n-# 渲染营养需求卡\n-def render_nutrition_card(title, value, range_value, unit):\n-    if isinstance(range_value, (tuple, list)):\n-        range_str = f\"{range_value[0]:.0f}-{range_value[1]:.0f}{unit}\"\n-    else:\n-        range_str = f\"{range_value:.0f}{unit}\"\n-    \n-    return f\"\"\"\n-    <div class=\"summary-card\">\n-        <h4>{title}</h4>\n-        <div class=\"nutrient-bar\">\n-            <div class=\"nutrient-fill\" style=\"width: {min(value / (range_value[1] if isinstance(range_value, tuple) else range_value), 1) * 100}%\"></div>\n-        </div>\n-        <div class=\"nutrient-value\">当前: {value:.0f}{unit} <span class=\"nutrition-range\">需求: {range_str}</span></div>\n-    </div>\n-    \"\"\"\n-\n # 左侧栏 - 用户信息输入\n with st.sidebar:\n     st.markdown(\"### 🧑 个人信息\")\n     st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n@@ -243,24 +228,34 @@\n         st.markdown(\"### 🍽️ 菜品信息\")\n         \n         for i, dish in enumerate(st.session_state.dishes):\n             st.markdown(f\"**菜品 #{i+1}**\")\n-            st.text_input(\"菜品名称\", value=dish[\"name\"], \n-                         key=f\"dish_name_{i}\", \n-                         placeholder=\"例如: 番茄炒蛋\",\n-                         label_visibility=\"collapsed\")\n             \n+            # 使用CSS隐藏标签而不是label_visibility参数\n+            st.markdown('<div class=\"hidden-label\">', unsafe_allow_html=True)\n+            dish[\"name\"] = st.text_input(\n+                \"菜品名称\", \n+                value=dish[\"name\"], \n+                key=f\"dish_name_{i}\", \n+                placeholder=\"例如: 番茄炒蛋\"\n+            )\n+            st.markdown('</div>', unsafe_allow_html=True)\n+            \n+            # 重量输入和删除按钮\n             weight_col, remove_col = st.columns([3, 1])\n             with weight_col:\n-                dish[\"weight\"] = st.number_input(\"重量 (g)\", min_value=1.0, \n-                                               value=dish[\"weight\"], \n-                                               key=f\"dish_weight_{i}\", \n-                                               step=1.0)\n+                dish[\"weight\"] = st.number_input(\n+                    \"重量 (g)\", \n+                    min_value=1.0, \n+                    value=dish[\"weight\"], \n+                    key=f\"dish_weight_{i}\", \n+                    step=1.0\n+                )\n             with remove_col:\n                 if i > 0:\n                     if st.button(\"删除\", key=f\"remove_{i}\", use_container_width=True):\n                         remove_dish(i)\n-                        st.stop()\n+                        st.experimental_rerun()\n             \n             st.divider()\n         \n         # 添加按钮和生成推荐\n@@ -287,11 +282,15 @@\n                 st.metric(\"餐别\", recommendations.get(\"餐别\", \"午餐\"))\n                 st.metric(\"状态\", recommendations.get(\"求解状态\", \"未知\"))\n             with col_summary2:\n                 st.metric(\"活动水平\", st.session_state.activity_level_label)\n-                st.metric(\"能量需求范围\", \n-                         f\"{recommendations.get('用户营养需求', {}).get('能量', [0,0])[0]:.0f}-\"\n-                         f\"{recommendations.get('用户营养需求', {}).get('能量', [0,0])[1]:.0f} kcal\")\n+                # 确保能处理各种格式的能量需求\n+                energy_needs = recommendations.get('用户营养需求', {}).get('能量', [0,0])\n+                if isinstance(energy_needs, (tuple, list)) and len(energy_needs) == 2:\n+                    energy_range = f\"{energy_needs[0]:.0f}-{energy_needs[1]:.0f} kcal\"\n+                else:\n+                    energy_range = \"未知\"\n+                st.metric(\"能量需求范围\", energy_range)\n         \n         tab_rec, tab_nutrition, tab_details = st.tabs([\"菜品推荐\", \"营养分析\", \"详情数据\"])\n         \n         with tab_rec:\n@@ -357,20 +356,51 @@\n                 st.markdown(\"##### 🍽️ 整餐营养摘要\")\n                 col_sum1, col_sum2 = st.columns(2)\n                 \n                 with col_sum1:\n+                    # 处理能量需求格式\n+                    energy_needs = user_needs.get('能量', [0,0])\n+                    if isinstance(energy_needs, (tuple, list)) and len(energy_needs) == 2:\n+                        energy_range = f\"{energy_needs[0]:.0f}-{energy_needs[1]:.0f} kcal\"\n+                    else:\n+                        energy_range = \"未知\"\n+                    \n                     st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\", \n-                             delta=f\"{recommendations['用户营养需求'].get('能量', [0,0])[0]:.1f}-{recommendations['用户营养需求'].get('能量', [0,0])[1]:.1f} kcal\",\n+                             delta=energy_range,\n                              delta_color=\"off\")\n+                    \n+                    # 处理蛋白质需求格式\n+                    protein_needs = user_needs.get('蛋白质', [0,0])\n+                    if isinstance(protein_needs, (tuple, list)) and len(protein_needs) == 2:\n+                        protein_range = f\"{protein_needs[0]:.0f}-{protein_needs[1]:.0f} g\"\n+                    else:\n+                        protein_range = \"未知\"\n+                    \n                     st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\",\n-                             delta=f\"{recommendations['用户营养需求'].get('蛋白质', [0,0])[0]:.1f}-{recommendations['用户营养需求'].get('蛋白质', [0,0])[1]:.1f} g\",\n+                             delta=protein_range,\n                              delta_color=\"off\")\n+                \n                 with col_sum2:\n+                    # 处理脂肪需求格式\n+                    fat_needs = user_needs.get('脂肪', [0,0])\n+                    if isinstance(fat_needs, (tuple, list)) and len(fat_needs) == 2:\n+                        fat_range = f\"{fat_needs[0]:.0f}-{fat_needs[1]:.0f} g\"\n+                    else:\n+                        fat_range = \"未知\"\n+                    \n                     st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\",\n-                             delta=f\"{recommendations['用户营养需求'].get('脂肪', [0,0])[0]:.1f}-{recommendations['用户营养需求'].get('脂肪', [0,0])[1]:.1f} g\",\n+                             delta=fat_range,\n                              delta_color=\"off\")\n+                    \n+                    # 处理碳水化合物需求格式\n+                    carb_needs = user_needs.get('碳水化合物', [0,0])\n+                    if isinstance(carb_needs, (tuple, list)) and len(carb_needs) == 2:\n+                        carb_range = f\"{carb_needs[0]:.0f}-{carb_needs[1]:.0f} g\"\n+                    else:\n+                        carb_range = \"未知\"\n+                    \n                     st.metric(\"总碳水\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\",\n-                             delta=f\"{recommendations['用户营养需求'].get('碳水化合物', [0,0])[0]:.1f}-{recommendations['用户营养需求'].get('碳水化合物', [0,0])[1]:.1f} g\",\n+                             delta=carb_range,\n                              delta_color=\"off\")\n                 \n                 st.markdown(\"---\")\n                 st.markdown(\"##### 📈 营养素满足情况\")\n@@ -378,69 +408,41 @@\n                 # 宏量营养素分析\n                 st.markdown(\"**宏量营养素**\")\n                 col_macronutrients = st.columns(2)\n                 with col_macronutrients[0]:\n-                    st.markdown(render_nutrition_card(\n-                        \"能量\", \n-                        total_nutrition.get('能量', 0),\n-                        user_needs.get('能量', [0, 0]),\n-                        \"kcal\"\n-                    ), unsafe_allow_html=True)\n+                    st.markdown(\"**能量**\")\n+                    st.metric(\"摄入量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n+                    st.metric(\"需求范围\", energy_range)\n                     \n-                    st.markdown(render_nutrition_card(\n-                        \"蛋白质\", \n-                        total_nutrition.get('蛋白质', 0),\n-                        user_needs.get('蛋白质', [0, 0]),\n-                        \"g\"\n-                    ), unsafe_allow_html=True)\n+                    st.markdown(\"**蛋白质**\")\n+                    st.metric(\"摄入量\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n+                    st.metric(\"需求范围\", protein_range)\n                     \n                 with col_macronutrients[1]:\n-                    st.markdown(render_nutrition_card(\n-                        \"脂肪\", \n-                        total_nutrition.get('脂肪', 0),\n-                        user_needs.get('脂肪', [0, 0]),\n-                        \"g\"\n-                    ), unsafe_allow_html=True)\n+                    st.markdown(\"**脂肪**\")\n+                    st.metric(\"摄入量\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n+                    st.metric(\"需求范围\", fat_range)\n                     \n-                    st.markdown(render_nutrition_card(\n-                        \"碳水化合物\", \n-                        total_nutrition.get('碳水化合物', 0),\n-                        user_needs.get('碳水化合物', [0, 0]),\n-                        \"g\"\n-                    ), unsafe_allow_html=True)\n+                    st.markdown(\"**碳水化合物**\")\n+                    st.metric(\"摄入量\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n+                    st.metric(\"需求范围\", carb_range)\n                 \n                 # 微量营养素分析\n                 st.markdown(\"**微量营养素**\")\n                 col_micronutrients = st.columns(2)\n                 with col_micronutrients[0]:\n-                    st.markdown(render_nutrition_card(\n-                        \"钠\", \n-                        total_nutrition.get('钠', 0),\n-                        user_needs.get('钠', [0, 0]) if isinstance(user_needs.get('钠'), (list, tuple)) else user_needs.get('钠', 0),\n-                        \"mg\"\n-                    ), unsafe_allow_html=True)\n+                    st.markdown(\"**钠**\")\n+                    st.metric(\"摄入量\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n                     \n-                    st.markdown(render_nutrition_card(\n-                        \"钙\", \n-                        total_nutrition.get('钙', 0),\n-                        user_needs.get('钙', [0, 0]) if isinstance(user_needs.get('钙'), (list, tuple)) else user_needs.get('钙', 0),\n-                        \"mg\"\n-                    ), unsafe_allow_html=True)\n+                    st.markdown(\"**钙**\")\n+                    st.metric(\"摄入量\", f\"{total_nutrition.get('钙', 0):.1f} mg\")\n                     \n                 with col_micronutrients[1]:\n-                    st.markdown(render_nutrition_card(\n-                        \"铁\", \n-                        total_nutrition.get('铁', 0),\n-                        user_needs.get('铁', [0, 0]) if isinstance(user_needs.get('铁'), (list, tuple)) else user_needs.get('铁', 0),\n-                        \"mg\"\n-                    ), unsafe_allow_html=True)\n+                    st.markdown(\"**铁**\")\n+                    st.metric(\"摄入量\", f\"{total_nutrition.get('铁', 0):.1f} mg\")\n                     \n-                    st.markdown(render_nutrition_card(\n-                        \"维生素C\", \n-                        total_nutrition.get('维生素C', 0),\n-                        user_needs.get('维生素C', [0, 0]) if isinstance(user_needs.get('维生素C'), (list, tuple)) else user_needs.get('维生素C', 0),\n-                        \"mg\"\n-                    ), unsafe_allow_html=True)\n+                    st.markdown(\"**维生素C**\")\n+                    st.metric(\"摄入量\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n                 \n                 # 营养分布图表\n                 st.markdown(\"---\")\n                 st.markdown(\"##### 📊 营养分布\")\n"
                },
                {
                    "date": 1752546370161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,337 +218,197 @@\n     \n     st.selectbox(\"餐别\", [\"早餐\", \"午餐\", \"晚餐\"], key=\"meal_type\", index=1)\n \n # 主内容区\n-main_container = st.container()\n+st.markdown(\"### 🍽️ 菜品信息\")\n \n-with main_container:\n-    col1, col2 = st.columns([1, 1])\n+# 菜品输入部分 - 避免嵌套列\n+for i, dish in enumerate(st.session_state.dishes):\n+    st.markdown(f\"**菜品 #{i+1}**\")\n     \n+    # 菜品名称输入\n+    dish[\"name\"] = st.text_input(\n+        f\"菜品名称 #{i+1}\", \n+        value=dish[\"name\"], \n+        key=f\"dish_name_{i}\", \n+        placeholder=\"例如: 番茄炒蛋\"\n+    )\n+    \n+    # 重量输入和删除按钮 - 使用水平布局但避免嵌套列\n+    col1, col2 = st.beta_columns([3, 1])\n     with col1:\n-        st.markdown(\"### 🍽️ 菜品信息\")\n-        \n-        for i, dish in enumerate(st.session_state.dishes):\n-            st.markdown(f\"**菜品 #{i+1}**\")\n-            \n-            # 使用CSS隐藏标签而不是label_visibility参数\n-            st.markdown('<div class=\"hidden-label\">', unsafe_allow_html=True)\n-            dish[\"name\"] = st.text_input(\n-                \"菜品名称\", \n-                value=dish[\"name\"], \n-                key=f\"dish_name_{i}\", \n-                placeholder=\"例如: 番茄炒蛋\"\n-            )\n-            st.markdown('</div>', unsafe_allow_html=True)\n-            \n-            # 重量输入和删除按钮\n-            weight_col, remove_col = st.columns([3, 1])\n-            with weight_col:\n-                dish[\"weight\"] = st.number_input(\n-                    \"重量 (g)\", \n-                    min_value=1.0, \n-                    value=dish[\"weight\"], \n-                    key=f\"dish_weight_{i}\", \n-                    step=1.0\n-                )\n-            with remove_col:\n-                if i > 0:\n-                    if st.button(\"删除\", key=f\"remove_{i}\", use_container_width=True):\n-                        remove_dish(i)\n-                        st.experimental_rerun()\n-            \n-            st.divider()\n-        \n-        # 添加按钮和生成推荐\n-        st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n-        if st.button(\"✨ 生成菜品推荐\", type=\"primary\", use_container_width=True):\n-            if submit_form():\n-                if call_backend_service():\n-                    st.toast(\"推荐结果已生成！\", icon=\"✅\")\n-                else:\n-                    st.session_state.recommendations = None\n-                    st.toast(\"推荐生成失败，请检查错误信息\", icon=\"⚠️\")\n+        dish[\"weight\"] = st.number_input(\n+            \"重量 (g)\", \n+            min_value=1.0, \n+            value=dish[\"weight\"], \n+            key=f\"dish_weight_{i}\", \n+            step=1.0\n+        )\n+    with col2:\n+        if i > 0:\n+            if st.button(\"删除\", key=f\"remove_{i}\"):\n+                remove_dish(i)\n+                st.experimental_rerun()\n+    \n+    st.markdown(\"---\")\n \n-# 推荐结果显示\n+# 添加按钮和生成推荐\n+st.button(\"➕ 添加菜品\", on_click=add_dish)\n+if st.button(\"✨ 生成菜品推荐\", key=\"generate_recommendation\"):\n+    if submit_form():\n+        if call_backend_service():\n+            st.success(\"推荐结果已生成！\")\n+        else:\n+            st.session_state.recommendations = None\n+\n+# 推荐结果显示 - 避免嵌套列\n if st.session_state.recommendations:\n     recommendations = st.session_state.recommendations\n-    with col2:\n-        st.markdown(\"### 📊 推荐结果\")\n-        st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n+    st.markdown(\"### 📊 推荐结果\")\n+    st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n+    \n+    # 基本信息卡片\n+    with st.beta_expander(\"📋 基本信息摘要\", expanded=True):\n+        col1, col2 = st.beta_columns(2)\n+        with col1:\n+            st.metric(\"餐别\", recommendations.get(\"餐别\", \"午餐\"))\n+            st.metric(\"状态\", recommendations.get(\"求解状态\", \"未知\"))\n+        with col2:\n+            st.metric(\"活动水平\", st.session_state.activity_level_label)\n+            energy_needs = recommendations.get('用户营养需求', {}).get('能量', [0,0])\n+            if isinstance(energy_needs, (tuple, list)) and len(energy_needs) == 2:\n+                energy_range = f\"{energy_needs[0]:.0f}-{energy_needs[1]:.0f} kcal\"\n+            else:\n+                energy_range = \"未知\"\n+            st.metric(\"能量需求范围\", energy_range)\n+    \n+    # 菜品推荐标签页\n+    tab1, tab2, tab3 = st.beta_tabs([\"菜品推荐\", \"营养分析\", \"详情数据\"])\n+    \n+    with tab1:\n+        st.markdown(\"#### 📋 菜品推荐列表\")\n         \n-        # 基本信息卡片\n-        with st.expander(\"📋 基本信息摘要\", expanded=True):\n-            col_summary1, col_summary2 = st.columns(2)\n-            with col_summary1:\n-                st.metric(\"餐别\", recommendations.get(\"餐别\", \"午餐\"))\n-                st.metric(\"状态\", recommendations.get(\"求解状态\", \"未知\"))\n-            with col_summary2:\n-                st.metric(\"活动水平\", st.session_state.activity_level_label)\n-                # 确保能处理各种格式的能量需求\n-                energy_needs = recommendations.get('用户营养需求', {}).get('能量', [0,0])\n-                if isinstance(energy_needs, (tuple, list)) and len(energy_needs) == 2:\n-                    energy_range = f\"{energy_needs[0]:.0f}-{energy_needs[1]:.0f} kcal\"\n-                else:\n-                    energy_range = \"未知\"\n-                st.metric(\"能量需求范围\", energy_range)\n+        # 排序：按权重降序\n+        sorted_dishes = sorted(recommendations.get(\"菜品推荐\", []), \n+                              key=lambda x: x.get(\"推荐权重\", 0), \n+                              reverse=True)\n         \n-        tab_rec, tab_nutrition, tab_details = st.tabs([\"菜品推荐\", \"营养分析\", \"详情数据\"])\n-        \n-        with tab_rec:\n-            st.markdown(\"#### 📋 菜品推荐列表\")\n+        for dish in sorted_dishes:\n+            weight = dish.get(\"推荐权重\", 0)\n+            if weight >= 0.7:\n+                card_class = \"high-weight\"\n+                recommendation_text = \"强烈推荐\"\n+            elif weight >= 0.5:\n+                card_class = \"medium-weight\"\n+                recommendation_text = \"推荐\"\n+            elif weight >= 0.3:\n+                card_class = \"medium-weight\"\n+                recommendation_text = \"适量食用\"\n+            else:\n+                card_class = \"low-weight\"\n+                recommendation_text = \"少量尝试\"\n             \n-            # 排序：按权重降序\n-            sorted_dishes = sorted(recommendations.get(\"菜品推荐\", []), \n-                                  key=lambda x: x.get(\"推荐权重\", 0), \n-                                  reverse=True)\n+            st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n+            st.markdown(f\"#### 🍲 {dish.get('菜品名称', '未知菜品')}\")\n+            st.markdown(f\"**推荐指数**: {weight:.2f} ({recommendation_text})\")\n+            st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n             \n-            for dish in sorted_dishes:\n-                weight = dish.get(\"推荐权重\", 0)\n-                if weight >= 0.7:\n-                    card_class = \"high-weight\"\n-                    recommendation_text = \"强烈推荐\"\n-                elif weight >= 0.5:\n-                    card_class = \"medium-weight\"\n-                    recommendation_text = \"推荐\"\n-                elif weight >= 0.3:\n-                    card_class = \"medium-weight\"\n-                    recommendation_text = \"适量食用\"\n-                else:\n-                    card_class = \"low-weight\"\n-                    recommendation_text = \"少量尝试\"\n-                \n-                with st.container():\n-                    st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n-                    \n-                    cols = st.columns([3, 2])\n-                    with cols[0]:\n-                        st.markdown(f\"#### 🍲 {dish.get('菜品名称', '未知菜品')}\")\n-                        st.markdown(f\"**推荐指数**: {weight:.2f} ({recommendation_text})\")\n-                    with cols[1]:\n-                        st.progress(min(weight, 1.0), text=f\"{recommendation_text}\")\n-                    \n-                    st.markdown(f\"##### 🧠 推荐理由\")\n-                    st.caption(f\"{dish.get('原因', '暂无推荐理由')}\")\n-                    \n-                    nutrition = dish.get(\"营养值\", {})\n-                    if nutrition:\n-                        with st.expander(\"📊 营养成分分析\", expanded=False):\n-                            st.markdown(\"**主要营养素**\")\n-                            col_nut1, col_nut2, col_nut3 = st.columns(3)\n-                            with col_nut1:\n-                                st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n-                                st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n-                            with col_nut2:\n-                                st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n-                                st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n-                            with col_nut3:\n-                                st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n-                                st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n-                    \n-                    st.markdown(\"</div>\", unsafe_allow_html=True)\n+            nutrition = dish.get(\"营养值\", {})\n+            if nutrition:\n+                with st.beta_expander(\"📊 营养成分分析\", expanded=False):\n+                    col1, col2, col3 = st.beta_columns(3)\n+                    with col1:\n+                        st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n+                        st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n+                    with col2:\n+                        st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n+                        st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n+                    with col3:\n+                        st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n+                        st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n+            st.markdown(\"</div>\", unsafe_allow_html=True)\n+    \n+    with tab2:\n+        st.markdown(\"#### 📊 营养分析\")\n         \n-        with tab_nutrition:\n-            st.markdown(\"#### 📊 营养分析\")\n+        user_needs = recommendations.get(\"用户营养需求\", {})\n+        total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n+        \n+        if total_nutrition and user_needs:\n+            st.markdown(\"##### 🍽️ 整餐营养摘要\")\n+            col1, col2 = st.beta_columns(2)\n             \n-            user_needs = recommendations.get(\"用户营养需求\", {})\n-            total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n+            with col1:\n+                st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n+                st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n+            with col2:\n+                st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n+                st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n             \n-            if total_nutrition and user_needs:\n-                st.markdown(\"##### 🍽️ 整餐营养摘要\")\n-                col_sum1, col_sum2 = st.columns(2)\n-                \n-                with col_sum1:\n-                    # 处理能量需求格式\n-                    energy_needs = user_needs.get('能量', [0,0])\n-                    if isinstance(energy_needs, (tuple, list)) and len(energy_needs) == 2:\n-                        energy_range = f\"{energy_needs[0]:.0f}-{energy_needs[1]:.0f} kcal\"\n-                    else:\n-                        energy_range = \"未知\"\n-                    \n-                    st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\", \n-                             delta=energy_range,\n-                             delta_color=\"off\")\n-                    \n-                    # 处理蛋白质需求格式\n-                    protein_needs = user_needs.get('蛋白质', [0,0])\n-                    if isinstance(protein_needs, (tuple, list)) and len(protein_needs) == 2:\n-                        protein_range = f\"{protein_needs[0]:.0f}-{protein_needs[1]:.0f} g\"\n-                    else:\n-                        protein_range = \"未知\"\n-                    \n-                    st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\",\n-                             delta=protein_range,\n-                             delta_color=\"off\")\n-                \n-                with col_sum2:\n-                    # 处理脂肪需求格式\n-                    fat_needs = user_needs.get('脂肪', [0,0])\n-                    if isinstance(fat_needs, (tuple, list)) and len(fat_needs) == 2:\n-                        fat_range = f\"{fat_needs[0]:.0f}-{fat_needs[1]:.0f} g\"\n-                    else:\n-                        fat_range = \"未知\"\n-                    \n-                    st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\",\n-                             delta=fat_range,\n-                             delta_color=\"off\")\n-                    \n-                    # 处理碳水化合物需求格式\n-                    carb_needs = user_needs.get('碳水化合物', [0,0])\n-                    if isinstance(carb_needs, (tuple, list)) and len(carb_needs) == 2:\n-                        carb_range = f\"{carb_needs[0]:.0f}-{carb_needs[1]:.0f} g\"\n-                    else:\n-                        carb_range = \"未知\"\n-                    \n-                    st.metric(\"总碳水\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\",\n-                             delta=carb_range,\n-                             delta_color=\"off\")\n-                \n-                st.markdown(\"---\")\n-                st.markdown(\"##### 📈 营养素满足情况\")\n-                \n-                # 宏量营养素分析\n-                st.markdown(\"**宏量营养素**\")\n-                col_macronutrients = st.columns(2)\n-                with col_macronutrients[0]:\n-                    st.markdown(\"**能量**\")\n-                    st.metric(\"摄入量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n-                    st.metric(\"需求范围\", energy_range)\n-                    \n-                    st.markdown(\"**蛋白质**\")\n-                    st.metric(\"摄入量\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n-                    st.metric(\"需求范围\", protein_range)\n-                    \n-                with col_macronutrients[1]:\n-                    st.markdown(\"**脂肪**\")\n-                    st.metric(\"摄入量\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n-                    st.metric(\"需求范围\", fat_range)\n-                    \n-                    st.markdown(\"**碳水化合物**\")\n-                    st.metric(\"摄入量\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n-                    st.metric(\"需求范围\", carb_range)\n-                \n-                # 微量营养素分析\n-                st.markdown(\"**微量营养素**\")\n-                col_micronutrients = st.columns(2)\n-                with col_micronutrients[0]:\n-                    st.markdown(\"**钠**\")\n-                    st.metric(\"摄入量\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n-                    \n-                    st.markdown(\"**钙**\")\n-                    st.metric(\"摄入量\", f\"{total_nutrition.get('钙', 0):.1f} mg\")\n-                    \n-                with col_micronutrients[1]:\n-                    st.markdown(\"**铁**\")\n-                    st.metric(\"摄入量\", f\"{total_nutrition.get('铁', 0):.1f} mg\")\n-                    \n-                    st.markdown(\"**维生素C**\")\n-                    st.metric(\"摄入量\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n-                \n-                # 营养分布图表\n-                st.markdown(\"---\")\n-                st.markdown(\"##### 📊 营养分布\")\n-                \n-                main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n-                main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n-                df_main = pd.DataFrame({\n-                    \"营养素\": main_nutrients,\n-                    \"含量\": main_values,\n-                    \"单位\": [NUTRIENT_UNITS.get(n, \"\") for n in main_nutrients]\n+            st.markdown(\"---\")\n+            st.markdown(\"##### 📈 营养分布\")\n+            \n+            # 宏量营养素图表\n+            main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n+            main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n+            df_main = pd.DataFrame({\"营养素\": main_nutrients, \"含量\": main_values})\n+            st.bar_chart(df_main.set_index(\"营养素\"))\n+            \n+            # 微量营养素图表\n+            micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n+            micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n+            st.markdown(\"##### 微量营养素\")\n+            df_micro = pd.DataFrame({\"营养素\": micro_nutrients, \"含量\": micro_values})\n+            st.bar_chart(df_micro.set_index(\"营养素\"))\n+    \n+    with tab3:\n+        st.markdown(\"#### 📊 详情数据\")\n+        \n+        st.markdown(\"##### 用户需求营养范围\")\n+        if recommendations.get(\"用户营养需求\"):\n+            df_needs = pd.DataFrame.from_dict(recommendations[\"用户营养需求\"], orient=\"index\", columns=[\"值\"])\n+            st.dataframe(df_needs)\n+        else:\n+            st.warning(\"无用户营养需求数据\")\n+        \n+        st.markdown(\"##### 菜品推荐详情\")\n+        if recommendations.get(\"菜品推荐\"):\n+            dish_data = []\n+            for dish in recommendations[\"菜品推荐\"]:\n+                dish_data.append({\n+                    \"菜品名称\": dish.get(\"菜品名称\", \"\"),\n+                    \"推荐权重\": dish.get(\"推荐权重\", 0),\n+                    \"原因\": dish.get(\"原因\", \"\")\n                 })\n-                st.bar_chart(df_main.set_index(\"营养素\")[\"含量\"])\n-                \n-                st.markdown(\"**维生素分布**\")\n-                vitamin_nutrients = [\"维生素A\", \"维生素B1\", \"维生素B2\", \"维生素C\"]\n-                vitamin_values = [total_nutrition.get(n, 0) for n in vitamin_nutrients]\n-                df_vitamin = pd.DataFrame({\n-                    \"维生素\": vitamin_nutrients,\n-                    \"含量\": vitamin_values,\n-                    \"单位\": [NUTRIENT_UNITS.get(n, \"\") for n in vitamin_nutrients]\n-                })\n-                st.bar_chart(df_vitamin.set_index(\"维生素\")[\"含量\"])\n-                \n-                st.markdown(\"**矿物质分布**\")\n-                mineral_nutrients = [\"钠\", \"钙\", \"铁\", \"锌\"]\n-                mineral_values = [total_nutrition.get(n, 0) for n in mineral_nutrients]\n-                df_mineral = pd.DataFrame({\n-                    \"矿物质\": mineral_nutrients,\n-                    \"含量\": mineral_values,\n-                    \"单位\": [NUTRIENT_UNITS.get(n, \"\") for n in mineral_nutrients]\n-                })\n-                st.bar_chart(df_mineral.set_index(\"矿物质\")[\"含量\"])\n+            st.dataframe(pd.DataFrame(dish_data))\n+        else:\n+            st.warning(\"无菜品推荐数据\")\n         \n-        with tab_details:\n-            st.markdown(\"#### 📊 详情数据\")\n-            \n-            st.markdown(\"##### 用户需求营养范围\")\n-            if recommendations.get(\"用户营养需求\"):\n-                df_needs = pd.DataFrame.from_dict(recommendations[\"用户营养需求\"], orient=\"index\", columns=[\"值\"])\n-                st.dataframe(df_needs, use_container_width=True)\n-            else:\n-                st.warning(\"无用户营养需求数据\")\n-            \n-            st.markdown(\"##### 菜品推荐详情\")\n-            if recommendations.get(\"菜品推荐\"):\n-                dish_data = []\n-                for dish in recommendations[\"菜品推荐\"]:\n-                    dish_data.append({\n-                        \"菜品名称\": dish.get(\"菜品名称\", \"\"),\n-                        \"推荐权重\": dish.get(\"推荐权重\", 0),\n-                        \"原因\": dish.get(\"原因\", \"\")\n-                    })\n-                st.dataframe(pd.DataFrame(dish_data), use_container_width=True)\n-            else:\n-                st.warning(\"无菜品推荐数据\")\n-            \n-            st.markdown(\"##### 整餐营养摘要\")\n-            if recommendations.get(\"整餐营养摘要\"):\n-                df_total = pd.DataFrame.from_dict(recommendations[\"整餐营养摘要\"], orient=\"index\", columns=[\"值\"])\n-                st.dataframe(df_total, use_container_width=True)\n-            else:\n-                st.warning(\"无整餐营养摘要数据\")\n+        st.markdown(\"##### 整餐营养摘要\")\n+        if recommendations.get(\"整餐营养摘要\"):\n+            df_total = pd.DataFrame.from_dict(recommendations[\"整餐营养摘要\"], orient=\"index\", columns=[\"值\"])\n+            st.dataframe(df_total)\n+        else:\n+            st.warning(\"无整餐营养摘要数据\")\n else:\n-    with col2:\n-        st.info(\"✨ 请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n+    st.info(\"✨ 请填写个人信息并点击'生成菜品推荐'按钮获取个性化推荐\")\n \n # 使用说明\n st.markdown(\"---\")\n-with st.expander(\"ℹ️ 使用说明\"):\n-    st.markdown(\"\"\"\n-    ### 使用指南\n-    \n-    1. **填写个人信息**：\n-       - 在左侧栏完整填写您的性别、年龄、身高、体重等信息\n-       - 选择您的活动水平（根据日常活动强度）\n-       - 选择要规划的餐别（早餐/午餐/晚餐）\n-    \n-    2. **添加菜品信息**：\n-       - 输入菜品名称（如：番茄炒蛋）\n-       - 设置菜品份量（克数）\n-       - 可添加多个菜品进行混合分析\n-    \n-    3. **生成推荐**：\n-       - 点击\"✨ 生成菜品推荐\"按钮进行分析\n-       - 系统将根据您的个人情况和菜品特点生成推荐\n-    \n-    4. **查看结果**：\n-       - 在右侧推荐结果区域查看分析结果\n-       - 通过三个标签页分别查看：\n-         - 📋 菜品推荐 - 各菜品推荐指数及原因\n-         - 📊 营养分析 - 整餐营养构成及需求满足情况\n-         - 📊 详情数据 - 详细的数据表格\n-    \"\"\")\n-    \n-    st.markdown(\"### 推荐权重说明\")\n-    cols_legend = st.columns(4)\n-    with cols_legend[0]:\n-        st.markdown(\"<div class='recommendation-card high-weight'><b>强烈推荐</b><br>(权重 ≥ 0.7)</div>\", unsafe_allow_html=True)\n-    with cols_legend[1]:\n-        st.markdown(\"<div class='recommendation-card medium-weight'><b>推荐</b><br>(0.5 ≤ 权重 < 0.7)</div>\", unsafe_allow_html=True)\n-    with cols_legend[2]:\n-        st.markdown(\"<div class='recommendation-card medium-weight'><b>适量食用</b><br>(0.3 ≤ 权重 < 0.5)</div>\", unsafe_allow_html=True)\n-    with cols_legend[3]:\n-        st.markdown(\"<div class='recommendation-card low-weight'><b>少量尝试</b><br>(权重 < 0.3)</div>\", unsafe_allow_html=True)\n+st.markdown(\"\"\"\n+### 使用说明\n+1. 在左侧填写您的个人信息（性别、年龄、身高、体重等）\n+2. 添加您想评估的菜品（至少一个）\n+3. 点击\"生成菜品推荐\"按钮获取个性化推荐\n+4. 查看推荐结果，了解每道菜的推荐程度和原因\n \n+**推荐权重说明**:\n+- **强烈推荐 (权重 ≥ 0.7)**: 营养均衡且符合需求  \n+- **推荐 (0.5 ≤ 权重 < 0.7)**: 营养良好，适合食用  \n+- **适量食用 (0.3 ≤ 权重 < 0.5)**: 可以少量食用  \n+- **少量尝试 (权重 < 0.3)**: 建议本餐避免或少量尝试\n+\"\"\")\n+\n # 调试信息（可选）\n if st.checkbox(\"显示调试信息\"):\n     st.markdown(\"### 请求数据\")\n     st.json(st.session_state.request_data)\n"
                },
                {
                    "date": 1752546628249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,28 @@\n     }\n     .hidden-label label {\n         display: none;\n     }\n+    .tab-content {\n+        padding: 15px;\n+        border: 1px solid #e0e0e0;\n+        border-radius: 0 0 12px 12px;\n+        border-top: none;\n+        margin-top: -10px;\n+    }\n+    .tab-button {\n+        padding: 10px 20px;\n+        border: 1px solid #e0e0e0;\n+        border-radius: 12px 12px 0 0;\n+        background-color: #f0f0f0;\n+        cursor: pointer;\n+        margin-right: 5px;\n+    }\n+    .tab-button.active {\n+        background-color: #fff;\n+        border-bottom: none;\n+        font-weight: bold;\n+    }\n </style>\n \"\"\", unsafe_allow_html=True)\n \n # 应用标题\n@@ -119,8 +139,10 @@\n if 'response_time' not in st.session_state:\n     st.session_state.response_time = None\n if 'selected_dish' not in st.session_state:\n     st.session_state.selected_dish = None\n+if 'active_tab' not in st.session_state:\n+    st.session_state.active_tab = \"菜品推荐\"\n \n # 添加菜品\n def add_dish():\n     st.session_state.dishes.append({\"name\": \"\", \"weight\": 100.0})\n@@ -220,9 +242,9 @@\n \n # 主内容区\n st.markdown(\"### 🍽️ 菜品信息\")\n \n-# 菜品输入部分 - 避免嵌套列\n+# 菜品输入部分\n for i, dish in enumerate(st.session_state.dishes):\n     st.markdown(f\"**菜品 #{i+1}**\")\n     \n     # 菜品名称输入\n@@ -232,10 +254,10 @@\n         key=f\"dish_name_{i}\", \n         placeholder=\"例如: 番茄炒蛋\"\n     )\n     \n-    # 重量输入和删除按钮 - 使用水平布局但避免嵌套列\n-    col1, col2 = st.beta_columns([3, 1])\n+    # 重量输入和删除按钮\n+    col1, col2 = st.columns([3, 1])\n     with col1:\n         dish[\"weight\"] = st.number_input(\n             \"重量 (g)\", \n             min_value=1.0, \n@@ -259,17 +281,17 @@\n             st.success(\"推荐结果已生成！\")\n         else:\n             st.session_state.recommendations = None\n \n-# 推荐结果显示 - 避免嵌套列\n+# 推荐结果显示\n if st.session_state.recommendations:\n     recommendations = st.session_state.recommendations\n     st.markdown(\"### 📊 推荐结果\")\n     st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n     \n     # 基本信息卡片\n-    with st.beta_expander(\"📋 基本信息摘要\", expanded=True):\n-        col1, col2 = st.beta_columns(2)\n+    with st.expander(\"📋 基本信息摘要\", expanded=True):\n+        col1, col2 = st.columns(2)\n         with col1:\n             st.metric(\"餐别\", recommendations.get(\"餐别\", \"午餐\"))\n             st.metric(\"状态\", recommendations.get(\"求解状态\", \"未知\"))\n         with col2:\n@@ -280,12 +302,21 @@\n             else:\n                 energy_range = \"未知\"\n             st.metric(\"能量需求范围\", energy_range)\n     \n+    # 自定义标签页实现\n+    tabs = [\"菜品推荐\", \"营养分析\", \"详情数据\"]\n+    tab_buttons = st.columns(len(tabs))\n+    \n+    for i, tab in enumerate(tabs):\n+        with tab_buttons[i]:\n+            if st.button(tab, key=f\"tab_{i}\"):\n+                st.session_state.active_tab = tab\n+    \n+    st.markdown(f\"<div class='tab-content'>\", unsafe_allow_html=True)\n+    \n     # 菜品推荐标签页\n-    tab1, tab2, tab3 = st.beta_tabs([\"菜品推荐\", \"营养分析\", \"详情数据\"])\n-    \n-    with tab1:\n+    if st.session_state.active_tab == \"菜品推荐\":\n         st.markdown(\"#### 📋 菜品推荐列表\")\n         \n         # 排序：按权重降序\n         sorted_dishes = sorted(recommendations.get(\"菜品推荐\", []), \n@@ -313,10 +344,10 @@\n             st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n             \n             nutrition = dish.get(\"营养值\", {})\n             if nutrition:\n-                with st.beta_expander(\"📊 营养成分分析\", expanded=False):\n-                    col1, col2, col3 = st.beta_columns(3)\n+                with st.expander(\"📊 营养成分分析\", expanded=False):\n+                    col1, col2, col3 = st.columns(3)\n                     with col1:\n                         st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n                         st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n                     with col2:\n@@ -326,17 +357,18 @@\n                         st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n                         st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n             st.markdown(\"</div>\", unsafe_allow_html=True)\n     \n-    with tab2:\n+    # 营养分析标签页\n+    elif st.session_state.active_tab == \"营养分析\":\n         st.markdown(\"#### 📊 营养分析\")\n         \n         user_needs = recommendations.get(\"用户营养需求\", {})\n         total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n         \n         if total_nutrition and user_needs:\n             st.markdown(\"##### 🍽️ 整餐营养摘要\")\n-            col1, col2 = st.beta_columns(2)\n+            col1, col2 = st.columns(2)\n             \n             with col1:\n                 st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n                 st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n@@ -359,9 +391,10 @@\n             st.markdown(\"##### 微量营养素\")\n             df_micro = pd.DataFrame({\"营养素\": micro_nutrients, \"含量\": micro_values})\n             st.bar_chart(df_micro.set_index(\"营养素\"))\n     \n-    with tab3:\n+    # 详情数据标签页\n+    elif st.session_state.active_tab == \"详情数据\":\n         st.markdown(\"#### 📊 详情数据\")\n         \n         st.markdown(\"##### 用户需求营养范围\")\n         if recommendations.get(\"用户营养需求\"):\n@@ -388,8 +421,10 @@\n             df_total = pd.DataFrame.from_dict(recommendations[\"整餐营养摘要\"], orient=\"index\", columns=[\"值\"])\n             st.dataframe(df_total)\n         else:\n             st.warning(\"无整餐营养摘要数据\")\n+    \n+    st.markdown(\"</div>\", unsafe_allow_html=True)\n else:\n     st.info(\"✨ 请填写个人信息并点击'生成菜品推荐'按钮获取个性化推荐\")\n \n # 使用说明\n"
                },
                {
                    "date": 1752547968189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -391,16 +391,30 @@\n             st.markdown(\"##### 微量营养素\")\n             df_micro = pd.DataFrame({\"营养素\": micro_nutrients, \"含量\": micro_values})\n             st.bar_chart(df_micro.set_index(\"营养素\"))\n     \n-    # 详情数据标签页\n+    # 详情数据标签页 - 修复了ValueError错误\n     elif st.session_state.active_tab == \"详情数据\":\n         st.markdown(\"#### 📊 详情数据\")\n         \n         st.markdown(\"##### 用户需求营养范围\")\n         if recommendations.get(\"用户营养需求\"):\n-            df_needs = pd.DataFrame.from_dict(recommendations[\"用户营养需求\"], orient=\"index\", columns=[\"值\"])\n-            st.dataframe(df_needs)\n+            # 创建格式化后的营养需求字典\n+            formatted_needs = {}\n+            for nutrient, value in recommendations[\"用户营养需求\"].items():\n+                # 处理范围值\n+                if isinstance(value, (list, tuple)) and len(value) == 2:\n+                    formatted_needs[nutrient] = f\"{value[0]:.1f}-{value[1]:.1f}\"\n+                # 处理单个值\n+                elif isinstance(value, (int, float)):\n+                    formatted_needs[nutrient] = f\"{value:.1f}\"\n+                # 处理其他类型\n+                else:\n+                    formatted_needs[nutrient] = str(value)\n+            \n+            # 创建DataFrame\n+            df_needs = pd.DataFrame.from_dict(formatted_needs, orient=\"index\", columns=[\"值\"])\n+            st.dataframe(df_needs, use_container_width=True)\n         else:\n             st.warning(\"无用户营养需求数据\")\n         \n         st.markdown(\"##### 菜品推荐详情\")\n@@ -411,16 +425,29 @@\n                     \"菜品名称\": dish.get(\"菜品名称\", \"\"),\n                     \"推荐权重\": dish.get(\"推荐权重\", 0),\n                     \"原因\": dish.get(\"原因\", \"\")\n                 })\n-            st.dataframe(pd.DataFrame(dish_data))\n+            st.dataframe(pd.DataFrame(dish_data), use_container_width=True)\n         else:\n             st.warning(\"无菜品推荐数据\")\n         \n         st.markdown(\"##### 整餐营养摘要\")\n         if recommendations.get(\"整餐营养摘要\"):\n-            df_total = pd.DataFrame.from_dict(recommendations[\"整餐营养摘要\"], orient=\"index\", columns=[\"值\"])\n-            st.dataframe(df_total)\n+            # 创建格式化后的营养摘要字典\n+            formatted_total = {}\n+            for nutrient, value in recommendations[\"整餐营养摘要\"].items():\n+                # 处理范围值\n+                if isinstance(value, (list, tuple)) and len(value) == 2:\n+                    formatted_total[nutrient] = f\"{value[0]:.1f}-{value[1]:.1f}\"\n+                # 处理单个值\n+                elif isinstance(value, (int, float)):\n+                    formatted_total[nutrient] = f\"{value:.1f}\"\n+                # 处理其他类型\n+                else:\n+                    formatted_total[nutrient] = str(value)\n+            \n+            df_total = pd.DataFrame.from_dict(formatted_total, orient=\"index\", columns=[\"值\"])\n+            st.dataframe(df_total, use_container_width=True)\n         else:\n             st.warning(\"无整餐营养摘要数据\")\n     \n     st.markdown(\"</div>\", unsafe_allow_html=True)\n"
                },
                {
                    "date": 1752548195623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,12 @@\n         background-color: #fff;\n         border-bottom: none;\n         font-weight: bold;\n     }\n+    .dataframe-container {\n+        width: 100%;\n+        overflow-x: auto;\n+    }\n </style>\n \"\"\", unsafe_allow_html=True)\n \n # 应用标题\n@@ -412,9 +416,11 @@\n                     formatted_needs[nutrient] = str(value)\n             \n             # 创建DataFrame\n             df_needs = pd.DataFrame.from_dict(formatted_needs, orient=\"index\", columns=[\"值\"])\n-            st.dataframe(df_needs, use_container_width=True)\n+            st.markdown(\"<div class='dataframe-container'>\", unsafe_allow_html=True)\n+            st.dataframe(df_needs)\n+            st.markdown(\"</div>\", unsafe_allow_html=True)\n         else:\n             st.warning(\"无用户营养需求数据\")\n         \n         st.markdown(\"##### 菜品推荐详情\")\n@@ -425,9 +431,11 @@\n                     \"菜品名称\": dish.get(\"菜品名称\", \"\"),\n                     \"推荐权重\": dish.get(\"推荐权重\", 0),\n                     \"原因\": dish.get(\"原因\", \"\")\n                 })\n-            st.dataframe(pd.DataFrame(dish_data), use_container_width=True)\n+            st.markdown(\"<div class='dataframe-container'>\", unsafe_allow_html=True)\n+            st.dataframe(pd.DataFrame(dish_data))\n+            st.markdown(\"</div>\", unsafe_allow_html=True)\n         else:\n             st.warning(\"无菜品推荐数据\")\n         \n         st.markdown(\"##### 整餐营养摘要\")\n@@ -445,9 +453,11 @@\n                 else:\n                     formatted_total[nutrient] = str(value)\n             \n             df_total = pd.DataFrame.from_dict(formatted_total, orient=\"index\", columns=[\"值\"])\n-            st.dataframe(df_total, use_container_width=True)\n+            st.markdown(\"<div class='dataframe-container'>\", unsafe_allow_html=True)\n+            st.dataframe(df_total)\n+            st.markdown(\"</div>\", unsafe_allow_html=True)\n         else:\n             st.warning(\"无整餐营养摘要数据\")\n     \n     st.markdown(\"</div>\", unsafe_allow_html=True)\n"
                },
                {
                    "date": 1752558121517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n         st.session_state.dishes.pop(index)\n \n # 活动水平映射\n ACTIVITY_MAPPING = {\n-    \"轻活动水平(办公室工作，很少运动)\": \"a\",\n+    \"轻活动水平()\": \"a\",\n     \"中活动水平(每天适量运动)\": \"b\",\n     \"重活动水平(体力劳动或高强度训练)\": \"c\"\n }\n \n"
                },
                {
                    "date": 1752558127565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,11 +157,11 @@\n         st.session_state.dishes.pop(index)\n \n # 活动水平映射\n ACTIVITY_MAPPING = {\n-    \"轻活动水平()\": \"a\",\n-    \"中活动水平(每天适量运动)\": \"b\",\n-    \"重活动水平(体力劳动或高强度训练)\": \"c\"\n+    \"轻活动水平\": \"a\",\n+    \"中活动水平\": \"b\",\n+    \"重活动水平: \"c\"\n }\n \n # 提交表单\n def submit_form():\n"
                },
                {
                    "date": 1752558133260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n # 活动水平映射\n ACTIVITY_MAPPING = {\n     \"轻活动水平\": \"a\",\n     \"中活动水平\": \"b\",\n-    \"重活动水平: \"c\"\n+    \"重活动水平\": \"c\"\n }\n \n # 提交表单\n def submit_form():\n"
                },
                {
                    "date": 1752558150756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,9 +266,9 @@\n             \"重量 (g)\", \n             min_value=1.0, \n             value=dish[\"weight\"], \n             key=f\"dish_weight_{i}\", \n-            step=1.0\n+            step=10.0\n         )\n     with col2:\n         if i > 0:\n             if st.button(\"删除\", key=f\"remove_{i}\"):\n"
                },
                {
                    "date": 1752561174931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n from datetime import datetime\n \n # 设置页面配置\n st.set_page_config(\n-    page_title=\"智能菜品推荐系统\",\n+    page_title=\"中科shen'jian智能菜品推荐系统\",\n     page_icon=\"🍲\",\n     layout=\"wide\",\n     initial_sidebar_state=\"expanded\"\n )\n"
                },
                {
                    "date": 1752561182813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n from datetime import datetime\n \n # 设置页面配置\n st.set_page_config(\n-    page_title=\"中科shen'jian智能菜品推荐系统\",\n+    page_title=\"中科深健智能菜品推荐系统\",\n     page_icon=\"🍲\",\n     layout=\"wide\",\n     initial_sidebar_state=\"expanded\"\n )\n"
                },
                {
                    "date": 1752561259218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \n # 应用标题\n st.markdown(\"\"\"\n <div class=\"header\">\n-    <h1 style=\"text-align:center; margin:0;\">🍲 智能菜品推荐系统</h1>\n+    <h1 style=\"text-align:center; margin:0;\">🍲 中科shen'jian智能菜品推荐系统</h1>\n     <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n </div>\n \"\"\", unsafe_allow_html=True)\n \n"
                },
                {
                    "date": 1752561265859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \n # 应用标题\n st.markdown(\"\"\"\n <div class=\"header\">\n-    <h1 style=\"text-align:center; margin:0;\">🍲 中科shen'jian智能菜品推荐系统</h1>\n+    <h1 style=\"text-align:center; margin:0;\">🍲 中科深健智能菜品推荐系统</h1>\n     <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n </div>\n \"\"\", unsafe_allow_html=True)\n \n"
                },
                {
                    "date": 1752561279824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n # 应用标题\n st.markdown(\"\"\"\n <div class=\"header\">\n     <h1 style=\"text-align:center; margin:0;\">🍲 中科深健智能菜品推荐系统</h1>\n-    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n+    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与的个性化菜品推荐</p>\n </div>\n \"\"\", unsafe_allow_html=True)\n \n # 后端服务URL\n"
                },
                {
                    "date": 1752561286019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n # 应用标题\n st.markdown(\"\"\"\n <div class=\"header\">\n     <h1 style=\"text-align:center; margin:0;\">🍲 中科深健智能菜品推荐系统</h1>\n-    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与的个性化菜品推荐</p>\n+    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与FoodSky的个性化菜品推荐</p>\n </div>\n \"\"\", unsafe_allow_html=True)\n \n # 后端服务URL\n"
                },
                {
                    "date": 1752561298683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n # 应用标题\n st.markdown(\"\"\"\n <div class=\"header\">\n     <h1 style=\"text-align:center; margin:0;\">🍲 中科深健智能菜品推荐系统</h1>\n-    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与FoodSky的个性化菜品推荐</p>\n+    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与FoodSky大模型的个性化菜品推荐</p>\n </div>\n \"\"\", unsafe_allow_html=True)\n \n # 后端服务URL\n"
                },
                {
                    "date": 1752564397739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,29 +16,66 @@\n \n # 自定义CSS样式\n st.markdown(\"\"\"\n <style>\n-    .recommendation-card {\n-        border: 1px solid #e0e0e0;\n-        border-radius: 12px;\n-        padding: 15px;\n-        margin-bottom: 10px;\n-        background-color: #fafafa;\n-        transition: transform 0.2s, box-shadow 0.2s;\n-    }\n-    .recommendation-card:hover {\n-        transform: translateY(-3px);\n-        box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n-    }\n-    .high-weight {\n-        border-left: 6px solid #4CAF50;\n-    }\n-    .medium-weight {\n-        border-left: 6px solid #FFC107;\n-    }\n-    .low-weight {\n-        border-left: 6px solid #F44336;\n-    }\n+/* 在现有CSS样式部分添加/修改以下内容 */\n+\n+.recommendation-card {\n+    border-radius: 12px;\n+    padding: 15px;\n+    margin-bottom: 15px;\n+    transition: all 0.3s ease;\n+    box-shadow: 0 4px 10px rgba(0,0,0,0.05);\n+    background: white; /* 默认背景色 */\n+}\n+\n+/* 强烈推荐 - 内部背景为浅绿色 */\n+.high-weight {\n+    background-color: #E8F5E9 !important; /* 非常浅的绿色 */\n+    border: 2px solid #4CAF50; /* 外边框为绿色 */\n+    border-left: 6px solid #4CAF50; /* 左侧条保留 */\n+}\n+\n+/* 推荐 - 内部背景为浅黄色 */\n+.medium-weight {\n+    background-color: #FFFDE7 !important; /* 非常浅的黄色 */\n+    border: 2px solid #FFC107; /* 外边框为黄色 */\n+    border-left: 6px solid #FFC107; /* 左侧条保留 */\n+}\n+\n+/* 少量尝试 - 内部背景为浅红色 */\n+.low-weight {\n+    background-color: #FFEBEE !important; /* 非常浅的红色 */\n+    border: 2px solid #F44336; /* 外边框为红色 */\n+    border-left: 6px solid #F44336; /* 左侧条保留 */\n+}\n+\n+/* 悬停效果 */\n+.recommendation-card:hover {\n+    transform: translateY(-5px);\n+    box-shadow: 0 8px 15px rgba(0,0,0,0.1);\n+}\n+\n+/* 强烈推荐悬停时背景加深 */\n+.high-weight:hover {\n+    background-color: #C8E6C9 !important;\n+}\n+\n+/* 推荐悬停时背景加深 */\n+.medium-weight:hover {\n+    background-color: #FFECB3 !important;\n+}\n+\n+/* 少量尝试悬停时背景加深 */\n+.low-weight:hover {\n+    background-color: #FFCDD2 !important;\n+}\n+\n+/* 标题颜色增强 */\n+.recommendation-card h3 {\n+    color: #333; /* 深灰色增强可读性 */\n+    margin-top: 0;\n+}\n     .nutrient-bar {\n         height: 10px;\n         background-color: #f0f0f0;\n         border-radius: 5px;\n"
                },
                {
                    "date": 1752564407643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,64 +18,64 @@\n st.markdown(\"\"\"\n <style>\n /* 在现有CSS样式部分添加/修改以下内容 */\n \n-.recommendation-card {\n-    border-radius: 12px;\n-    padding: 15px;\n-    margin-bottom: 15px;\n-    transition: all 0.3s ease;\n-    box-shadow: 0 4px 10px rgba(0,0,0,0.05);\n-    background: white; /* 默认背景色 */\n-}\n+    .recommendation-card {\n+        border-radius: 12px;\n+        padding: 15px;\n+        margin-bottom: 15px;\n+        transition: all 0.3s ease;\n+        box-shadow: 0 4px 10px rgba(0,0,0,0.05);\n+        background: white; /* 默认背景色 */\n+    }\n \n-/* 强烈推荐 - 内部背景为浅绿色 */\n-.high-weight {\n-    background-color: #E8F5E9 !important; /* 非常浅的绿色 */\n-    border: 2px solid #4CAF50; /* 外边框为绿色 */\n-    border-left: 6px solid #4CAF50; /* 左侧条保留 */\n-}\n+    /* 强烈推荐 - 内部背景为浅绿色 */\n+    .high-weight {\n+        background-color: #E8F5E9 !important; /* 非常浅的绿色 */\n+        border: 2px solid #4CAF50; /* 外边框为绿色 */\n+        border-left: 6px solid #4CAF50; /* 左侧条保留 */\n+    }\n \n-/* 推荐 - 内部背景为浅黄色 */\n-.medium-weight {\n-    background-color: #FFFDE7 !important; /* 非常浅的黄色 */\n-    border: 2px solid #FFC107; /* 外边框为黄色 */\n-    border-left: 6px solid #FFC107; /* 左侧条保留 */\n-}\n+    /* 推荐 - 内部背景为浅黄色 */\n+    .medium-weight {\n+        background-color: #FFFDE7 !important; /* 非常浅的黄色 */\n+        border: 2px solid #FFC107; /* 外边框为黄色 */\n+        border-left: 6px solid #FFC107; /* 左侧条保留 */\n+    }\n \n-/* 少量尝试 - 内部背景为浅红色 */\n-.low-weight {\n-    background-color: #FFEBEE !important; /* 非常浅的红色 */\n-    border: 2px solid #F44336; /* 外边框为红色 */\n-    border-left: 6px solid #F44336; /* 左侧条保留 */\n-}\n+    /* 少量尝试 - 内部背景为浅红色 */\n+    .low-weight {\n+        background-color: #FFEBEE !important; /* 非常浅的红色 */\n+        border: 2px solid #F44336; /* 外边框为红色 */\n+        border-left: 6px solid #F44336; /* 左侧条保留 */\n+    }\n \n-/* 悬停效果 */\n-.recommendation-card:hover {\n-    transform: translateY(-5px);\n-    box-shadow: 0 8px 15px rgba(0,0,0,0.1);\n-}\n+    /* 悬停效果 */\n+    .recommendation-card:hover {\n+        transform: translateY(-5px);\n+        box-shadow: 0 8px 15px rgba(0,0,0,0.1);\n+    }\n \n-/* 强烈推荐悬停时背景加深 */\n-.high-weight:hover {\n-    background-color: #C8E6C9 !important;\n-}\n+    /* 强烈推荐悬停时背景加深 */\n+    .high-weight:hover {\n+        background-color: #C8E6C9 !important;\n+    }\n \n-/* 推荐悬停时背景加深 */\n-.medium-weight:hover {\n-    background-color: #FFECB3 !important;\n-}\n+    /* 推荐悬停时背景加深 */\n+    .medium-weight:hover {\n+        background-color: #FFECB3 !important;\n+    }\n \n-/* 少量尝试悬停时背景加深 */\n-.low-weight:hover {\n-    background-color: #FFCDD2 !important;\n-}\n+    /* 少量尝试悬停时背景加深 */\n+    .low-weight:hover {\n+        background-color: #FFCDD2 !important;\n+    }\n \n-/* 标题颜色增强 */\n-.recommendation-card h3 {\n-    color: #333; /* 深灰色增强可读性 */\n-    margin-top: 0;\n-}\n+    /* 标题颜色增强 */\n+    .recommendation-card h3 {\n+        color: #333; /* 深灰色增强可读性 */\n+        margin-top: 0;\n+    }\n     .nutrient-bar {\n         height: 10px;\n         background-color: #f0f0f0;\n         border-radius: 5px;\n"
                }
            ],
            "date": 1752476972049,
            "name": "Commit-0",
            "content": "import streamlit as st\nimport requests\nimport time\nimport json\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\n\n# 设置页面配置\nst.set_page_config(\n    page_title=\"智能菜品推荐系统\",\n    page_icon=\"🍲\",\n    layout=\"wide\",\n    initial_sidebar_state=\"expanded\"\n)\n\n# 自定义CSS样式\nst.markdown(\"\"\"\n<style>\n    .stApp {\n        background-color: #f5f7fa;\n    }\n    .header {\n        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);\n        color: white;\n        padding: 2rem;\n        border-radius: 0 0 20px 20px;\n        margin-bottom: 2rem;\n    }\n    .section {\n        background: white;\n        border-radius: 15px;\n        padding: 1.5rem;\n        box-shadow: 0 4px 10px rgba(0,0,0,0.05);\n        margin-bottom: 1.5rem;\n    }\n    .dish-card {\n        border: 1px solid #e0e6ed;\n        border-radius: 10px;\n        padding: 1rem;\n        margin-bottom: 1rem;\n        background: #f9fbfd;\n    }\n    .recommendation-card {\n        border-radius: 10px;\n        padding: 1rem;\n        margin-bottom: 1rem;\n        box-shadow: 0 2px 5px rgba(0,0,0,0.05);\n    }\n    .high-weight {\n        background: #d4f7e2;\n        border-left: 4px solid #2ecc71;\n    }\n    .medium-weight {\n        background: #fef5e7;\n        border-left: 4px solid #f39c12;\n    }\n    .low-weight {\n        background: #fce8e6;\n        border-left: 4px solid #e74c3c;\n    }\n    .submit-btn {\n        width: 100%;\n        padding: 0.75rem;\n        border-radius: 8px;\n        background: #3498db;\n        color: white;\n        font-weight: bold;\n        border: none;\n        cursor: pointer;\n        transition: background 0.3s;\n    }\n    .submit-btn:hover {\n        background: #2980b9;\n    }\n    .add-btn {\n        background: #2ecc71;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        padding: 0.5rem 1rem;\n        cursor: pointer;\n        transition: background 0.3s;\n    }\n    .add-btn:hover {\n        background: #27ae60;\n    }\n    .remove-btn {\n        background: #e74c3c;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        padding: 0.25rem 0.75rem;\n        cursor: pointer;\n        margin-left: 0.5rem;\n    }\n    .spinner {\n        display: inline-block;\n        width: 20px;\n        height: 20px;\n        border: 3px solid rgba(0,0,0,0.1);\n        border-radius: 50%;\n        border-top-color: #3498db;\n        animation: spin 1s linear infinite;\n        margin-right: 10px;\n    }\n    @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n    }\n    .nutrient-bar {\n        height: 10px;\n        border-radius: 5px;\n        margin-top: 5px;\n        background: #e0e0e0;\n    }\n    .nutrient-fill {\n        height: 100%;\n        border-radius: 5px;\n        background: #3498db;\n    }\n    .nutrient-value {\n        font-size: 0.9rem;\n        margin-top: 3px;\n        text-align: right;\n    }\n</style>\n\"\"\", unsafe_allow_html=True)\n\n# 应用标题\nst.markdown(\"\"\"\n<div class=\"header\">\n    <h1 style=\"text-align:center; margin:0;\">🍲 智能菜品推荐系统</h1>\n    <p style=\"text-align:center; margin:0; opacity:0.9;\">基于营养学与AI的个性化菜品推荐</p>\n</div>\n\"\"\", unsafe_allow_html=True)\n\n# 后端服务URL\nBACKEND_URL = \"http://192.168.99.55:5000/recommend_dishes\"\n\n# 初始化session state\nif 'dishes' not in st.session_state:\n    st.session_state.dishes = [{\"name\": \"\", \"weight\": 100}]\n\nif 'recommendations' not in st.session_state:\n    st.session_state.recommendations = None\n\nif 'request_data' not in st.session_state:\n    st.session_state.request_data = None\n\nif 'response_time' not in st.session_state:\n    st.session_state.response_time = None\n\n# 添加菜品\ndef add_dish():\n    st.session_state.dishes.append({\"name\": \"\", \"weight\": 100})\n\n# 删除菜品\ndef remove_dish(index):\n    if len(st.session_state.dishes) > 1:\n        st.session_state.dishes.pop(index)\n\n# 提交表单\ndef submit_form():\n    # 验证用户信息\n    required_fields = ['gender', 'age', 'height', 'weight', 'activity_level', 'meal_type']\n    if not all([st.session_state.get(field) for field in required_fields]):\n        st.error(\"请填写完整的个人信息\")\n        return False\n    \n    # 验证菜品信息\n    for i, dish in enumerate(st.session_state.dishes):\n        if not dish[\"name\"]:\n            st.error(f\"菜品 #{i+1} 名称不能为空\")\n            return False\n        if dish[\"weight\"] <= 0:\n            st.error(f\"菜品 #{i+1} 重量必须大于0\")\n            return False\n    \n    return True\n\n# 调用后端服务\ndef call_backend_service():\n    # 准备请求数据\n    st.session_state.request_data = {\n        \"info\": {\n            \"性别\": st.session_state.gender,\n            \"年龄\": st.session_state.age,\n            \"身高\": st.session_state.height,\n            \"体重\": st.session_state.weight,\n            \"activity_level\": st.session_state.activity_level\n        },\n        \"data\": {\n            \"餐别\": st.session_state.meal_type,\n            \"菜品名称\": [\n                {\n                    \"食品名称\": dish[\"name\"],\n                    \"食品克数\": dish[\"weight\"]\n                } for dish in st.session_state.dishes\n            ]\n        }\n    }\n    \n    try:\n        # 显示加载状态\n        with st.spinner(\"正在分析您的营养需求，请稍候...\"):\n            start_time = time.time()\n            \n            # 发送请求\n            response = requests.post(\n                BACKEND_URL,\n                json=st.session_state.request_data,\n                timeout=120  # 120秒超时\n            )\n            \n            end_time = time.time()\n            st.session_state.response_time = end_time - start_time\n            \n            # 检查响应状态\n            if response.status_code == 200:\n                data = response.json()\n                if data.get(\"success\"):\n                    st.session_state.recommendations = data[\"result\"]\n                    return True\n                else:\n                    st.error(f\"服务返回错误: {data.get('error', '未知错误')}\")\n            else:\n                st.error(f\"请求失败, 状态码: {response.status_code}\")\n                st.error(f\"错误信息: {response.text}\")\n    except requests.exceptions.Timeout:\n        st.error(\"请求超时，请稍后再试\")\n    except requests.exceptions.ConnectionError:\n        st.error(\"无法连接到后端服务，请检查网络连接\")\n    except Exception as e:\n        st.error(f\"发生未知错误: {str(e)}\")\n    \n    return False\n\n# 左侧栏 - 用户信息输入\nwith st.sidebar:\n    st.markdown(\"### 🧑 个人信息\")\n    with st.container():\n        st.selectbox(\"性别\", [\"男\", \"女\"], key=\"gender\", index=0)\n        st.number_input(\"年龄\", min_value=1, max_value=120, key=\"age\", value=20)\n        st.number_input(\"身高 (cm)\", min_value=50, max_value=250, key=\"height\", value=175)\n        st.number_input(\"体重 (kg)\", min_value=10, max_value=200, key=\"weight\", value=65.5)\n        st.selectbox(\n            \"活动水平\", \n            [\"轻活动水平(办公室工作，很少运动)\", \"中活动水平(每天适量运动)\", \"重活动水平(体力劳动或高强度训练)\"], \n            key=\"activity_level\",\n            index=1\n        )\n        st.selectbox(\n            \"餐别\", \n            [\"早餐\", \"午餐\", \"晚餐\"], \n            key=\"meal_type\",\n            index=1\n        )\n\n# 主内容区\ncol1, col2 = st.columns([1, 1])\n\nwith col1:\n    # 菜品输入部分\n    st.markdown(\"### 🍽️ 菜品信息\")\n    with st.container():\n        for i, dish in enumerate(st.session_state.dishes):\n            with st.container():\n                col_a, col_b = st.columns([3, 1])\n                with col_a:\n                    dish_name = st.text_input(\n                        f\"菜品 #{i+1} 名称\", \n                        value=dish[\"name\"],\n                        key=f\"dish_name_{i}\",\n                        placeholder=\"例如: 番茄炒蛋\"\n                    )\n                with col_b:\n                    dish_weight = st.number_input(\n                        \"重量 (g)\", \n                        min_value=1, \n                        value=dish[\"weight\"],\n                        key=f\"dish_weight_{i}\"\n                    )\n                \n                # 更新session state\n                st.session_state.dishes[i][\"name\"] = dish_name\n                st.session_state.dishes[i][\"weight\"] = dish_weight\n                \n                # 删除按钮（不是第一个菜品时显示）\n                if i > 0:\n                    st.button(\"删除\", key=f\"remove_{i}\", on_click=remove_dish, args=(i,))\n        \n        # 添加菜品按钮\n        st.button(\"➕ 添加菜品\", on_click=add_dish, use_container_width=True)\n        \n        # 提交按钮\n        if st.button(\"生成菜品推荐\", use_container_width=True, type=\"primary\"):\n            if submit_form():\n                if call_backend_service():\n                    st.success(\"推荐结果已生成！\")\n                else:\n                    st.session_state.recommendations = None\n\nwith col2:\n    # 结果显示部分\n    st.markdown(\"### 📊 推荐结果\")\n    \n    if st.session_state.recommendations:\n        recommendations = st.session_state.recommendations\n        \n        # 显示请求信息\n        st.caption(f\"请求时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | 响应时间: {st.session_state.response_time:.2f}秒\")\n        \n        # 显示餐别和求解状态\n        st.markdown(f\"**餐别**: {recommendations.get('餐别', '午餐')}\")\n        st.markdown(f\"**求解状态**: {recommendations.get('求解状态', '未知')}\")\n        \n        # 显示菜品推荐\n        st.markdown(\"### 菜品推荐\")\n        \n        # 创建选项卡\n        tab1, tab2 = st.tabs([\"推荐详情\", \"营养分析\"])\n        \n        with tab1:\n            for dish in recommendations.get(\"菜品推荐\", []):\n                weight = dish.get(\"推荐权重\", 0)\n                \n                # 根据权重设置样式\n                if weight >= 0.7:\n                    card_class = \"high-weight\"\n                    recommendation_text = \"强烈推荐\"\n                elif weight >= 0.5:\n                    card_class = \"medium-weight\"\n                    recommendation_text = \"推荐\"\n                elif weight >= 0.3:\n                    card_class = \"medium-weight\"\n                    recommendation_text = \"适量食用\"\n                else:\n                    card_class = \"low-weight\"\n                    recommendation_text = \"少量尝试\"\n                \n                with st.container():\n                    st.markdown(f\"<div class='recommendation-card {card_class}'>\", unsafe_allow_html=True)\n                    \n                    # 菜品名称和权重\n                    col1, col2 = st.columns([3, 1])\n                    with col1:\n                        st.markdown(f\"#### {dish.get('菜品名称', '未知菜品')}\")\n                    with col2:\n                        st.markdown(f\"**权重**: {weight:.2f} ({recommendation_text})\")\n                    \n                    # 推荐原因\n                    st.markdown(f\"**原因**: {dish.get('原因', '暂无推荐理由')}\")\n                    \n                    # 营养值摘要\n                    with st.expander(\"查看营养详情\"):\n                        nutrition = dish.get(\"营养值\", {})\n                        if nutrition:\n                            col1, col2, col3 = st.columns(3)\n                            with col1:\n                                st.metric(\"能量\", f\"{nutrition.get('能量', 0):.1f} kcal\")\n                                st.metric(\"蛋白质\", f\"{nutrition.get('蛋白质', 0):.1f} g\")\n                            with col2:\n                                st.metric(\"脂肪\", f\"{nutrition.get('脂肪', 0):.1f} g\")\n                                st.metric(\"碳水化合物\", f\"{nutrition.get('碳水化合物', 0):.1f} g\")\n                            with col3:\n                                st.metric(\"钠\", f\"{nutrition.get('钠', 0):.1f} mg\")\n                                st.metric(\"维生素C\", f\"{nutrition.get('维生素C', 0):.1f} mg\")\n                        else:\n                            st.warning(\"无营养数据\")\n                    \n                    st.markdown(\"</div>\", unsafe_allow_html=True)\n        \n        with tab2:\n            # 整餐营养摘要\n            total_nutrition = recommendations.get(\"整餐营养摘要\", {})\n            if total_nutrition:\n                st.markdown(\"### 整餐营养摘要\")\n                \n                # 创建营养指标卡片\n                col1, col2, col3 = st.columns(3)\n                with col1:\n                    st.metric(\"总能量\", f\"{total_nutrition.get('能量', 0):.1f} kcal\")\n                    st.metric(\"总蛋白质\", f\"{total_nutrition.get('蛋白质', 0):.1f} g\")\n                with col2:\n                    st.metric(\"总脂肪\", f\"{total_nutrition.get('脂肪', 0):.1f} g\")\n                    st.metric(\"总碳水化合物\", f\"{total_nutrition.get('碳水化合物', 0):.1f} g\")\n                with col3:\n                    st.metric(\"总钠\", f\"{total_nutrition.get('钠', 0):.1f} mg\")\n                    st.metric(\"总维生素C\", f\"{total_nutrition.get('维生素C', 0):.1f} mg\")\n                \n                # 营养分布图表\n                st.markdown(\"### 营养分布\")\n                \n                # 主要营养素\n                main_nutrients = [\"能量\", \"蛋白质\", \"脂肪\", \"碳水化合物\"]\n                main_values = [total_nutrition.get(n, 0) for n in main_nutrients]\n                \n                # 创建DataFrame\n                df = pd.DataFrame({\n                    \"营养素\": main_nutrients,\n                    \"含量\": main_values\n                })\n                \n                # 显示柱状图\n                st.bar_chart(df.set_index(\"营养素\"))\n                \n                # 微量营养素\n                micro_nutrients = [\"钙\", \"铁\", \"维生素A\", \"维生素C\", \"钠\"]\n                micro_values = [total_nutrition.get(n, 0) for n in micro_nutrients]\n                \n                # 显示微量营养素\n                st.markdown(\"### 微量营养素\")\n                for nutrient, value in zip(micro_nutrients, micro_values):\n                    st.markdown(f\"**{nutrient}**: {value:.1f}\")\n                    # 添加简单的进度条\n                    max_value = max(micro_values) * 1.1 if max(micro_values) > 0 else 100\n                    percent = min(value / max_value, 1.0) if max_value > 0 else 0\n                    st.markdown(f\"\"\"\n                    <div class=\"nutrient-bar\">\n                        <div class=\"nutrient-fill\" style=\"width: {percent*100}%;\"></div>\n                    </div>\n                    <div class=\"nutrient-value\">{value:.1f}</div>\n                    \"\"\", unsafe_allow_html=True)\n            else:\n                st.warning(\"无整餐营养摘要数据\")\n    else:\n        st.info(\"请填写左侧表单并点击'生成菜品推荐'按钮获取个性化推荐\")\n\n# 添加一些说明\nst.markdown(\"---\")\nst.markdown(\"\"\"\n### 使用说明\n1. 在左侧填写您的个人信息（性别、年龄、身高、体重等）\n2. 添加您想评估的菜品（至少一个）\n3. 点击\"生成菜品推荐\"按钮获取个性化推荐\n4. 查看右侧的推荐结果，了解每道菜的推荐程度和原因\n\n**推荐权重说明**:\n- **强烈推荐 (权重 ≥ 0.7)**: 营养均衡且符合需求\n- **推荐 (0.5 ≤ 权重 < 0.7)**: 营养良好，适合食用\n- **适量食用 (0.3 ≤ 权重 < 0.5)**: 可以少量食用\n- **少量尝试 (权重 < 0.3)**: 建议本餐避免或少量尝试\n\"\"\")\n\n# 调试信息（可选）\nif st.checkbox(\"显示调试信息\"):\n    st.markdown(\"### 请求数据\")\n    st.json(st.session_state.request_data)\n    \n    if st.session_state.recommendations:\n        st.markdown(\"### 完整响应\")\n        st.json(st.session_state.recommendations)"
        }
    ]
}