{
    "sourceFile": "xcx_app_project/web_service.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1751517481142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751519551374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     bm25 = BM25Okapi(tokenized_corpus)\n     query_tokens = list(jieba.cut(query))\n     scores = bm25.get_scores(query_tokens)\n     return dishes[scores.argmax()]\n-\n+@\n def nutritionDataDict(age,gender,height,weight,activity_level):\n     nutriRangeList = list(nutriRangeDataset[gender].keys())\n     #data['年龄']    \n     if not activity_level:\n"
                },
                {
                    "date": 1751519558158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     bm25 = BM25Okapi(tokenized_corpus)\n     query_tokens = list(jieba.cut(query))\n     scores = bm25.get_scores(query_tokens)\n     return dishes[scores.argmax()]\n-@\n+\n def nutritionDataDict(age,gender,height,weight,activity_level):\n     nutriRangeList = list(nutriRangeDataset[gender].keys())\n     #data['年龄']    \n     if not activity_level:\n"
                },
                {
                    "date": 1751522831398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -689,6 +689,6 @@\n \n #def run_server(port):\n     #app.run(host='192.168.2.43', port=port, debug=True,threaded=True)\n if __name__ == \"__main__\":\n-    app.run(host='192.168.99.55', port=8888, debug=True,threaded=True)\n+    app.run(host='192.168.99.55', port=5000, debug=True,threaded=True)\n  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1751526708559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n \n     return logger\n \n \n-def match_dish_name_bm25(query, dishes):\n+#def match_dish_name_bm25(query, dishes):\n     tokenized_corpus = [list(jieba.cut(d)) for d in dishes]\n     bm25 = BM25Okapi(tokenized_corpus)\n     query_tokens = list(jieba.cut(query))\n     scores = bm25.get_scores(query_tokens)\n"
                },
                {
                    "date": 1751526715318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,10 +63,10 @@\n     logger.addHandler(handler)\n \n     return logger\n \n-\n-#def match_dish_name_bm25(query, dishes):\n+#!\n+def match_dish_name_bm25(query, dishes):\n     tokenized_corpus = [list(jieba.cut(d)) for d in dishes]\n     bm25 = BM25Okapi(tokenized_corpus)\n     query_tokens = list(jieba.cut(query))\n     scores = bm25.get_scores(query_tokens)\n"
                },
                {
                    "date": 1751526739151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     logger.addHandler(handler)\n \n     return logger\n \n-#!\n+#! 基于BM25算法的菜品名称匹配\n def match_dish_name_bm25(query, dishes):\n     tokenized_corpus = [list(jieba.cut(d)) for d in dishes]\n     bm25 = BM25Okapi(tokenized_corpus)\n     query_tokens = list(jieba.cut(query))\n"
                },
                {
                    "date": 1751526792671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n     query_tokens = list(jieba.cut(query))\n     scores = bm25.get_scores(query_tokens)\n     return dishes[scores.argmax()]\n \n-#\n+#!\n def nutritionDataDict(age,gender,height,weight,activity_level):\n     nutriRangeList = list(nutriRangeDataset[gender].keys())\n     #data['年龄']    \n     if not activity_level:\n"
                },
                {
                    "date": 1751528288415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n                 nutrition_dict[field] = round(float(value) / 1000, 6)\n             except ValueError:\n                 pass\n \n-# \n+# j\n def ingredients_calculate_weight(data):\n     if len(data) < 1:\n         return None,0\n     calories = 0\n"
                }
            ],
            "date": 1751517481142,
            "name": "Commit-0",
            "content": "import json\nimport os\nimport jieba\nimport copy\nimport asyncio\nimport time\nfrom collections import defaultdict\nfrom rank_bm25 import BM25Okapi\nimport logging\nimport concurrent.futures\nfrom functools import partial\nfrom logging.handlers import TimedRotatingFileHandler\nimport numpy as np\nfrom flask import Flask, jsonify, request\n\nimport config\nfrom concurrent.futures import ThreadPoolExecutor\napp = Flask(__name__)\n\nfrom openai import OpenAI\nclient = OpenAI(\n    base_url=\"http://localhost:8003/v1\",\n    api_key=\"EMPYT\", # 随便填写，只是为了通过接口参数校验\n)\n\n###绑定配置文件\nUPLOAD_FOLDER = './uploadfile'  # 请根据需要修改\nlog_path=\"./logs\"\nif not os.path.exists(UPLOAD_FOLDER):\n    os.mkdir(UPLOAD_FOLDER)\nif not os.path.exists(log_path):\n    os.mkdir(log_path)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\napp.config.from_object(config)\n\nnutritionDataset_path = \"/nfs/data/project/xcx_app_project/nutritionDatabase.json\"\nrecipeDataset_path = \"/nfs/data/project/xcx_app_project/recipeDataset.json\"\nnutri_range_Dataset_path = \"/nfs/data/project/xcx_app_project/base_nutri_range.json\"\n\nwith open(nutritionDataset_path,'r',encoding='utf-8')as f:\n    nutritionDataset = json.load(f)\nwith open(recipeDataset_path,'r',encoding='utf-8')as f:\n    recipeDataset = json.load(f)\nwith open(nutri_range_Dataset_path,'r',encoding='utf-8')as f:\n    nutriRangeDataset = json.load(f)\n\nscale = {\n    \"早餐\":0.3,\n    \"午餐\":0.4,\n    \"晚餐\":0.3\n}\ndef setup_logger(log_name, log_file):\n    logger = logging.getLogger(log_name)\n    logger.setLevel(logging.INFO)\n\n    # 日志文件每日轮转\n    handler = TimedRotatingFileHandler(\n        filename=log_file, when=\"midnight\", interval=1, backupCount=7, encoding=\"utf-8\"\n    )\n    formatter = logging.Formatter(\"%(asctime)s - %(levelname)s - %(message)s\")\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n\n    return logger\n\n\ndef match_dish_name_bm25(query, dishes):\n    tokenized_corpus = [list(jieba.cut(d)) for d in dishes]\n    bm25 = BM25Okapi(tokenized_corpus)\n    query_tokens = list(jieba.cut(query))\n    scores = bm25.get_scores(query_tokens)\n    return dishes[scores.argmax()]\n\ndef nutritionDataDict(age,gender,height,weight,activity_level):\n    nutriRangeList = list(nutriRangeDataset[gender].keys())\n    #data['年龄']    \n    if not activity_level:\n        activity_level = \"a\"\n    for age_range in nutriRangeList:\n        age_range_list = list(map(int, age_range.split(\"-\")))\n        if age > min(age_range_list) and age < max(age_range_list):\n            nutrition_dict = copy.deepcopy(nutriRangeDataset[gender][age_range])\n            print(\"activity_level\",activity_level)\n            print(nutrition_dict['能量'])\n            nutrition_dict['能量'] = nutrition_dict['能量'][activity_level]\n            convert_microgram_fields_to_mg(nutrition_dict, \"钼\")\n            convert_microgram_fields_to_mg(nutrition_dict, \"铬\")\n            convert_microgram_fields_to_mg(nutrition_dict, \"硒\")\n            convert_microgram_fields_to_mg(nutrition_dict, \"碘\")\n            convert_microgram_fields_to_mg(nutrition_dict, \"维生素A\")\n            convert_microgram_fields_to_mg(nutrition_dict, \"维生素K\")\n            convert_microgram_fields_to_mg(nutrition_dict, \"维生素B12\")\n            convert_microgram_fields_to_mg(nutrition_dict, \"叶酸\")\n            convert_microgram_fields_to_mg(nutrition_dict, \"生物素\")\n    if height:\n        if isinstance(age,int):\n            if gender == \"male\":\n                bmr = 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\n            elif gender == \"female\":\n                bmr = 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\n            else:\n                raise ValueError(\"性别必须为 'male' 或 'female'\")\n\n        # 计算每日总能量消耗 (TDEE)\n        activity_multipliers = {\n            \"a\": 1.2,\n            \"b\": 1.55,\n            \"c\": 1.9,\n            \"身体活动水平(轻)\": 1.2,\n            \"身体活动水平(中)\": 1.55,\n            \"身体活动水平(重)\": 1.9\n        }\n        tdee = bmr * activity_multipliers[activity_level]\n\n        # 计算宏量营养素需求\n        # 蛋白质: 1.6 克/公斤体重（适用于一般运动人群）\n        protein_per_kg = 1.6\n        protein_g = protein_per_kg * weight\n        protein_calories = protein_g * 4  # 每克蛋白质提供 4 卡路里\n\n        # 脂肪: 占总能量的 25%\n        fat_calories = tdee * 0.25\n        fat_g = fat_calories / 9  # 每克脂肪提供 9 卡路里\n\n        # 碳水化合物: 剩余能量\n        carb_calories = tdee - protein_calories - fat_calories\n        carb_g = carb_calories / 4  # 每克碳水化合物提供 4 卡路里\n\n        nutrition_dict[\"能量\"] = round(tdee, 2)\n        nutrition_dict[\"蛋白质\"] = round(protein_g, 2)\n        nutrition_dict[\"脂肪\"] = round(fat_g, 2)\n        nutrition_dict[\"碳水化合物\"] = round(carb_g, 2)\n    return nutrition_dict\n\ndef convert_microgram_fields_to_mg(nutrition_dict, field):\n    value = nutrition_dict.get(field)\n    if value is None:\n        return  # 如果该字段不存在则跳过\n\n    if isinstance(value, (int, float)):\n        nutrition_dict[field] = round(value / 1000, 6)\n    elif isinstance(value, str):\n        value = value.strip()\n        if '-' in value:\n            try:\n                parts = value.split('-')\n                converted = [str(round(float(p.strip()) / 1000, 6)) for p in parts]\n                nutrition_dict[field] = '-'.join(converted)\n            except ValueError:\n                pass\n        else:\n            try:\n                nutrition_dict[field] = round(float(value) / 1000, 6)\n            except ValueError:\n                pass\n\n\ndef ingredients_calculate_weight(data):\n    if len(data) < 1:\n        return None,0\n    calories = 0\n    fats = 0\n    protien = 0\n    carbohydrate = 0\n    vitamin_B1 = 0\n    calcium = 0\n    vitamin_B2 = 0\n    magnesium = 0\n    niacin = 0\n    iron = 0\n    vitamin_C = 0\n    manganese = 0\n    insoluble_Dietary_Fiber = 0\n    vitamin_E = 0\n    zinc = 0\n    total_Vitamin_A = 0\n    cholesterol = 0\n    copper = 0\n    carotene = 0\n    potassium = 0\n    phosphorus = 0\n    vitamin_A = 0\n    sodium = 0\n    selenium = 0\n    total_weight = 0\n    for each_ingredients in data:\n        ingredients_name = each_ingredients[0]\n        weight = int(each_ingredients[1])\n        total_weight = weight + total_weight\n        flat_dict = {list(d.keys())[0]: list(d.values())[0] for d in nutritionDataset[ingredients_name]['content']}\n        calories = float(flat_dict.get(\"能量\"))/100 * weight + calories\n        fats = float(flat_dict.get(\"脂肪\"))/100*weight + fats\n        protien = float(flat_dict.get(\"蛋白质\"))/100*weight + protien\n        carbohydrate = float(flat_dict.get(\"碳水化合物\"))/100*weight + carbohydrate\n        vitamin_B1 = float(flat_dict.get(\"硫胺素\"))/100*weight + vitamin_B1\n        calcium = float(flat_dict.get(\"钙\"))/100*weight + calcium\n        vitamin_B2 = float(flat_dict.get(\"核黄素\"))/100*weight + vitamin_B2\n        magnesium = float(flat_dict.get(\"镁\"))/100*weight + magnesium\n        niacin = float(flat_dict.get(\"烟酸\"))/100*weight + niacin\n        iron = float(flat_dict.get(\"铁\"))/100*weight + iron\n        vitamin_C = float(flat_dict.get(\"维生素C\"))/100*weight + vitamin_C\n        manganese = float(flat_dict.get(\"锰\"))/100*weight + manganese\n        insoluble_Dietary_Fiber = float(flat_dict.get(\"不溶性膳食纤维\"))/100*weight + insoluble_Dietary_Fiber\n        vitamin_E = float(flat_dict.get(\"维生素E\"))/100*weight + vitamin_E\n        zinc = float(flat_dict.get(\"锌\"))/100*weight + zinc\n        total_Vitamin_A = float(flat_dict.get(\"总维生素A\"))/100*weight + total_Vitamin_A\n        cholesterol = float(flat_dict.get(\"胆固醇\"))/100*weight + cholesterol\n        copper = float(flat_dict.get(\"铜\"))/100*weight + copper\n        carotene = float(flat_dict.get(\"胡萝卜素\"))/100*weight + carotene\n        potassium = float(flat_dict.get(\"钾\"))/100*weight + potassium\n        phosphorus = float(flat_dict.get(\"磷\"))/100*weight + phosphorus\n        vitamin_A = float(flat_dict.get(\"视黄醇\"))/100*weight + vitamin_A\n        sodium = float(flat_dict.get(\"钠\"))/100*weight + sodium\n        selenium = float(flat_dict.get(\"硒\"))/100*weight + selenium\n    all_nutrition = {\n        \"能量\":calories,\n        \"脂肪\":fats,\n        \"蛋白质\":protien,\n        \"碳水化合物\":carbohydrate,\n        \"维生素B1\":vitamin_B1,\n        \"钙\":calcium,\n        \"维生素B2\":vitamin_B2,\n        \"镁\":magnesium,\n        \"烟酸\":niacin,\n        \"铁\":iron,\n        \"维生素C\":vitamin_C,\n        \"锰\":manganese,\n        \"不溶性膳食纤维\":insoluble_Dietary_Fiber,\n        \"维生素E\":vitamin_E,\n        \"锌\":zinc,\n        \"总维生素A\":total_Vitamin_A,\n        \"胆固醇\":cholesterol,\n        \"铜\":copper,\n        \"胡萝卜素\":carotene,\n        \"钾\":potassium,\n        \"磷\":phosphorus,\n        \"维生素A\":vitamin_A/1000,\n        \"钠\":sodium,\n        \"硒\":selenium / 1000\n    }\n    return all_nutrition,total_weight\n\n\ngender_map = {\n    \"男\":\"male\",\n    \"女\":\"female\"\n}\n\ndef compare_nutrients(current: dict, recommended: dict):\n    def parse_range(value):\n        \"\"\"解析推荐值为均值（处理单值和区间）\"\"\"\n        if isinstance(value, (int, float)):\n            return float(value)\n        elif isinstance(value, str):\n            if '-' in value:\n                low, high = map(float, value.split('-'))\n                return (low + high) / 2\n            else:\n                return float(value)\n        else:\n            raise ValueError(f\"Unsupported type: {value}\")\n    \n    result = {}\n    keys_to_compare = ['能量', '蛋白质', '碳水化合物', '脂肪']\n    \n    for key in keys_to_compare:\n        current_val = float(current.get(key, 0))\n        if key not in recommended:\n            result[key] = '无推荐值'\n            continue\n        \n        target_val = parse_range(recommended[key])\n        lower = target_val * 0.98\n        upper = target_val * 1.02\n        \n        if current_val < lower:\n            result[key] = '不足'\n        elif current_val > upper:\n            result[key] = '超量'\n        else:\n            result[key] = '满足'\n    common_keys = current.keys() & recommended.keys()\n    common_current = {k: current[k] for k in common_keys}\n    common_recommended = {k: recommended[k] for k in common_keys}\n\n    return result, common_current, common_recommended\n\n\n\ndef get_nutri_range(data):\n    def is_valid(value):\n\n        return value not in [None, '', 'null']\n\n    fields = {\n        '性别': is_valid(data.get('性别')),\n        '年龄': is_valid(data.get('年龄')),\n        '身高': is_valid(data.get('身高')),\n        '体重': is_valid(data.get('体重')),\n    }\n    activity_level = data['activity_level']\n    present = {k for k, v in fields.items() if v}\n    if present == {'性别', '年龄', '身高', '体重'}:\n        gender = gender_map[data['性别']]\n        result_nutrition_dict = nutritionDataDict(int(data['年龄']),gender,float(data['身高']),float(data['体重']),activity_level)\n    elif present == {'性别', '年龄'}:\n        gender = gender_map[data['性别']]\n        result_nutrition_dict = nutritionDataDict(int(data['年龄']),gender,None,None,None)\n    elif present.issubset({'性别', '年龄'}) or len(present) <= 1:\n        return None\n    else:\n        return f\"信息部分存在（{present}），但不满足规则，请补全信息\"\n    return result_nutrition_dict\n\ndef cal_food_nutri(all_food_name):\n    total_nutrition_all = {}\n    total_food_weight = 0\n    total_main_weight = 0\n    total_other_weight = 0\n    \n    # 缓存匹配结果，避免重复匹配\n    recipe_cache = {}\n    nutrition_cache = {}\n    \n    for each_food_dict in all_food_name:\n        food_name = each_food_dict[\"食品名称\"]\n        food_weight = each_food_dict[\"食品克数\"]\n        value = each_food_dict.get(\"食材信息\")\n        \n        total_nutrition = {}\n        print(\"food_name\",food_name)\n        if isinstance(value, (dict, str)) and value:\n            # 处理食材信息\n            ingredient_info = each_food_dict['食材信息']\n            each_food_list = []\n            \n            for k, v in ingredient_info.items():\n                # 使用缓存避免重复匹配\n                if k not in nutrition_cache:\n                    matched_food_name = match_dish_name_bm25(k, list(nutritionDataset.keys()))\n                    nutrition_cache[k] = matched_food_name\n                else:\n                    matched_food_name = nutrition_cache[k]\n                \n                print(\"matched_food_name\", matched_food_name)\n                each_food_list.append([matched_food_name, float(v)])\n            \n            total_nutrition, all_weight = ingredients_calculate_weight(each_food_list)\n            \n        else:\n            # 处理菜品信息\n            total_food_weight += int(food_weight)\n            \n            # 使用缓存避免重复匹配和计算\n            if food_name not in recipe_cache:\n                matched_food_name = match_dish_name_bm25(food_name, list(recipeDataset.keys()))\n                print(\"matched_food_name\", matched_food_name)\n                recipe_dict = recipeDataset[matched_food_name]\n                \n                # 计算食材营养\n                main_ingred = recipe_dict['主食材']\n                main_ingred_all_nutrition, main_weight = ingredients_calculate_weight(main_ingred)\n                other_ingred = recipe_dict['辅料']\n                other_ingred_all_nutrition, other_weight = ingredients_calculate_weight(other_ingred)\n                \n                # 合并营养信息\n                if main_ingred_all_nutrition and other_ingred_all_nutrition:\n                    combined_nutrition = {}\n                    all_keys = set(main_ingred_all_nutrition.keys()) | set(other_ingred_all_nutrition.keys())\n                    for key in all_keys:\n                        main_value = float(main_ingred_all_nutrition.get(key, 0))\n                        other_value = float(other_ingred_all_nutrition.get(key, 0))\n                        combined_nutrition[key] = main_value + other_value\n                elif main_ingred_all_nutrition:\n                    combined_nutrition = main_ingred_all_nutrition\n                elif other_ingred_all_nutrition:\n                    combined_nutrition = other_ingred_all_nutrition\n                else:\n                    combined_nutrition = {}\n                \n                # 缓存结果\n                recipe_cache[food_name] = {\n                    'nutrition': combined_nutrition,\n                    'main_weight': main_weight,\n                    'other_weight': other_weight\n                }\n            else:\n                # 使用缓存的结果\n                cached_result = recipe_cache[food_name]\n                combined_nutrition = cached_result['nutrition']\n                main_weight = cached_result['main_weight']\n                other_weight = cached_result['other_weight']\n            \n            total_nutrition = combined_nutrition\n            total_main_weight += int(main_weight)\n            total_other_weight += int(other_weight)\n        \n        # 累积营养信息 - 只遍历一次\n        if total_nutrition:\n            for key, value in total_nutrition.items():\n                total_nutrition_all[key] = total_nutrition_all.get(key, 0) + float(value)\n    \n    # 最终计算 - 过滤和计算一次完成\n    if total_main_weight + total_other_weight > 0:\n        total_nutrition_all = {\n            k: round(float(v) / (total_main_weight + total_other_weight) * total_food_weight, 4) \n            for k, v in total_nutrition_all.items() if float(v) > 0\n        }\n    \n    return total_nutrition_all\n'''\ndef cal_food_nutri(all_food_name):\n    total_nutrition_all = {}\n    total_food_weight = 0\n    total_main_weight = 0\n    total_other_weight = 0\n    for each_food_dict in all_food_name:\n        food_name = each_food_dict[\"食品名称\"]\n        food_weight = each_food_dict[\"食品克数\"]\n        value = each_food_dict.get(\"食材信息\")\n        if isinstance(value, (dict, str)) and value:\n            ingredient_info = each_food_dict['食材信息']\n            each_food_list = []\n            for k,v in ingredient_info.items():\n                matched_food_name = match_dish_name_bm25(k,list(nutritionDataset.keys()))\n                print(\"matched_food_name\",matched_food_name)\n                each_food_list.append([matched_food_name,float(v)])\n            total_nutrition,all_weight = ingredients_calculate_weight(each_food_list)\n            if total_nutrition:\n                for key, value in total_nutrition.items():\n                    total_nutrition_all[key] = total_nutrition_all.get(key, 0) + float(value) \n        else:\n            total_food_weight = total_food_weight + int(food_weight)\n            matched_food_name = match_dish_name_bm25(food_name,list(recipeDataset.keys()))\n            print(\"matched_food_name\",matched_food_name)\n            recipe_dict = recipeDataset[matched_food_name]\n            #计算食材\n            main_ingred = recipe_dict['主食材']\n            main_ingred_all_nutrition,main_weight = ingredients_calculate_weight(main_ingred)\n            other_ingred = recipe_dict['辅料']\n            other_ingred_all_nutrition,other_weight = ingredients_calculate_weight(other_ingred)\n            #然后食材用于融合\n            total_main_weight = total_main_weight + int(main_weight)\n            total_other_weight = total_other_weight + int(other_weight)\n            if main_ingred_all_nutrition and other_ingred_all_nutrition:\n                total_nutrition = {}\n                all_keys = set(main_ingred_all_nutrition.keys()) | set(other_ingred_all_nutrition.keys())\n                for key in all_keys:\n                    main_value = float(main_ingred_all_nutrition.get(key, 0))\n                    other_value = float(other_ingred_all_nutrition.get(key, 0))\n                    total_nutrition[key] = main_value + other_value\n            elif main_ingred_all_nutrition:\n                total_nutrition = main_ingred_all_nutrition\n            elif other_ingred_all_nutrition:\n                total_nutrition = other_ingred_all_nutrition\n\n        for key, value in total_nutrition.items():\n            total_nutrition_all[key] = total_nutrition_all.get(key, 0) + float(value)\n    total_nutrition_all = {k: round(float(v) / (total_main_weight + total_other_weight) * total_food_weight, 4) for k, v in total_nutrition_all.items() if float(v) > 0}\n    return total_nutrition_all\n'''\ndef recalculate_recommend_nutrition_range(data,scale):\n    result = {}\n    for key,value in data.items():\n        if isinstance(value,str):\n            if '-' in value:\n                low, high = value.split('-')\n                try:\n                    low = float(low) * scale\n                    high = float(high) * scale\n                    result[key] = f\"{low:.2f}-{high:.2f}\"\n                except ValueError:\n                    result[key] = value  # 保留原值，无法转为float\n            else:\n                try:\n                    num = float(value) * scale\n                    result[key] = f\"{num:.2f}\"\n                except ValueError:\n                    result[key] = value  # 同样保留s\n        else:\n            try:\n                num = float(value) * scale\n                result[key] = f\"{num:.2f}\"\n            except ValueError:\n                result[key] = value  # 同样保留s\n    return result\n\ndef recalculate_personal_nutrition_range(data,scale):\n    result = {}\n    for key,value in data.items():\n        if '-' in value:\n            low, high = value.split('-')\n            try:\n                low = float(low) * scale\n                high = float(high) * scale\n                result[key] = f\"{low:.2f}-{high:.2f}\"\n            except ValueError:\n                result[key] = value  # 保留原值，无法转为float\n        else:\n            try:\n                num = float(value) * scale\n                result[key] = f\"{num:.2f}\"\n            except ValueError:\n                result[key] = value  # 同样保留s\n    return result\n\ndef parse_diet_data(data):\n    # 提取用户基本信息\n    gender = data['info']['性别']\n    age = data['info']['年龄']\n    height = data['info']['身高']\n    weight = data['info']['体重']\n    activity = \"未提供\" if data['info']['activity_level'] is None else data['info']['activity_level']\n    \n    # 提取餐别信息\n    meal_type = data['data']['餐别']\n    # 处理菜品信息\n    dishes = []\n    for food in data['data']['菜品名称']:\n        # 基础菜品信息\n        dish_info = f\"{food['食品名称']}{food['食品克数']}克\"\n        \n        # 添加食材详细信息（如果有）\n        if food['食材信息']:\n            ingredients = [f\"{ing}{weight}克\" for ing, weight in food['食材信息'].items()]\n            dish_info += f\"（含{''.join(ingredients)}）\"\n        \n        dishes.append(dish_info)\n    \n    # 组合所有菜品描述\n    dishes_str = '和'.join(dishes)\n    return f\"{data['flag']}天内容，一位{age}岁{gender}性（身高{height}cm，体重{weight}kg，活动水平{activity}，{meal_type}食用了{dishes_str}。\"\n\nasync def ask(illness,info_data,recommend_nutrition_range,total_nutrition_all_recipe):\n\n    #'''\n    #url = \"http://192.168.99.55:8003/generate\"\n    #data = {\n    #    \"prompt\": question\n    #}\n    print(\"info_data\",info_data)\n    print(\"recommend_nutrition_range\",recommend_nutrition_range)\n    print(\"total_nutrition_all_recipe\",total_nutrition_all_recipe)\n    # 执行curl命令\n    #result = requests.post(url, json=data)\n    #print(\"output_2\",result.json()[\"choices\"][0][\"text\"])\n    #return result.json()[\"choices\"][0][\"text\"]\n    #'''\n    completion = client.chat.completions.create(\n        model=\"FoodSky-7B-Qwen\",\n        messages=[\n            {\"role\": \"system\", \"content\": '你是FoodSky，由中科深健研发的食品大模型'},\n            {\"role\": \"user\", \"content\": f\"\"\"\n                            请根据以下信息，结合个人情况、推荐摄入和当前摄入，生成一句约20字的健康膳食建议：\n\n                            个人信息：\n                            {info_data}\n\n                            患病情况：\n                            {illness}\n\n                            这个人的推荐摄入量：\n                            {recommend_nutrition_range}\n\n                            这个人的当前摄入量：\n                            {total_nutrition_all_recipe}\n\n                            请结合推荐与实际摄入量，针对该用户饮食状况，用80字以内给出合理的健康膳食建议。\n             \"\"\"}\n        ]\n    )\n    return completion.choices[0].message.content\n\ndef dict_to_text(nutrient_dict):\n    parts = []\n    for nutrient, value in nutrient_dict.items():\n        parts.append(f\"{nutrient}为{value}\")\n    sentence = \"包括：\" + \"，\".join(parts) + \"。\"\n    return sentence\n\napp_log = setup_logger(\"logger\", \"logs/app_log.log\")\n@app.post('/getNutrition')\nasync def getNutrition():  \n    json_data = request.get_json() \n    flag = int(json_data.get(\"flag\"))\n    info = json_data.get(\"info\")\n    data = json_data.get(\"data\")\n    output = \"\"\n    if flag == 0:\n        cal_scale = scale[data['餐别']]\n        food_name = data['菜品名称']\n        total_nutrition_all_recipe = cal_food_nutri(food_name)\n        recommend_nutrition_range = get_nutri_range(info)\n        recommend_nutrition_range = recalculate_recommend_nutrition_range(recommend_nutrition_range,cal_scale)\n        total_nutrition_all_recipe = recalculate_recommend_nutrition_range(total_nutrition_all_recipe,cal_scale)\n        info_data = parse_diet_data(json_data)\n        result,total_nutrition_all_recipe,recommend_nutrition_range = compare_nutrients(total_nutrition_all_recipe,recommend_nutrition_range)\n        result_dict = {\n            \"success\":True,\n            \"本次营养范围\":total_nutrition_all_recipe,\n            \"推荐营养范围\":recommend_nutrition_range,\n            \"营养健康建议\":None,\n            \"message\":\"访问成功\"\n        }\n        result_dict.update(result)\n    elif flag == 1:\n        food_name = data['菜品名称']\n        total_nutrition_all_recipe = cal_food_nutri(food_name)\n        recommend_nutrition_range = get_nutri_range(info)\n        info_data = parse_diet_data(json_data)\n        illness = \"无\"\n        if info[\"疾病情况\"]:\n            illness = info[\"疾病情况\"]\n        result,total_nutrition_all_recipe,recommend_nutrition_range = compare_nutrients(total_nutrition_all_recipe,recommend_nutrition_range)\n        recommend_nutrition = dict_to_text(recommend_nutrition_range)\n        total_nutrition_all_recipe_personal = dict_to_text(total_nutrition_all_recipe)\n        #output = await ask(illness,info_data,recommend_nutrition,total_nutrition_all_recipe_personal)\n        result_dict = {\n            \"success\":True,\n            \"本次营养范围\":total_nutrition_all_recipe,\n            \"推荐营养范围\":recommend_nutrition_range,\n            \"营养健康建议\":output,\n            \"message\":\"访问成功\"\n        }\n        result_dict.update(result)\n    elif flag == 7:\n        t1 = time.time()\n        food_name = data['菜品名称']\n        total_nutrition_all_recipe = cal_food_nutri(food_name)\n        t2 = time.time()\n        recommend_nutrition_range = get_nutri_range(info)\n        t3 = time.time()\n        print(t2-t1)\n        recommend_nutrition_range = recalculate_recommend_nutrition_range(recommend_nutrition_range,7)\n        info_data = parse_diet_data(json_data)\n        recommend_nutrition = dict_to_text(recommend_nutrition_range)\n        total_nutrition_all_recipe_personal = dict_to_text(total_nutrition_all_recipe)\n        result,total_nutrition_all_recipe,recommend_nutrition_range = compare_nutrients(total_nutrition_all_recipe,recommend_nutrition_range)\n        print(result)\n        illness = \"无\"\n        if info[\"疾病情况\"]:\n            illness = info[\"疾病情况\"]\n        t4 = time.time()\n        #output = await ask(illness,info_data,recommend_nutrition,total_nutrition_all_recipe_personal)\n        result_dict = {\n            \"success\":True,\n            \"本次营养范围\":total_nutrition_all_recipe,\n            \"推荐营养范围\":recommend_nutrition_range,\n            \"营养健康建议\":output,\n            \"message\":\"访问成功\"\n        }\n        result_dict.update(result)\n    elif flag == 30:\n        food_name = data['菜品名称']\n        total_nutrition_all_recipe = cal_food_nutri(food_name)\n        recommend_nutrition_range = get_nutri_range(info)\n        recommend_nutrition_range = recalculate_recommend_nutrition_range(recommend_nutrition_range,30)\n        info_data = parse_diet_data(json_data)\n        recommend_nutrition = dict_to_text(recommend_nutrition_range)\n        total_nutrition_all_recipe_personal = dict_to_text(total_nutrition_all_recipe)\n        result,total_nutrition_all_recipe,recommend_nutrition_range = compare_nutrients(total_nutrition_all_recipe,recommend_nutrition_range)\n        illness = \"无\"\n        if info[\"疾病情况\"]:\n            illness = info[\"疾病情况\"]\n        #output = await ask(illness,info_data,recommend_nutrition,total_nutrition_all_recipe_personal)\n        result_dict = {\n            \"success\":True,\n            \"本次营养范围\":total_nutrition_all_recipe,\n            \"推荐营养范围\":recommend_nutrition_range,\n            \"营养健康建议\":output,\n            \"message\":\"访问成功\"\n        }\n        result_dict.update(result)\n    else:\n        #get 访问方式返回\n        result_dict = {\n                \"success\":False,\n                \"本次营养范围\":None,\n                \"推荐营养范围\":None,\n                \"营养健康建议\":None,\n                \"message\":f\"访问失败，flag应为<0,1,7,30>,但是接收到的flag为<{flag}>\"\n                }\n    print(result_dict)\n    app_log.info(f\"[Output response] {result_dict}\")\n    return jsonify(result_dict)#jsonify\n\n\n\n#def run_server(port):\n    #app.run(host='192.168.2.43', port=port, debug=True,threaded=True)\nif __name__ == \"__main__\":\n    app.run(host='192.168.99.55', port=8888, debug=True,threaded=True)\n "
        }
    ]
}